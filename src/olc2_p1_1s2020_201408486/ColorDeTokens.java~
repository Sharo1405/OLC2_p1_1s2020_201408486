/* The following code was generated by JFlex 1.4.1 on 2/20/20 12:27 AM */

package olc2_p1_1s2020_201408486;


import java.io.*;   
import javax.swing.text.Segment;   
   
import org.fife.ui.rsyntaxtextarea.*;   
   

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 2/20/20 12:27 AM from the specification file
 * <tt>C:/Users/sharolin/Desktop/OLC2_1s_2020/OLC2_p1_1s2020_201408486/src/olc2_p1_1s2020_201408486/pintar.jflex</tt>
 */
public class ColorDeTokens extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int comentarios = 1;
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\3\26\0\1\43\1\6\1\7\2\0\1\12\1\0\1\12"+
    "\1\12\1\10\1\12\1\12\1\12\1\5\1\11\12\2\1\12\1\12"+
    "\1\43\1\42\1\43\1\12\1\0\1\25\1\26\1\23\1\14\1\16"+
    "\1\15\1\36\1\24\1\13\1\1\1\30\1\17\1\37\1\33\1\34"+
    "\1\32\1\1\1\27\1\20\1\22\1\31\1\40\1\21\1\41\1\35"+
    "\1\1\1\12\1\4\1\12\1\12\1\1\1\0\1\25\1\26\1\23"+
    "\1\14\1\16\1\15\1\36\1\24\1\13\1\1\1\30\1\17\1\37"+
    "\1\33\1\34\1\32\1\1\1\27\1\20\1\22\1\31\1\40\1\21"+
    "\1\41\1\35\1\1\1\12\1\12\1\12\63\0\1\1\21\0\1\1"+
    "\u1f54\0\1\1\udfe7\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\2\1\3\1\1\1\4\1\5\10\1"+
    "\1\6\7\1\1\5\1\7\1\10\2\7\2\0\1\11"+
    "\1\4\1\12\1\6\33\1\1\0\1\2\30\1\1\13"+
    "\40\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[122];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\154\0\220\0\110\0\264\0\330"+
    "\0\110\0\374\0\u0120\0\u0144\0\u0168\0\u018c\0\u01b0\0\u01d4"+
    "\0\u01f8\0\u021c\0\u0240\0\u0264\0\u0288\0\u02ac\0\u02d0\0\u02f4"+
    "\0\u0318\0\u033c\0\u0360\0\110\0\u0384\0\110\0\u03a8\0\264"+
    "\0\110\0\u03cc\0\u03cc\0\154\0\u03f0\0\u0414\0\u0438\0\u045c"+
    "\0\u0480\0\u04a4\0\u04c8\0\u04ec\0\u0510\0\u0534\0\u0558\0\u057c"+
    "\0\u05a0\0\u05c4\0\u05e8\0\u060c\0\u0630\0\u0654\0\u0678\0\u069c"+
    "\0\u06c0\0\u06e4\0\u0708\0\u072c\0\u0750\0\u0774\0\u0798\0\u07bc"+
    "\0\u07e0\0\u0804\0\u0828\0\u084c\0\u0870\0\u0894\0\u08b8\0\u08dc"+
    "\0\u0900\0\u0924\0\u0948\0\u096c\0\u0990\0\u09b4\0\u09d8\0\u09fc"+
    "\0\u0a20\0\u0a44\0\u0a68\0\u0a8c\0\u0ab0\0\u0ad4\0\u0af8\0\u0b1c"+
    "\0\u0b40\0\110\0\u0b64\0\u0b88\0\u0bac\0\u0bd0\0\u0bf4\0\u0c18"+
    "\0\u0c3c\0\u0c60\0\u0c84\0\u0ca8\0\u0ccc\0\u0cf0\0\u0d14\0\u0d38"+
    "\0\u0d5c\0\u0d80\0\u0da4\0\u0dc8\0\u0dec\0\u0e10\0\u0e34\0\u0e58"+
    "\0\u0e7c\0\u0ea0\0\u0ec4\0\u0ee8\0\u0f0c\0\u0f30\0\u0f54\0\u0f78"+
    "\0\u0f9c\0\u0fc0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[122];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\3\1\4\1\7\1\10"+
    "\3\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\2\4\1\27"+
    "\1\30\3\4\1\31\2\4\2\32\3\33\1\34\3\33"+
    "\1\35\1\36\33\33\45\0\2\4\2\0\1\4\5\0"+
    "\27\4\4\0\1\5\2\0\1\37\36\0\3\40\2\0"+
    "\1\40\1\41\35\40\3\42\1\0\4\42\1\43\33\42"+
    "\1\0\2\4\2\0\1\4\5\0\1\4\2\44\15\4"+
    "\1\44\6\4\3\0\2\4\2\0\1\4\5\0\3\4"+
    "\1\45\15\4\1\44\5\4\3\0\2\4\2\0\1\4"+
    "\5\0\12\4\1\15\3\4\1\46\2\4\1\47\5\4"+
    "\3\0\2\4\2\0\1\4\5\0\4\4\1\50\22\4"+
    "\3\0\2\4\2\0\1\4\5\0\1\51\2\4\1\52"+
    "\23\4\3\0\2\4\2\0\1\4\5\0\6\4\1\53"+
    "\1\54\17\4\3\0\2\4\2\0\1\4\5\0\11\4"+
    "\1\55\15\4\3\0\2\4\2\0\1\4\5\0\14\4"+
    "\1\56\4\4\1\57\1\60\4\4\3\0\2\4\2\0"+
    "\1\4\5\0\12\4\1\50\6\4\1\61\5\4\3\0"+
    "\2\4\2\0\1\4\5\0\1\51\26\4\3\0\2\4"+
    "\2\0\1\4\5\0\14\4\1\62\12\4\3\0\2\4"+
    "\2\0\1\4\5\0\12\4\1\63\1\4\1\64\12\4"+
    "\3\0\2\4\2\0\1\4\5\0\3\4\1\65\15\4"+
    "\1\66\5\4\3\0\2\4\2\0\1\4\5\0\1\67"+
    "\3\4\1\70\7\4\1\71\12\4\3\0\2\4\2\0"+
    "\1\4\5\0\10\4\1\72\3\4\1\73\1\4\1\74"+
    "\10\4\3\0\2\4\2\0\1\4\5\0\3\4\1\75"+
    "\6\4\1\76\6\4\1\77\5\4\44\0\1\11\1\0"+
    "\3\33\1\0\4\33\1\0\36\33\1\0\4\33\1\100"+
    "\33\33\2\0\1\101\2\0\1\37\36\0\3\42\1\0"+
    "\40\42\1\0\2\4\2\0\1\4\5\0\2\4\1\102"+
    "\24\4\3\0\2\4\2\0\1\4\5\0\20\4\1\103"+
    "\6\4\3\0\2\4\2\0\1\4\5\0\14\4\1\44"+
    "\12\4\3\0\2\4\2\0\1\4\5\0\5\4\1\67"+
    "\21\4\3\0\2\4\2\0\1\4\5\0\5\4\1\104"+
    "\21\4\3\0\2\4\2\0\1\4\5\0\20\4\1\105"+
    "\6\4\3\0\2\4\2\0\1\4\5\0\1\106\26\4"+
    "\3\0\2\4\2\0\1\4\5\0\14\4\1\107\12\4"+
    "\3\0\2\4\2\0\1\4\5\0\1\110\26\4\3\0"+
    "\2\4\2\0\1\4\5\0\16\4\1\111\10\4\3\0"+
    "\2\4\2\0\1\4\5\0\4\4\1\112\11\4\1\113"+
    "\10\4\3\0\2\4\2\0\1\4\5\0\17\4\1\114"+
    "\7\4\3\0\2\4\2\0\1\4\5\0\20\4\1\115"+
    "\6\4\3\0\2\4\2\0\1\4\5\0\14\4\1\116"+
    "\12\4\3\0\2\4\2\0\1\4\5\0\14\4\1\117"+
    "\12\4\3\0\2\4\2\0\1\4\5\0\3\4\1\120"+
    "\23\4\3\0\2\4\2\0\1\4\5\0\7\4\1\121"+
    "\14\4\1\122\2\4\3\0\2\4\2\0\1\4\5\0"+
    "\16\4\1\123\10\4\3\0\2\4\2\0\1\4\5\0"+
    "\3\4\1\44\23\4\3\0\2\4\2\0\1\4\5\0"+
    "\21\4\1\104\5\4\3\0\2\4\2\0\1\4\5\0"+
    "\1\124\26\4\3\0\2\4\2\0\1\4\5\0\21\4"+
    "\1\125\5\4\3\0\2\4\2\0\1\4\5\0\21\4"+
    "\1\126\5\4\3\0\2\4\2\0\1\4\5\0\4\4"+
    "\1\125\22\4\3\0\2\4\2\0\1\4\5\0\1\4"+
    "\1\127\10\4\1\130\14\4\3\0\2\4\2\0\1\4"+
    "\5\0\7\4\1\131\17\4\3\0\2\4\2\0\1\4"+
    "\5\0\1\4\1\67\25\4\13\0\1\132\34\0\1\101"+
    "\42\0\2\4\2\0\1\4\5\0\12\4\1\133\14\4"+
    "\3\0\2\4\2\0\1\4\5\0\10\4\1\134\16\4"+
    "\3\0\2\4\2\0\1\4\5\0\7\4\1\44\17\4"+
    "\3\0\2\4\2\0\1\4\5\0\23\4\1\135\3\4"+
    "\3\0\2\4\2\0\1\4\5\0\7\4\1\136\17\4"+
    "\3\0\2\4\2\0\1\4\5\0\1\137\26\4\3\0"+
    "\2\4\2\0\1\4\5\0\4\4\1\67\22\4\3\0"+
    "\2\4\2\0\1\4\5\0\3\4\1\44\14\4\1\140"+
    "\6\4\3\0\2\4\2\0\1\4\5\0\21\4\1\141"+
    "\5\4\3\0\2\4\2\0\1\4\5\0\17\4\1\142"+
    "\7\4\3\0\2\4\2\0\1\4\5\0\3\4\1\143"+
    "\23\4\3\0\2\4\2\0\1\4\5\0\7\4\1\144"+
    "\17\4\3\0\2\4\2\0\1\4\5\0\12\4\1\145"+
    "\14\4\3\0\2\4\2\0\1\4\5\0\17\4\1\146"+
    "\7\4\3\0\2\4\2\0\1\4\5\0\12\4\1\140"+
    "\14\4\3\0\2\4\2\0\1\4\5\0\16\4\1\147"+
    "\10\4\3\0\2\4\2\0\1\4\5\0\21\4\1\150"+
    "\5\4\3\0\2\4\2\0\1\4\5\0\20\4\1\151"+
    "\6\4\3\0\2\4\2\0\1\4\5\0\20\4\1\104"+
    "\6\4\3\0\2\4\2\0\1\4\5\0\4\4\1\44"+
    "\22\4\3\0\2\4\2\0\1\4\5\0\6\4\1\44"+
    "\20\4\3\0\2\4\2\0\1\4\5\0\1\152\26\4"+
    "\3\0\2\4\2\0\1\4\5\0\20\4\1\44\6\4"+
    "\3\0\2\4\2\0\1\4\5\0\14\4\1\153\12\4"+
    "\3\0\2\4\2\0\1\4\5\0\16\4\1\154\10\4"+
    "\3\0\2\4\2\0\1\4\5\0\7\4\1\155\17\4"+
    "\3\0\2\4\2\0\1\4\5\0\7\4\1\156\17\4"+
    "\3\0\2\4\2\0\1\4\5\0\10\4\1\156\16\4"+
    "\3\0\2\4\2\0\1\4\5\0\20\4\1\157\6\4"+
    "\3\0\2\4\2\0\1\4\5\0\15\4\1\44\11\4"+
    "\3\0\2\4\2\0\1\4\5\0\6\4\1\160\20\4"+
    "\3\0\2\4\2\0\1\4\5\0\17\4\1\160\7\4"+
    "\3\0\2\4\2\0\1\4\5\0\21\4\1\161\5\4"+
    "\3\0\2\4\2\0\1\4\5\0\1\162\26\4\3\0"+
    "\2\4\2\0\1\4\5\0\22\4\1\44\4\4\3\0"+
    "\2\4\2\0\1\4\5\0\4\4\1\70\22\4\3\0"+
    "\2\4\2\0\1\4\5\0\14\4\1\130\12\4\3\0"+
    "\2\4\2\0\1\4\5\0\25\4\1\67\1\4\3\0"+
    "\2\4\2\0\1\4\5\0\1\4\1\44\25\4\3\0"+
    "\2\4\2\0\1\4\5\0\12\4\1\130\14\4\3\0"+
    "\2\4\2\0\1\4\5\0\1\163\26\4\3\0\2\4"+
    "\2\0\1\4\5\0\4\4\1\104\22\4\3\0\2\4"+
    "\2\0\1\4\5\0\1\164\26\4\3\0\2\4\2\0"+
    "\1\4\5\0\11\4\1\44\15\4\3\0\2\4\2\0"+
    "\1\4\5\0\23\4\1\165\3\4\3\0\2\4\2\0"+
    "\1\4\5\0\3\4\1\166\23\4\3\0\2\4\2\0"+
    "\1\4\5\0\2\4\1\44\24\4\3\0\2\4\2\0"+
    "\1\4\5\0\20\4\1\167\6\4\3\0\2\4\2\0"+
    "\1\4\5\0\26\4\1\44\3\0\2\4\2\0\1\4"+
    "\5\0\21\4\1\130\5\4\3\0\2\4\2\0\1\4"+
    "\5\0\4\4\1\170\22\4\3\0\2\4\2\0\1\4"+
    "\5\0\14\4\1\171\12\4\3\0\2\4\2\0\1\4"+
    "\5\0\16\4\1\67\10\4\3\0\2\4\2\0\1\4"+
    "\5\0\3\4\1\52\23\4\3\0\2\4\2\0\1\4"+
    "\5\0\10\4\1\172\16\4\3\0\2\4\2\0\1\4"+
    "\5\0\12\4\1\50\14\4\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4068];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\2\1\1\11\2\1\1\11\22\1\1\11"+
    "\1\1\1\11\2\0\1\11\36\1\1\0\31\1\1\11"+
    "\40\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[122];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
   
   /**   
    * Constructor.  This must be here because JFlex does not generate a   
    * no-parameter constructor.   
    */   
   public ColorDeTokens() {   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    * @see #addToken(int, int, int)   
    */   
   private void addHyperlinkToken(int start, int end, int tokenType) {   
      int so = start + offsetShift;   
      addToken(zzBuffer, start,end, tokenType, so, true);   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    */   
   private void addToken(int tokenType) {   
      addToken(zzStartRead, zzMarkedPos-1, tokenType);   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    * @see #addHyperlinkToken(int, int, int)   
    */   
   private void addToken(int start, int end, int tokenType) {   
      int so = start + offsetShift;   
      addToken(zzBuffer, start,end, tokenType, so, false);   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param array The character array.   
    * @param start The starting offset in the array.   
    * @param end The ending offset in the array.   
    * @param tokenType The token's type.   
    * @param startOffset The offset in the document at which this token   
    *        occurs.   
    * @param hyperlink Whether this token is a hyperlink.   
    */   
   public void addToken(char[] array, int start, int end, int tokenType,   
                  int startOffset, boolean hyperlink) {   
      super.addToken(array, start,end, tokenType, startOffset, hyperlink);   
      zzStartRead = zzMarkedPos;   
   }   
   
   /**   
    * Returns the text to place at the beginning and end of a   
    * line to "comment" it in a this programming language.   
    *   
    * @return The start and end strings to add to a line to "comment"   
    *         it out.   
    */   
   public String[] getLineCommentStartAndEnd() {   
      return new String[] { "//", null };   
   }   
   
   /**   
    * Returns the first token in the linked list of tokens generated   
    * from <code>text</code>.  This method must be implemented by   
    * subclasses so they can correctly implement syntax highlighting.   
    *   
    * @param text The text from which to get tokens.   
    * @param initialTokenType The token type we should start with.   
    * @param startOffset The offset into the document at which   
    *        <code>text</code> starts.   
    * @return The first <code>Token</code> in a linked list representing   
    *         the syntax highlighted text.   
    */   
   public Token getTokenList(Segment text, int initialTokenType, int startOffset) {   
   
      resetTokenList();   
      this.offsetShift = -text.offset + startOffset;   
   
      // Start off in the proper state.   
      int state = Token.NULL;   
      switch (initialTokenType) {   
         case Token.COMMENT_MULTILINE:   
            state = comentarios;   
            start = text.offset;   
            break;   
   
         /* No documentation comments */   
         default:   
            state = Token.NULL;   
      }   
   
      s = text;   
      try {   
         yyreset(zzReader);   
         yybegin(state);   
         return yylex();   
      } catch (IOException ioe) {   
         ioe.printStackTrace();   
         return new TokenImpl();   
      }   
   
   }   
   
   /**   
    * Refills the input buffer.   
    *   
    * @return      <code>true</code> if EOF was reached, otherwise   
    *              <code>false</code>.   
    */   
   private boolean zzRefill() {   
      return zzCurrentPos>=s.offset+s.count;   
   }   
   
   /**   
    * Resets the scanner to read from a new input stream.   
    * Does not close the old reader.   
    *   
    * All internal variables are reset, the old input stream    
    * <b>cannot</b> be reused (internal buffer is discarded and lost).   
    * Lexical state is set to <tt>YY_INITIAL</tt>.   
    *   
    * @param reader   the new input stream    
    */   
   public final void yyreset(Reader reader) {   
      // 's' has been updated.   
      zzBuffer = s.array;   
      /*   
       * We replaced the line below with the two below it because zzRefill   
       * no longer "refills" the buffer (since the way we do it, it's always   
       * "full" the first time through, since it points to the segment's   
       * array).  So, we assign zzEndRead here.   
       */   
      //zzStartRead = zzEndRead = s.offset;   
      zzStartRead = s.offset;   
      zzEndRead = zzStartRead + s.count - 1;   
      zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;   
      zzLexicalState = YYINITIAL;   
      zzReader = reader;   
      zzAtBOL  = true;   
      zzAtEOF  = false;   
   }   
   


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ColorDeTokens(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ColorDeTokens(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 10: 
          { start = zzMarkedPos-2; yybegin(comentarios);
          }
        case 12: break;
        case 6: 
          { addToken(Token.RESERVED_WORD);
          }
        case 13: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 14: break;
        case 11: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 15: break;
        case 9: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 16: break;
        case 4: 
          { addToken(Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 17: break;
        case 5: 
          { addToken(Token.OPERATOR);
          }
        case 18: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 19: break;
        case 8: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 20: break;
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 21: break;
        case 7: 
          { 
          }
        case 22: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case comentarios: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 123: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 124: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
