
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 11 21:11:07 CST 2020
//----------------------------------------------------

package ArbolGrafico;

import java.util.LinkedList;
import java.util.ArrayList;
import java_cup.runtime.*;
import Errores.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 11 21:11:07 CST 2020
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\004\000" +
    "\002\004\003\000\002\004\003\000\002\004\004\000\002" +
    "\004\003\000\002\021\007\000\002\022\005\000\002\016" +
    "\007\000\002\017\010\000\002\011\012\000\002\011\011" +
    "\000\002\011\011\000\002\011\010\000\002\012\003\000" +
    "\002\012\004\000\002\013\004\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\006\000\002\014" +
    "\004\000\002\014\003\000\002\015\005\000\002\015\004" +
    "\000\002\007\005\000\002\007\003\000\002\010\007\000" +
    "\002\010\011\000\002\026\005\000\002\026\011\000\002" +
    "\026\011\000\002\026\012\000\002\026\012\000\002\026" +
    "\006\000\002\026\005\000\002\026\007\000\002\026\006" +
    "\000\002\026\011\000\002\026\013\000\002\026\012\000" +
    "\002\026\014\000\002\027\006\000\002\027\007\000\002" +
    "\027\006\000\002\027\007\000\002\027\003\000\002\027" +
    "\004\000\002\005\005\000\002\005\004\000\002\024\006" +
    "\000\002\024\010\000\002\024\002\000\002\025\006\000" +
    "\002\025\010\000\002\025\006\000\002\025\007\000\002" +
    "\025\007\000\002\025\002\000\002\023\004\000\002\023" +
    "\004\000\002\023\004\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\007\000\002\023\005\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\004\000\002\023\003\000\002\006\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\024\004\020\006\006\010\004\011\014\012" +
    "\027\013\022\017\013\020\021\064\016\001\002\000\036" +
    "\002\uffe8\004\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012" +
    "\uffe8\013\uffe8\017\uffe8\020\uffe8\023\uffe8\025\uffe8\054\uffe8" +
    "\064\uffe8\001\002\000\026\002\000\004\020\006\006\010" +
    "\004\011\014\012\027\013\022\017\013\020\021\064\016" +
    "\001\002\000\004\030\276\001\002\000\004\002\275\001" +
    "\002\000\034\002\ufffe\004\ufffe\006\ufffe\007\ufffe\010\ufffe" +
    "\011\ufffe\012\ufffe\013\ufffe\017\ufffe\020\ufffe\023\ufffe\025" +
    "\ufffe\064\ufffe\001\002\000\034\002\ufff7\004\ufff7\006\ufff7" +
    "\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\017\ufff7\020" +
    "\ufff7\023\ufff7\025\ufff7\064\ufff7\001\002\000\036\002\ufff8" +
    "\004\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013" +
    "\ufff8\017\ufff8\020\ufff8\023\ufff8\025\ufff8\054\274\064\ufff8" +
    "\001\002\000\036\002\uffe9\004\uffe9\006\uffe9\007\uffe9\010" +
    "\uffe9\011\uffe9\012\uffe9\013\uffe9\017\uffe9\020\uffe9\023\uffe9" +
    "\025\uffe9\054\uffe9\064\uffe9\001\002\000\004\030\270\001" +
    "\002\000\036\002\ufff5\004\ufff5\006\ufff5\007\ufff5\010\ufff5" +
    "\011\ufff5\012\ufff5\013\ufff5\017\ufff5\020\ufff5\023\ufff5\025" +
    "\ufff5\054\267\064\ufff5\001\002\000\010\026\177\030\175" +
    "\032\176\001\002\000\034\002\ufffd\004\ufffd\006\ufffd\007" +
    "\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\017\ufffd\020\ufffd" +
    "\023\ufffd\025\ufffd\064\ufffd\001\002\000\004\030\171\001" +
    "\002\000\040\002\uffe7\004\uffe7\006\uffe7\007\uffe7\010\uffe7" +
    "\011\uffe7\012\uffe7\013\uffe7\017\uffe7\020\uffe7\023\uffe7\025" +
    "\uffe7\030\166\054\uffe7\064\uffe7\001\002\000\004\024\145" +
    "\001\002\000\034\002\ufffb\004\ufffb\006\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\012\ufffb\013\ufffb\017\ufffb\020\ufffb\023\ufffb" +
    "\025\ufffb\064\ufffb\001\002\000\034\002\ufffc\004\ufffc\006" +
    "\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\017\ufffc" +
    "\020\ufffc\023\ufffc\025\ufffc\064\ufffc\001\002\000\034\002" +
    "\ufffa\004\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa" +
    "\013\ufffa\017\ufffa\020\ufffa\023\ufffa\025\ufffa\064\ufffa\001" +
    "\002\000\036\002\uffe0\004\uffe0\005\152\006\uffe0\007\uffe0" +
    "\010\uffe0\011\uffe0\012\uffe0\013\uffe0\017\uffe0\020\uffe0\023" +
    "\uffe0\025\uffe0\064\uffe0\001\002\000\004\030\030\001\002" +
    "\000\004\064\032\001\002\000\004\031\143\001\002\000" +
    "\004\016\033\001\002\000\032\014\034\015\037\022\043" +
    "\023\041\030\046\033\042\034\036\052\040\061\044\062" +
    "\050\063\047\064\035\001\002\000\104\002\uffa8\004\uffa8" +
    "\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8\017" +
    "\uffa8\020\uffa8\023\uffa8\025\uffa8\027\uffa8\031\uffa8\033\uffa8" +
    "\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042" +
    "\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8" +
    "\051\uffa8\053\uffa8\054\uffa8\055\uffa8\064\uffa8\001\002\000" +
    "\112\002\uffc0\004\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0" +
    "\012\uffc0\013\uffc0\017\uffc0\020\uffc0\023\uffc0\025\uffc0\026" +
    "\uffc0\027\uffc0\030\uffc0\031\uffc0\032\121\033\uffc0\034\uffc0" +
    "\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043" +
    "\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0" +
    "\053\uffc0\054\uffc0\055\uffc0\064\uffc0\001\002\000\032\014" +
    "\034\015\037\022\043\023\041\030\046\033\042\034\036" +
    "\052\040\061\044\062\050\063\047\064\035\001\002\000" +
    "\104\002\uffa7\004\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7" +
    "\012\uffa7\013\uffa7\017\uffa7\020\uffa7\023\uffa7\025\uffa7\027" +
    "\uffa7\031\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7" +
    "\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046" +
    "\uffa7\047\uffa7\050\uffa7\051\uffa7\053\uffa7\054\uffa7\055\uffa7" +
    "\064\uffa7\001\002\000\032\014\034\015\037\022\043\023" +
    "\041\030\046\033\042\034\036\052\040\061\044\062\050" +
    "\063\047\064\035\001\002\000\104\002\uffa5\004\uffa5\006" +
    "\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5\017\uffa5" +
    "\020\uffa5\023\uffa5\025\uffa5\027\uffa5\031\uffa5\033\uffa5\034" +
    "\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5" +
    "\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051" +
    "\uffa5\053\uffa5\054\uffa5\055\uffa5\064\uffa5\001\002\000\032" +
    "\014\034\015\037\022\043\023\041\030\046\033\042\034" +
    "\036\052\040\061\044\062\050\063\047\064\035\001\002" +
    "\000\104\002\uffa6\004\uffa6\006\uffa6\007\uffa6\010\uffa6\011" +
    "\uffa6\012\uffa6\013\uffa6\017\uffa6\020\uffa6\023\uffa6\025\uffa6" +
    "\027\uffa6\031\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037" +
    "\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6" +
    "\046\uffa6\047\uffa6\050\uffa6\051\uffa6\053\uffa6\054\uffa6\055" +
    "\uffa6\064\uffa6\001\002\000\104\002\uffa9\004\uffa9\006\uffa9" +
    "\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\017\uffa9\020" +
    "\uffa9\023\uffa9\025\uffa9\027\uffa9\031\uffa9\033\uffa9\034\uffa9" +
    "\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043" +
    "\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9" +
    "\053\uffa9\054\uffa9\055\uffa9\064\uffa9\001\002\000\104\002" +
    "\uffa3\004\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3" +
    "\013\uffa3\017\uffa3\020\uffa3\023\uffa3\025\uffa3\027\uffa3\031" +
    "\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3" +
    "\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047" +
    "\uffa3\050\uffa3\051\uffa3\053\uffa3\054\uffa3\055\uffa3\064\uffa3" +
    "\001\002\000\032\014\034\015\037\022\043\023\041\030" +
    "\046\033\042\034\036\052\040\061\044\062\050\063\047" +
    "\064\035\001\002\000\104\002\uffaa\004\uffaa\006\uffaa\007" +
    "\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\017\uffaa\020\uffaa" +
    "\023\uffaa\025\uffaa\027\uffaa\031\uffaa\033\uffaa\034\uffaa\035" +
    "\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa" +
    "\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\053" +
    "\uffaa\054\uffaa\055\uffaa\064\uffaa\001\002\000\104\002\uffab" +
    "\004\uffab\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013" +
    "\uffab\017\uffab\020\uffab\023\uffab\025\uffab\027\uffab\031\uffab" +
    "\033\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041" +
    "\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab" +
    "\050\uffab\051\uffab\053\uffab\054\uffab\055\uffab\064\uffab\001" +
    "\002\000\044\031\ufff3\033\055\034\054\035\067\036\062" +
    "\037\052\040\065\041\071\042\060\043\070\044\066\045" +
    "\061\046\063\047\064\050\057\051\056\055\053\001\002" +
    "\000\032\014\034\015\037\022\043\023\041\030\046\033" +
    "\042\034\036\052\040\061\044\062\050\063\047\064\035" +
    "\001\002\000\032\014\034\015\037\022\043\023\041\030" +
    "\046\033\042\034\036\052\040\061\044\062\050\063\047" +
    "\064\035\001\002\000\032\014\034\015\037\022\043\023" +
    "\041\030\046\033\042\034\036\052\040\061\044\062\050" +
    "\063\047\064\035\001\002\000\032\014\034\015\037\022" +
    "\043\023\041\030\046\033\042\034\036\052\040\061\044" +
    "\062\050\063\047\064\035\001\002\000\032\014\034\015" +
    "\037\022\043\023\041\030\046\033\042\034\036\052\040" +
    "\061\044\062\050\063\047\064\035\001\002\000\032\014" +
    "\034\015\037\022\043\023\041\030\046\033\042\034\036" +
    "\052\040\061\044\062\050\063\047\064\035\001\002\000" +
    "\032\014\034\015\037\022\043\023\041\030\046\033\042" +
    "\034\036\052\040\061\044\062\050\063\047\064\035\001" +
    "\002\000\032\014\034\015\037\022\043\023\041\030\046" +
    "\033\042\034\036\052\040\061\044\062\050\063\047\064" +
    "\035\001\002\000\032\014\034\015\037\022\043\023\041" +
    "\030\046\033\042\034\036\052\040\061\044\062\050\063" +
    "\047\064\035\001\002\000\032\014\034\015\037\022\043" +
    "\023\041\030\046\033\042\034\036\052\040\061\044\062" +
    "\050\063\047\064\035\001\002\000\032\014\034\015\037" +
    "\022\043\023\041\030\046\033\042\034\036\052\040\061" +
    "\044\062\050\063\047\064\035\001\002\000\032\014\034" +
    "\015\037\022\043\023\041\030\046\033\042\034\036\052" +
    "\040\061\044\062\050\063\047\064\035\001\002\000\032" +
    "\014\034\015\037\022\043\023\041\030\046\033\042\034" +
    "\036\052\040\061\044\062\050\063\047\064\035\001\002" +
    "\000\032\014\034\015\037\022\043\023\041\030\046\033" +
    "\042\034\036\052\040\061\044\062\050\063\047\064\035" +
    "\001\002\000\032\014\034\015\037\022\043\023\041\030" +
    "\046\033\042\034\036\052\040\061\044\062\050\063\047" +
    "\064\035\001\002\000\032\014\034\015\037\022\043\023" +
    "\041\030\046\033\042\034\036\052\040\061\044\062\050" +
    "\063\047\064\035\001\002\000\104\002\uffb3\004\uffb3\006" +
    "\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3\017\uffb3" +
    "\020\uffb3\023\uffb3\025\uffb3\027\uffb3\031\uffb3\033\055\034" +
    "\054\035\067\036\062\037\052\040\065\041\uffb3\042\uffb3" +
    "\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051" +
    "\uffb3\053\uffb3\054\uffb3\055\uffb3\064\uffb3\001\002\000\104" +
    "\002\uffb1\004\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012" +
    "\uffb1\013\uffb1\017\uffb1\020\uffb1\023\uffb1\025\uffb1\027\uffb1" +
    "\031\uffb1\033\055\034\054\035\067\036\062\037\052\040" +
    "\065\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1" +
    "\047\uffb1\050\uffb1\051\uffb1\053\uffb1\054\uffb1\055\uffb1\064" +
    "\uffb1\001\002\000\104\002\uffb7\004\uffb7\006\uffb7\007\uffb7" +
    "\010\uffb7\011\uffb7\012\uffb7\013\uffb7\017\uffb7\020\uffb7\023" +
    "\uffb7\025\uffb7\027\uffb7\031\uffb7\033\uffb7\034\uffb7\035\uffb7" +
    "\036\uffb7\037\052\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044" +
    "\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\053\uffb7" +
    "\054\uffb7\055\uffb7\064\uffb7\001\002\000\104\002\uffb0\004" +
    "\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0" +
    "\017\uffb0\020\uffb0\023\uffb0\025\uffb0\027\uffb0\031\uffb0\033" +
    "\055\034\054\035\067\036\062\037\052\040\065\041\uffb0" +
    "\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050" +
    "\uffb0\051\uffb0\053\uffb0\054\uffb0\055\uffb0\064\uffb0\001\002" +
    "\000\104\002\uffb4\004\uffb4\006\uffb4\007\uffb4\010\uffb4\011" +
    "\uffb4\012\uffb4\013\uffb4\017\uffb4\020\uffb4\023\uffb4\025\uffb4" +
    "\027\uffb4\031\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037" +
    "\052\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4" +
    "\046\uffb4\047\uffb4\050\uffb4\051\uffb4\053\uffb4\054\uffb4\055" +
    "\uffb4\064\uffb4\001\002\000\044\033\055\034\054\035\067" +
    "\036\062\037\052\040\065\041\071\042\060\043\070\044" +
    "\066\045\061\046\063\047\064\050\057\051\056\053\100" +
    "\055\053\001\002\000\032\014\034\015\037\022\043\023" +
    "\041\030\046\033\042\034\036\052\040\061\044\062\050" +
    "\063\047\064\035\001\002\000\104\002\uffad\004\uffad\006" +
    "\uffad\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad\017\uffad" +
    "\020\uffad\023\uffad\025\uffad\027\uffad\031\uffad\033\055\034" +
    "\054\035\067\036\062\037\052\040\065\041\071\042\060" +
    "\043\070\044\066\045\061\046\063\047\064\050\057\051" +
    "\056\053\uffad\054\uffad\055\uffad\064\uffad\001\002\000\104" +
    "\002\uffae\004\uffae\006\uffae\007\uffae\010\uffae\011\uffae\012" +
    "\uffae\013\uffae\017\uffae\020\uffae\023\uffae\025\uffae\027\uffae" +
    "\031\uffae\033\055\034\054\035\067\036\062\037\052\040" +
    "\065\041\071\042\060\043\070\044\066\045\uffae\046\uffae" +
    "\047\uffae\050\uffae\051\uffae\053\uffae\054\uffae\055\uffae\064" +
    "\uffae\001\002\000\104\002\uffb6\004\uffb6\006\uffb6\007\uffb6" +
    "\010\uffb6\011\uffb6\012\uffb6\013\uffb6\017\uffb6\020\uffb6\023" +
    "\uffb6\025\uffb6\027\uffb6\031\uffb6\033\uffb6\034\uffb6\035\uffb6" +
    "\036\uffb6\037\052\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044" +
    "\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\053\uffb6" +
    "\054\uffb6\055\uffb6\064\uffb6\001\002\000\104\002\uffaf\004" +
    "\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf" +
    "\017\uffaf\020\uffaf\023\uffaf\025\uffaf\027\uffaf\031\uffaf\033" +
    "\055\034\054\035\067\036\062\037\052\040\065\041\071" +
    "\042\060\043\070\044\066\045\uffaf\046\uffaf\047\uffaf\050" +
    "\uffaf\051\uffaf\053\uffaf\054\uffaf\055\uffaf\064\uffaf\001\002" +
    "\000\104\002\uffb2\004\uffb2\006\uffb2\007\uffb2\010\uffb2\011" +
    "\uffb2\012\uffb2\013\uffb2\017\uffb2\020\uffb2\023\uffb2\025\uffb2" +
    "\027\uffb2\031\uffb2\033\055\034\054\035\067\036\062\037" +
    "\052\040\065\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2" +
    "\046\uffb2\047\uffb2\050\uffb2\051\uffb2\053\uffb2\054\uffb2\055" +
    "\uffb2\064\uffb2\001\002\000\104\002\uffba\004\uffba\006\uffba" +
    "\007\uffba\010\uffba\011\uffba\012\uffba\013\uffba\017\uffba\020" +
    "\uffba\023\uffba\025\uffba\027\uffba\031\uffba\033\055\034\054" +
    "\035\067\036\062\037\052\040\065\041\071\042\060\043" +
    "\070\044\066\045\061\046\063\047\uffba\050\uffba\051\uffba" +
    "\053\uffba\054\uffba\055\uffba\064\uffba\001\002\000\104\002" +
    "\uffbb\004\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb" +
    "\013\uffbb\017\uffbb\020\uffbb\023\uffbb\025\uffbb\027\uffbb\031" +
    "\uffbb\033\055\034\054\035\067\036\062\037\052\040\065" +
    "\041\071\042\060\043\070\044\066\045\061\046\063\047" +
    "\uffbb\050\057\051\uffbb\053\uffbb\054\uffbb\055\uffbb\064\uffbb" +
    "\001\002\000\104\002\uffb9\004\uffb9\006\uffb9\007\uffb9\010" +
    "\uffb9\011\uffb9\012\uffb9\013\uffb9\017\uffb9\020\uffb9\023\uffb9" +
    "\025\uffb9\027\uffb9\031\uffb9\033\uffb9\034\uffb9\035\067\036" +
    "\062\037\052\040\065\041\uffb9\042\uffb9\043\uffb9\044\uffb9" +
    "\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\053\uffb9\054" +
    "\uffb9\055\uffb9\064\uffb9\001\002\000\104\002\uffb8\004\uffb8" +
    "\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\017" +
    "\uffb8\020\uffb8\023\uffb8\025\uffb8\027\uffb8\031\uffb8\033\uffb8" +
    "\034\uffb8\035\067\036\062\037\052\040\065\041\uffb8\042" +
    "\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8" +
    "\051\uffb8\053\uffb8\054\uffb8\055\uffb8\064\uffb8\001\002\000" +
    "\104\002\uffbc\004\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc" +
    "\012\uffbc\013\uffbc\017\uffbc\020\uffbc\023\uffbc\025\uffbc\027" +
    "\uffbc\031\uffbc\033\055\034\054\035\067\036\062\037\052" +
    "\040\065\041\071\042\060\043\070\044\066\045\061\046" +
    "\063\047\064\050\057\051\056\053\uffbc\054\uffbc\055\uffbc" +
    "\064\uffbc\001\002\000\104\002\uffb5\004\uffb5\006\uffb5\007" +
    "\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\017\uffb5\020\uffb5" +
    "\023\uffb5\025\uffb5\027\uffb5\031\uffb5\033\uffb5\034\uffb5\035" +
    "\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5" +
    "\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\053" +
    "\uffb5\054\uffb5\055\uffb5\064\uffb5\001\002\000\044\031\115" +
    "\033\055\034\054\035\067\036\062\037\052\040\065\041" +
    "\071\042\060\043\070\044\066\045\061\046\063\047\064" +
    "\050\057\051\056\055\053\001\002\000\104\002\uffac\004" +
    "\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac" +
    "\017\uffac\020\uffac\023\uffac\025\uffac\027\uffac\031\uffac\033" +
    "\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac" +
    "\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050" +
    "\uffac\051\uffac\053\uffac\054\uffac\055\uffac\064\uffac\001\002" +
    "\000\104\002\uffbe\004\uffbe\006\uffbe\007\uffbe\010\uffbe\011" +
    "\uffbe\012\uffbe\013\uffbe\017\uffbe\020\uffbe\023\uffbe\025\uffbe" +
    "\027\uffbe\031\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037" +
    "\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe" +
    "\046\uffbe\047\uffbe\050\uffbe\051\uffbe\053\uffbe\054\uffbe\055" +
    "\uffbe\064\uffbe\001\002\000\104\002\uffbd\004\uffbd\006\uffbd" +
    "\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\017\uffbd\020" +
    "\uffbd\023\uffbd\025\uffbd\027\uffbd\031\uffbd\033\uffbd\034\uffbd" +
    "\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043" +
    "\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd" +
    "\053\uffbd\054\uffbd\055\uffbd\064\uffbd\001\002\000\104\002" +
    "\uffbf\004\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf" +
    "\013\uffbf\017\uffbf\020\uffbf\023\uffbf\025\uffbf\027\uffbf\031" +
    "\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf" +
    "\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047" +
    "\uffbf\050\uffbf\051\uffbf\053\uffbf\054\uffbf\055\uffbf\064\uffbf" +
    "\001\002\000\032\014\034\015\037\022\043\023\041\030" +
    "\046\033\042\034\036\052\040\061\044\062\050\063\047" +
    "\064\035\001\002\000\110\002\uffa4\004\uffa4\006\uffa4\007" +
    "\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\017\uffa4\020\uffa4" +
    "\023\uffa4\025\uffa4\026\124\027\uffa4\030\123\031\uffa4\033" +
    "\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4" +
    "\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050" +
    "\uffa4\051\uffa4\053\uffa4\054\uffa4\055\uffa4\064\uffa4\001\002" +
    "\000\032\014\034\015\037\022\043\023\041\030\046\033" +
    "\042\034\036\052\040\061\044\062\050\063\047\064\035" +
    "\001\002\000\036\014\034\015\037\022\043\023\041\026" +
    "\126\030\046\033\042\034\036\052\040\055\125\061\044" +
    "\062\050\063\047\064\035\001\002\000\032\014\034\015" +
    "\037\022\043\023\041\030\046\033\042\034\036\052\040" +
    "\061\044\062\050\063\047\064\035\001\002\000\032\014" +
    "\034\015\037\022\043\023\041\030\046\033\042\034\036" +
    "\052\040\061\044\062\050\063\047\064\035\001\002\000" +
    "\044\027\131\033\055\034\054\035\067\036\062\037\052" +
    "\040\065\041\071\042\060\043\070\044\066\045\061\046" +
    "\063\047\064\050\057\051\056\055\130\001\002\000\034" +
    "\014\034\015\037\022\043\023\041\027\132\030\046\033" +
    "\042\034\036\052\040\061\044\062\050\063\047\064\035" +
    "\001\002\000\110\002\uffc5\004\uffc5\006\uffc5\007\uffc5\010" +
    "\uffc5\011\uffc5\012\uffc5\013\uffc5\017\uffc5\020\uffc5\023\uffc5" +
    "\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\033\uffc5\034" +
    "\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5" +
    "\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051" +
    "\uffc5\053\uffc5\054\uffc5\055\uffc5\064\uffc5\001\002\000\110" +
    "\002\uffc2\004\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012" +
    "\uffc2\013\uffc2\017\uffc2\020\uffc2\023\uffc2\025\uffc2\026\uffc2" +
    "\027\uffc2\030\uffc2\031\uffc2\033\uffc2\034\uffc2\035\uffc2\036" +
    "\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2" +
    "\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\053\uffc2\054" +
    "\uffc2\055\uffc2\064\uffc2\001\002\000\044\027\134\033\055" +
    "\034\054\035\067\036\062\037\052\040\065\041\071\042" +
    "\060\043\070\044\066\045\061\046\063\047\064\050\057" +
    "\051\056\055\053\001\002\000\004\027\135\001\002\000" +
    "\110\002\uffc4\004\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4" +
    "\012\uffc4\013\uffc4\017\uffc4\020\uffc4\023\uffc4\025\uffc4\026" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\033\uffc4\034\uffc4\035\uffc4" +
    "\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044" +
    "\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\053\uffc4" +
    "\054\uffc4\055\uffc4\064\uffc4\001\002\000\044\027\137\033" +
    "\055\034\054\035\067\036\062\037\052\040\065\041\071" +
    "\042\060\043\070\044\066\045\061\046\063\047\064\050" +
    "\057\051\056\055\053\001\002\000\110\002\uffc1\004\uffc1" +
    "\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\017" +
    "\uffc1\020\uffc1\023\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1" +
    "\031\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040" +
    "\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1" +
    "\047\uffc1\050\uffc1\051\uffc1\053\uffc1\054\uffc1\055\uffc1\064" +
    "\uffc1\001\002\000\044\031\141\033\055\034\054\035\067" +
    "\036\062\037\052\040\065\041\071\042\060\043\070\044" +
    "\066\045\061\046\063\047\064\050\057\051\056\055\053" +
    "\001\002\000\110\002\uffc3\004\uffc3\006\uffc3\007\uffc3\010" +
    "\uffc3\011\uffc3\012\uffc3\013\uffc3\017\uffc3\020\uffc3\023\uffc3" +
    "\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\033\uffc3\034" +
    "\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3" +
    "\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051" +
    "\uffc3\053\uffc3\054\uffc3\055\uffc3\064\uffc3\001\002\000\104" +
    "\002\uffa2\004\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012" +
    "\uffa2\013\uffa2\017\uffa2\020\uffa2\023\uffa2\025\uffa2\027\uffa2" +
    "\031\uffa2\033\055\034\054\035\067\036\062\037\052\040" +
    "\065\041\071\042\060\043\070\044\066\045\061\046\063" +
    "\047\064\050\057\051\056\053\uffa2\054\uffa2\055\053\064" +
    "\uffa2\001\002\000\004\024\145\001\002\000\034\002\ufff4" +
    "\004\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013" +
    "\ufff4\017\ufff4\020\ufff4\023\ufff4\025\ufff4\064\ufff4\001\002" +
    "\000\026\004\020\006\006\010\004\011\014\012\027\013" +
    "\022\017\013\020\021\025\147\064\016\001\002\000\026" +
    "\004\020\006\006\010\004\011\014\012\027\013\022\017" +
    "\013\020\021\025\151\064\016\001\002\000\036\002\uffc9" +
    "\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012" +
    "\uffc9\013\uffc9\017\uffc9\020\uffc9\023\uffc9\025\uffc9\064\uffc9" +
    "\001\002\000\034\002\uffff\004\uffff\006\uffff\007\uffff\010" +
    "\uffff\011\uffff\012\uffff\013\uffff\017\uffff\020\uffff\023\uffff" +
    "\025\uffff\064\uffff\001\002\000\036\002\uffca\004\uffca\005" +
    "\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca" +
    "\017\uffca\020\uffca\023\uffca\025\uffca\064\uffca\001\002\000" +
    "\006\004\153\024\145\001\002\000\004\030\155\001\002" +
    "\000\034\002\uffe1\004\uffe1\006\uffe1\007\uffe1\010\uffe1\011" +
    "\uffe1\012\uffe1\013\uffe1\017\uffe1\020\uffe1\023\uffe1\025\uffe1" +
    "\064\uffe1\001\002\000\032\014\034\015\037\022\043\023" +
    "\041\030\046\033\042\034\036\052\040\061\044\062\050" +
    "\063\047\064\035\001\002\000\044\031\157\033\055\034" +
    "\054\035\067\036\062\037\052\040\065\041\071\042\060" +
    "\043\070\044\066\045\061\046\063\047\064\050\057\051" +
    "\056\055\053\001\002\000\004\024\145\001\002\000\036" +
    "\002\uffde\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\011" +
    "\uffde\012\uffde\013\uffde\017\uffde\020\uffde\023\uffde\025\uffde" +
    "\064\uffde\001\002\000\004\011\162\001\002\000\004\030" +
    "\163\001\002\000\032\014\034\015\037\022\043\023\041" +
    "\030\046\033\042\034\036\052\040\061\044\062\050\063" +
    "\047\064\035\001\002\000\044\031\165\033\055\034\054" +
    "\035\067\036\062\037\052\040\065\041\071\042\060\043" +
    "\070\044\066\045\061\046\063\047\064\050\057\051\056" +
    "\055\053\001\002\000\036\002\ufff1\004\ufff1\006\ufff1\007" +
    "\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\017\ufff1\020\ufff1" +
    "\023\ufff1\025\ufff1\054\ufff1\064\ufff1\001\002\000\032\014" +
    "\034\015\037\022\043\023\041\030\046\033\042\034\036" +
    "\052\040\061\044\062\050\063\047\064\035\001\002\000" +
    "\044\031\170\033\055\034\054\035\067\036\062\037\052" +
    "\040\065\041\071\042\060\043\070\044\066\045\061\046" +
    "\063\047\064\050\057\051\056\055\053\001\002\000\036" +
    "\002\uffe6\004\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012" +
    "\uffe6\013\uffe6\017\uffe6\020\uffe6\023\uffe6\025\uffe6\054\uffe6" +
    "\064\uffe6\001\002\000\032\014\034\015\037\022\043\023" +
    "\041\030\046\033\042\034\036\052\040\061\044\062\050" +
    "\063\047\064\035\001\002\000\044\031\173\033\055\034" +
    "\054\035\067\036\062\037\052\040\065\041\071\042\060" +
    "\043\070\044\066\045\061\046\063\047\064\050\057\051" +
    "\056\055\053\001\002\000\004\024\145\001\002\000\036" +
    "\002\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011" +
    "\uffdf\012\uffdf\013\uffdf\017\uffdf\020\uffdf\023\uffdf\025\uffdf" +
    "\064\uffdf\001\002\000\034\014\034\015\037\022\043\023" +
    "\041\030\046\031\262\033\042\034\036\052\040\061\044" +
    "\062\050\063\047\064\035\001\002\000\034\014\034\015" +
    "\037\021\242\022\043\023\041\030\241\033\042\034\036" +
    "\052\040\061\044\062\050\063\047\064\035\001\002\000" +
    "\036\014\034\015\037\022\043\023\041\026\201\030\046" +
    "\033\042\034\036\052\040\055\200\061\044\062\050\063" +
    "\047\064\035\001\002\000\032\014\034\015\037\022\043" +
    "\023\041\030\046\033\042\034\036\052\040\061\044\062" +
    "\050\063\047\064\035\001\002\000\032\014\034\015\037" +
    "\022\043\023\041\030\046\033\042\034\036\052\040\061" +
    "\044\062\050\063\047\064\035\001\002\000\044\027\204" +
    "\033\055\034\054\035\067\036\062\037\052\040\065\041" +
    "\071\042\060\043\070\044\066\045\061\046\063\047\064" +
    "\050\057\051\056\055\203\001\002\000\034\014\034\015" +
    "\037\022\043\023\041\027\220\030\046\033\042\034\036" +
    "\052\040\061\044\062\050\063\047\064\035\001\002\000" +
    "\006\026\uffc6\032\uffc6\001\002\000\006\026\207\032\206" +
    "\001\002\000\032\014\034\015\037\022\043\023\041\030" +
    "\046\033\042\034\036\052\040\061\044\062\050\063\047" +
    "\064\035\001\002\000\034\014\034\015\037\022\043\023" +
    "\041\026\210\030\046\033\042\034\036\052\040\061\044" +
    "\062\050\063\047\064\035\001\002\000\032\014\034\015" +
    "\037\022\043\023\041\030\046\033\042\034\036\052\040" +
    "\061\044\062\050\063\047\064\035\001\002\000\044\027" +
    "\212\033\055\034\054\035\067\036\062\037\052\040\065" +
    "\041\071\042\060\043\070\044\066\045\061\046\063\047" +
    "\064\050\057\051\056\055\053\001\002\000\006\026\uffc8" +
    "\032\uffc8\001\002\000\044\027\214\033\055\034\054\035" +
    "\067\036\062\037\052\040\065\041\071\042\060\043\070" +
    "\044\066\045\061\046\063\047\064\050\057\051\056\055" +
    "\053\001\002\000\004\027\215\001\002\000\006\026\uffc7" +
    "\032\uffc7\001\002\000\076\002\uffd4\004\uffd4\006\uffd4\007" +
    "\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\017\uffd4\020\uffd4" +
    "\023\uffd4\025\uffd4\033\055\034\054\035\067\036\062\037" +
    "\052\040\065\041\071\042\060\043\070\044\066\045\061" +
    "\046\063\047\064\050\057\051\056\054\217\055\053\064" +
    "\uffd4\001\002\000\034\002\uffd2\004\uffd2\006\uffd2\007\uffd2" +
    "\010\uffd2\011\uffd2\012\uffd2\013\uffd2\017\uffd2\020\uffd2\023" +
    "\uffd2\025\uffd2\064\uffd2\001\002\000\004\032\221\001\002" +
    "\000\032\014\034\015\037\022\043\023\041\030\046\033" +
    "\042\034\036\052\040\061\044\062\050\063\047\064\035" +
    "\001\002\000\076\002\uffdc\004\uffdc\006\uffdc\007\uffdc\010" +
    "\uffdc\011\uffdc\012\uffdc\013\uffdc\017\uffdc\020\uffdc\023\uffdc" +
    "\025\uffdc\033\055\034\054\035\067\036\062\037\052\040" +
    "\065\041\071\042\060\043\070\044\066\045\061\046\063" +
    "\047\064\050\057\051\056\054\223\055\053\064\uffdc\001" +
    "\002\000\034\002\uffda\004\uffda\006\uffda\007\uffda\010\uffda" +
    "\011\uffda\012\uffda\013\uffda\017\uffda\020\uffda\023\uffda\025" +
    "\uffda\064\uffda\001\002\000\044\027\225\033\055\034\054" +
    "\035\067\036\062\037\052\040\065\041\071\042\060\043" +
    "\070\044\066\045\061\046\063\047\064\050\057\051\056" +
    "\055\053\001\002\000\004\027\226\001\002\000\006\026" +
    "\uffc6\032\uffc6\001\002\000\006\026\207\032\230\001\002" +
    "\000\032\014\034\015\037\022\043\023\041\030\046\033" +
    "\042\034\036\052\040\061\044\062\050\063\047\064\035" +
    "\001\002\000\076\002\uffd3\004\uffd3\006\uffd3\007\uffd3\010" +
    "\uffd3\011\uffd3\012\uffd3\013\uffd3\017\uffd3\020\uffd3\023\uffd3" +
    "\025\uffd3\033\055\034\054\035\067\036\062\037\052\040" +
    "\065\041\071\042\060\043\070\044\066\045\061\046\063" +
    "\047\064\050\057\051\056\054\232\055\053\064\uffd3\001" +
    "\002\000\034\002\uffd1\004\uffd1\006\uffd1\007\uffd1\010\uffd1" +
    "\011\uffd1\012\uffd1\013\uffd1\017\uffd1\020\uffd1\023\uffd1\025" +
    "\uffd1\064\uffd1\001\002\000\044\027\234\033\055\034\054" +
    "\035\067\036\062\037\052\040\065\041\071\042\060\043" +
    "\070\044\066\045\061\046\063\047\064\050\057\051\056" +
    "\055\053\001\002\000\004\032\235\001\002\000\032\014" +
    "\034\015\037\022\043\023\041\030\046\033\042\034\036" +
    "\052\040\061\044\062\050\063\047\064\035\001\002\000" +
    "\076\002\uffdb\004\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb" +
    "\012\uffdb\013\uffdb\017\uffdb\020\uffdb\023\uffdb\025\uffdb\033" +
    "\055\034\054\035\067\036\062\037\052\040\065\041\071" +
    "\042\060\043\070\044\066\045\061\046\063\047\064\050" +
    "\057\051\056\054\237\055\053\064\uffdb\001\002\000\034" +
    "\002\uffd9\004\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012" +
    "\uffd9\013\uffd9\017\uffd9\020\uffd9\023\uffd9\025\uffd9\064\uffd9" +
    "\001\002\000\034\002\uffdd\004\uffdd\006\uffdd\007\uffdd\010" +
    "\uffdd\011\uffdd\012\uffdd\013\uffdd\017\uffdd\020\uffdd\023\uffdd" +
    "\025\uffdd\064\uffdd\001\002\000\034\014\034\015\037\022" +
    "\043\023\041\030\046\031\253\033\042\034\036\052\040" +
    "\061\044\062\050\063\047\064\035\001\002\000\004\030" +
    "\245\001\002\000\076\002\uffcc\004\uffcc\006\uffcc\007\uffcc" +
    "\010\uffcc\011\uffcc\012\uffcc\013\uffcc\017\uffcc\020\uffcc\023" +
    "\uffcc\025\uffcc\033\055\034\054\035\067\036\062\037\052" +
    "\040\065\041\071\042\060\043\070\044\066\045\061\046" +
    "\063\047\064\050\057\051\056\054\244\055\053\064\uffcc" +
    "\001\002\000\034\002\uffcb\004\uffcb\006\uffcb\007\uffcb\010" +
    "\uffcb\011\uffcb\012\uffcb\013\uffcb\017\uffcb\020\uffcb\023\uffcb" +
    "\025\uffcb\064\uffcb\001\002\000\034\014\034\015\037\022" +
    "\043\023\041\030\046\031\246\033\042\034\036\052\040" +
    "\061\044\062\050\063\047\064\035\001\002\000\004\024" +
    "\145\001\002\000\044\031\250\033\055\034\054\035\067" +
    "\036\062\037\052\040\065\041\071\042\060\043\070\044" +
    "\066\045\061\046\063\047\064\050\057\051\056\055\053" +
    "\001\002\000\004\024\145\001\002\000\034\002\uffcf\004" +
    "\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf" +
    "\017\uffcf\020\uffcf\023\uffcf\025\uffcf\064\uffcf\001\002\000" +
    "\034\002\uffd0\004\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0" +
    "\012\uffd0\013\uffd0\017\uffd0\020\uffd0\023\uffd0\025\uffd0\064" +
    "\uffd0\001\002\000\004\056\260\001\002\000\044\031\255" +
    "\033\055\034\054\035\067\036\062\037\052\040\065\041" +
    "\071\042\060\043\070\044\066\045\061\046\063\047\064" +
    "\050\057\051\056\055\053\001\002\000\100\002\uffac\004" +
    "\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac" +
    "\017\uffac\020\uffac\023\uffac\025\uffac\033\uffac\034\uffac\035" +
    "\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac" +
    "\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051\uffac\054" +
    "\uffac\055\uffac\056\256\064\uffac\001\002\000\004\024\145" +
    "\001\002\000\034\002\uffcd\004\uffcd\006\uffcd\007\uffcd\010" +
    "\uffcd\011\uffcd\012\uffcd\013\uffcd\017\uffcd\020\uffcd\023\uffcd" +
    "\025\uffcd\064\uffcd\001\002\000\004\024\145\001\002\000" +
    "\034\002\uffce\004\uffce\006\uffce\007\uffce\010\uffce\011\uffce" +
    "\012\uffce\013\uffce\017\uffce\020\uffce\023\uffce\025\uffce\064" +
    "\uffce\001\002\000\036\002\uffd7\004\uffd7\006\uffd7\007\uffd7" +
    "\010\uffd7\011\uffd7\012\uffd7\013\uffd7\017\uffd7\020\uffd7\023" +
    "\uffd7\025\uffd7\054\266\064\uffd7\001\002\000\044\031\264" +
    "\033\055\034\054\035\067\036\062\037\052\040\065\041" +
    "\071\042\060\043\070\044\066\045\061\046\063\047\064" +
    "\050\057\051\056\055\053\001\002\000\036\002\uffd8\004" +
    "\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8" +
    "\017\uffd8\020\uffd8\023\uffd8\025\uffd8\054\265\064\uffd8\001" +
    "\002\000\034\002\uffd6\004\uffd6\006\uffd6\007\uffd6\010\uffd6" +
    "\011\uffd6\012\uffd6\013\uffd6\017\uffd6\020\uffd6\023\uffd6\025" +
    "\uffd6\064\uffd6\001\002\000\034\002\uffd5\004\uffd5\006\uffd5" +
    "\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\017\uffd5\020" +
    "\uffd5\023\uffd5\025\uffd5\064\uffd5\001\002\000\034\002\ufff6" +
    "\004\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013" +
    "\ufff6\017\ufff6\020\ufff6\023\ufff6\025\ufff6\064\ufff6\001\002" +
    "\000\032\014\034\015\037\022\043\023\041\030\046\033" +
    "\042\034\036\052\040\061\044\062\050\063\047\064\035" +
    "\001\002\000\044\031\272\033\055\034\054\035\067\036" +
    "\062\037\052\040\065\041\071\042\060\043\070\044\066" +
    "\045\061\046\063\047\064\050\057\051\056\055\053\001" +
    "\002\000\004\024\145\001\002\000\034\002\ufff2\004\ufff2" +
    "\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\017" +
    "\ufff2\020\ufff2\023\ufff2\025\ufff2\064\ufff2\001\002\000\034" +
    "\002\ufff9\004\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012" +
    "\ufff9\013\ufff9\017\ufff9\020\ufff9\023\ufff9\025\ufff9\064\ufff9" +
    "\001\002\000\004\002\001\001\002\000\032\014\034\015" +
    "\037\022\043\023\041\030\046\033\042\034\036\052\040" +
    "\061\044\062\050\063\047\064\035\001\002\000\044\031" +
    "\300\033\055\034\054\035\067\036\062\037\052\040\065" +
    "\041\071\042\060\043\070\044\066\045\061\046\063\047" +
    "\064\050\057\051\056\055\053\001\002\000\004\024\301" +
    "\001\002\000\010\007\310\023\307\025\306\001\002\000" +
    "\032\004\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4" +
    "\013\uffe4\017\uffe4\020\uffe4\023\uffe4\025\uffe4\064\uffe4\001" +
    "\002\000\010\007\uffec\023\uffec\025\uffec\001\002\000\032" +
    "\004\020\006\006\007\310\010\004\011\014\012\027\013" +
    "\022\017\013\020\021\023\307\025\322\064\016\001\002" +
    "\000\010\007\310\023\307\025\316\001\002\000\034\002" +
    "\uffed\004\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed" +
    "\013\uffed\017\uffed\020\uffed\023\uffed\025\uffed\064\uffed\001" +
    "\002\000\004\053\313\001\002\000\032\014\034\015\037" +
    "\022\043\023\041\030\046\033\042\034\036\052\040\061" +
    "\044\062\050\063\047\064\035\001\002\000\044\033\055" +
    "\034\054\035\067\036\062\037\052\040\065\041\071\042" +
    "\060\043\070\044\066\045\061\046\063\047\064\050\057" +
    "\051\056\053\312\055\053\001\002\000\032\004\uffe3\006" +
    "\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\017\uffe3" +
    "\020\uffe3\023\uffe3\025\uffe3\064\uffe3\001\002\000\032\004" +
    "\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2" +
    "\017\uffe2\020\uffe2\023\uffe2\025\uffe2\064\uffe2\001\002\000" +
    "\010\007\uffeb\023\uffeb\025\uffeb\001\002\000\032\004\020" +
    "\006\006\007\310\010\004\011\014\012\027\013\022\017" +
    "\013\020\021\023\307\025\321\064\016\001\002\000\034" +
    "\002\uffef\004\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012" +
    "\uffef\013\uffef\017\uffef\020\uffef\023\uffef\025\uffef\064\uffef" +
    "\001\002\000\032\004\020\006\006\007\uffea\010\004\011" +
    "\014\012\027\013\022\017\013\020\021\023\uffea\025\uffea" +
    "\064\016\001\002\000\032\004\uffe5\006\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\017\uffe5\020\uffe5\023\uffe5" +
    "\025\uffe5\064\uffe5\001\002\000\034\002\ufff0\004\ufff0\006" +
    "\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\017\ufff0" +
    "\020\ufff0\023\ufff0\025\ufff0\064\ufff0\001\002\000\034\002" +
    "\uffee\004\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee" +
    "\013\uffee\017\uffee\020\uffee\023\uffee\025\uffee\064\uffee\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\030\002\006\003\004\004\007\007\023\010" +
    "\025\011\022\016\024\017\011\020\014\021\010\026\016" +
    "\001\001\000\002\001\001\000\024\004\147\007\023\010" +
    "\025\011\022\016\024\017\011\020\014\021\010\026\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\044\023\050\001\001\000\002\001\001\000\004" +
    "\025\121\001\001\000\006\006\044\023\117\001\001\000" +
    "\002\001\001\000\006\006\044\023\116\001\001\000\002" +
    "\001\001\000\006\006\044\023\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\044" +
    "\023\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\044\023\112\001\001\000\006" +
    "\006\044\023\111\001\001\000\006\006\044\023\110\001" +
    "\001\000\006\006\044\023\107\001\001\000\006\006\044" +
    "\023\106\001\001\000\006\006\044\023\105\001\001\000" +
    "\006\006\044\023\104\001\001\000\006\006\044\023\103" +
    "\001\001\000\006\006\044\023\102\001\001\000\006\006" +
    "\044\023\101\001\001\000\006\006\044\023\076\001\001" +
    "\000\006\006\044\023\075\001\001\000\006\006\044\023" +
    "\074\001\001\000\006\006\044\023\073\001\001\000\006" +
    "\006\044\023\072\001\001\000\006\006\044\023\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\044\023\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\044\023\141\001" +
    "\001\000\002\001\001\000\006\006\044\023\137\001\001" +
    "\000\006\006\044\023\126\001\001\000\006\006\044\023" +
    "\135\001\001\000\006\006\044\023\132\001\001\000\002" +
    "\001\001\000\006\006\044\023\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\143\001\001\000\002\001\001\000\026\003\145\004" +
    "\007\007\023\010\025\011\022\016\024\017\011\020\014" +
    "\021\010\026\016\001\001\000\024\004\147\007\023\010" +
    "\025\011\022\016\024\017\011\020\014\021\010\026\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\044\023\155\001\001\000\002\001" +
    "\001\000\004\005\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\044\023\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\044" +
    "\023\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\044\023\171\001\001\000\002\001\001\000\004" +
    "\005\173\001\001\000\002\001\001\000\006\006\044\023" +
    "\262\001\001\000\010\006\044\023\242\027\237\001\001" +
    "\000\006\006\044\023\201\001\001\000\006\006\044\023" +
    "\232\001\001\000\006\006\044\023\223\001\001\000\002" +
    "\001\001\000\006\006\044\023\111\001\001\000\004\024" +
    "\204\001\001\000\002\001\001\000\006\006\044\023\215" +
    "\001\001\000\006\006\044\023\210\001\001\000\006\006" +
    "\044\023\212\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\044\023\221\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\226" +
    "\001\001\000\002\001\001\000\006\006\044\023\230\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\044\023\235\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\044\023\253\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\044\023\246\001\001" +
    "\000\004\005\251\001\001\000\002\001\001\000\004\005" +
    "\250\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\256\001\001\000\002\001\001\000\004\005\260\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\044\023\270\001\001\000\002\001" +
    "\001\000\004\005\272\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\044\023\276\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\012\304" +
    "\013\302\014\303\015\301\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\316\004\007\007\023\010\025" +
    "\011\022\015\317\016\024\017\011\020\014\021\010\026" +
    "\016\001\001\000\010\013\313\014\314\015\301\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\044\023" +
    "\310\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\316\004\007\007" +
    "\023\010\025\011\022\015\317\016\024\017\011\020\014" +
    "\021\010\026\016\001\001\000\002\001\001\000\024\004" +
    "\147\007\023\010\025\011\022\016\024\017\011\020\014" +
    "\021\010\026\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo de acciones
  //Codigo visible
    
    public Nodo raiz;

    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int columna = s.right;
        int fila = s.left;
        
        System.out.println("!!!!!!!---- Error Sintactico Recuperado ----!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        String aux = "Error Sintactico Recuperado: " + "\t\tLexema: "+lexema + " \t\tFila: "+fila +" \t\tColumna: "+columna;
        //errorSintactico.add(new ErrorE(aux));
    }

   
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int columna = s.right;
        int fila = s.left;
        
        System.err.println("Error caracter no esperado");
        System.err.println(s);
        System.out.println("!!!!!!! Error Sintactico, Panic Mode!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);  
        
        String aux1 = "Error Sintactico, Modo Panico: " + "\t\tLexema: "+lexema + " \t\tFila: "+fila +" \t\tColumna: "+columna;
        //errorSintactico.add(new ErrorE(aux1));
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {

//Codigo de acciones
      

  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DECLARACIONES ::= id igual E 
            {
              Nodo RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String def = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int otroleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int otroright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo otro = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("DECLARACIONES");
        Nodo hijo_1 = new Nodo(def);
        padre.hijos.add(hijo_1);       
        padre.hijos.add(otro);
        RESULT = padre;    
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E ::= DECLARACIONES 
            {
              Nodo RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int defright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo def = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("DECLARACIONES");       
        padre.hijos.add(def);
        RESULT = padre;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E ::= id EDERECHA 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int otroleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int otroright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo otro = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("ID EDERECHA");
        Nodo hijo_1 = new Nodo(id);
        padre.hijos.add(hijo_1);
        padre.hijos.add(otro);
        RESULT = padre;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E ::= defaultt 
            {
              Nodo RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int defright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String def = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("Default");
        Nodo hijo_1 = new Nodo(def);
        padre.hijos.add(hijo_1);
        RESULT = padre;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E ::= nulo 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("Nulo");
        Nodo hijo_1 = new Nodo(dato);
        padre.hijos.add(hijo_1);
        RESULT = padre;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E ::= falsee 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("Boolean");
        Nodo hijo_1 = new Nodo(dato);
        padre.hijos.add(hijo_1);
        RESULT = padre;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E ::= truee 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("Boolean");
        Nodo hijo_1 = new Nodo(dato);
        padre.hijos.add(hijo_1);
        RESULT = padre;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E ::= cadena 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("String");
        Nodo hijo_1 = new Nodo(dato);
        padre.hijos.add(hijo_1);
        RESULT = padre;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E ::= ERdecimal 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("Numeric");
        Nodo hijo_1 = new Nodo(dato);
        padre.hijos.add(hijo_1);
        RESULT = padre;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E ::= ERnumero 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("Integer");
        Nodo hijo_1 = new Nodo(dato);
        padre.hijos.add(hijo_1);
        RESULT = padre;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E ::= aparentesis E cparentesis 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT=e;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E ::= E interrogacion E dospuntos E 
            {
              Nodo RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo cond = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int vddleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int vddright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo vdd = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fakeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fakeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo fake = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("Ternario");
        padre.hijos.add(cond);
        padre.hijos.add(vdd);
        padre.hijos.add(fake);
        RESULT = padre;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E ::= E diferente E 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("!=");
        padre.hijos.add(e1);
        padre.hijos.add(e2);
        RESULT=padre;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E ::= E igualigual E 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("==");
        padre.hijos.add(e1);
        padre.hijos.add(e2);
        RESULT=padre;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E ::= E menorigualq E 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("<=");
        padre.hijos.add(e1);
        padre.hijos.add(e2);
        RESULT=padre;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E ::= E mayorigualq E 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        Nodo padre = new Nodo(">=");
        padre.hijos.add(e1);
        padre.hijos.add(e2);
        RESULT=padre;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E ::= E menorq E 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("<");
        padre.hijos.add(e1);
        padre.hijos.add(e2);
        RESULT=padre;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E ::= E mayorq E 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        Nodo padre = new Nodo(">");
        padre.hijos.add(e1);
        padre.hijos.add(e2);
        RESULT=padre;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E ::= E modulo E 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("%");
        padre.hijos.add(e1);
        padre.hijos.add(e2);
        RESULT=padre;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E ::= E potencia E 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("^");
        padre.hijos.add(e1);
        padre.hijos.add(e2);
        RESULT=padre;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E ::= E division E 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("/");
        padre.hijos.add(e1);
        padre.hijos.add(e2);
        RESULT=padre;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= E por E 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("*");
        padre.hijos.add(e1);
        padre.hijos.add(e2);
        RESULT=padre;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E ::= E resta E 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("-");
        padre.hijos.add(e1);
        padre.hijos.add(e2);
        RESULT=padre;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E ::= E suma E 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("+");
        padre.hijos.add(e1);
        padre.hijos.add(e2);
        RESULT=padre;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E ::= E and E 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("&");
        padre.hijos.add(e1);
        padre.hijos.add(e2);
        RESULT=padre;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E ::= E or E 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("|");
        padre.hijos.add(e1);
        padre.hijos.add(e2);
        RESULT=padre;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E ::= E coma E 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        Nodo padre = new Nodo(",");
        padre.hijos.add(e1);
        padre.hijos.add(e2);
        RESULT=padre;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E ::= not E 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("!");
        padre.hijos.add(e1);
        RESULT=padre;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E ::= suma E 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("positivo");
        Nodo hijo_1 = new Nodo("+");
        padre.hijos.add(hijo_1);
        padre.hijos.add(e1);
        RESULT=padre;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E ::= resta E 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("negativo");
        Nodo hijo_1 = new Nodo("-");
        padre.hijos.add(hijo_1);
        padre.hijos.add(e1);
        RESULT=padre;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EDERECHA ::= 
            {
              Nodo RESULT =null;
		
            Nodo padre = new Nodo("EIZQUIERDA");                
            RESULT=padre;
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EDERECHA",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EDERECHA ::= EDERECHA acorchete coma E ccorchete 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            Nodo hijo_2 = new Nodo("["); lista.hijos.add(hijo_2);
            Nodo hijo_12 = new Nodo(","); lista.hijos.add(hijo_12);
            lista.hijos.add(sent);            
            Nodo hijo_122 = new Nodo("]"); lista.hijos.add(hijo_122);
            RESULT = lista;
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EDERECHA",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EDERECHA ::= EDERECHA acorchete E coma ccorchete 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
            Nodo hijo_2 = new Nodo("["); lista.hijos.add(hijo_2);
            lista.hijos.add(sent);
            Nodo hijo_12 = new Nodo(","); lista.hijos.add(hijo_12);
            Nodo hijo_122 = new Nodo("]"); lista.hijos.add(hijo_122);
            RESULT = lista;
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EDERECHA",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EDERECHA ::= EDERECHA aparentesis E cparentesis 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            Nodo hijo_2 = new Nodo("("); lista.hijos.add(hijo_2);
            lista.hijos.add(sent);
            Nodo hijo_122 = new Nodo(")"); lista.hijos.add(hijo_122);
            RESULT = lista;
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EDERECHA",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EDERECHA ::= EDERECHA acorchete acorchete E ccorchete ccorchete 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
            Nodo hijo_2 = new Nodo("["); lista.hijos.add(hijo_2);
            Nodo hijo_22 = new Nodo("["); lista.hijos.add(hijo_22);
            lista.hijos.add(sent);
            Nodo hijo_122 = new Nodo("]"); lista.hijos.add(hijo_122);
            Nodo hijo_12 = new Nodo("]"); lista.hijos.add(hijo_12);
            RESULT = lista;
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EDERECHA",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EDERECHA ::= EDERECHA acorchete E ccorchete 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            Nodo hijo_2 = new Nodo("["); lista.hijos.add(hijo_2);
            lista.hijos.add(sent);
            Nodo hijo_122 = new Nodo("]"); lista.hijos.add(hijo_122);
            RESULT = lista;
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EDERECHA",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EIZQUIERDA ::= 
            {
              Nodo RESULT =null;
		
                Nodo padre = new Nodo("EIZQUIERDA");                
                RESULT=padre;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EIZQUIERDA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EIZQUIERDA ::= EIZQUIERDA acorchete acorchete E ccorchete ccorchete 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
               Nodo hijo_2 = new Nodo("["); lista.hijos.add(hijo_2);
               Nodo hijo_22 = new Nodo("["); lista.hijos.add(hijo_22);
               lista.hijos.add(sent);
               Nodo hijo_122 = new Nodo("]"); lista.hijos.add(hijo_122);
               Nodo hijo_322 = new Nodo("]"); lista.hijos.add(hijo_322);
               RESULT = lista;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EIZQUIERDA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EIZQUIERDA ::= EIZQUIERDA acorchete E ccorchete 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                Nodo hijo_2 = new Nodo("["); lista.hijos.add(hijo_2);
                lista.hijos.add(sent);
                Nodo hijo_122 = new Nodo("]"); lista.hijos.add(hijo_122);
                RESULT = lista;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EIZQUIERDA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BLOQUESENTENCIAS ::= allave cllave 
            {
              Nodo RESULT =null;
		
                        Nodo padre = new Nodo("Bloquesentencias");
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUESENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BLOQUESENTENCIAS ::= allave CUERPO cllave 
            {
              Nodo RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo cuerpo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        Nodo padre = new Nodo("Bloquesentencias");
                        padre.hijos.add(cuerpo);
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUESENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FUNCIONESMETODOSDECLARACIONES ::= E puntoycoma 
            {
              Nodo RESULT =null;
		int forrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo forr = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        Nodo padre = new Nodo("Expresion");
                        padre.hijos.add(forr);
                        RESULT=padre;
                   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESMETODOSDECLARACIONES",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FUNCIONESMETODOSDECLARACIONES ::= E 
            {
              Nodo RESULT =null;
		int forrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo forr = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo("Expresion");
                        padre.hijos.add(forr);
                        RESULT=padre;
                   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESMETODOSDECLARACIONES",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FUNCIONESMETODOSDECLARACIONES ::= aparentesis E cparentesis flecha BLOQUESENTENCIAS 
            {
              Nodo RESULT =null;
		int forrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo forr = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo("Funcion");
                        Nodo hijo_1 = new Nodo("("); padre.hijos.add(hijo_1);
                        padre.hijos.add(forr);
                        Nodo hijo_2 = new Nodo(")"); padre.hijos.add(hijo_2);
                        Nodo hijo_22 = new Nodo("=>"); padre.hijos.add(hijo_22);
                        padre.hijos.add(sent);
                        RESULT=padre;
                   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESMETODOSDECLARACIONES",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FUNCIONESMETODOSDECLARACIONES ::= aparentesis cparentesis flecha BLOQUESENTENCIAS 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo("Funcion");
                        Nodo hijo_1 = new Nodo("("); padre.hijos.add(hijo_1);
                        Nodo hijo_2 = new Nodo(")"); padre.hijos.add(hijo_2);
                        Nodo hijo_22 = new Nodo("=>"); padre.hijos.add(hijo_22);
                        padre.hijos.add(sent);
                        RESULT=padre;
                   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESMETODOSDECLARACIONES",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FUNCIONESMETODOSDECLARACIONES ::= functionn aparentesis E cparentesis BLOQUESENTENCIAS 
            {
              Nodo RESULT =null;
		int forrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo forr = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo("Funcion");
                        Nodo hijo_1 = new Nodo("Function"); padre.hijos.add(hijo_1);
                        padre.hijos.add(forr);
                        padre.hijos.add(sent);
                        RESULT=padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESMETODOSDECLARACIONES",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FUNCIONESMETODOSDECLARACIONES ::= functionn aparentesis cparentesis BLOQUESENTENCIAS 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo("Funcion");
                        Nodo hijo_1 = new Nodo("Function"); padre.hijos.add(hijo_1);
                        padre.hijos.add(sent);
                        RESULT=padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESMETODOSDECLARACIONES",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FACTORIZANDO ::= id acorchete acorchete E ccorchete ccorchete EIZQUIERDA igual E puntoycoma 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int otroleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int otroright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo otro = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo exp2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo padre = new Nodo("FACTORIZANDO (accesos)");
                    Nodo hijo_1 = new Nodo(id); padre.hijos.add(hijo_1);
                    Nodo hijo_2 = new Nodo("["); padre.hijos.add(hijo_2);
                    Nodo hijo_22 = new Nodo("["); padre.hijos.add(hijo_22);
                    padre.hijos.add(exp);
                    Nodo hijo_122 = new Nodo("]"); padre.hijos.add(hijo_122);
                    Nodo hijo_322 = new Nodo("]"); padre.hijos.add(hijo_322);
                    padre.hijos.add(otro);
                    Nodo hijo_12 = new Nodo("="); padre.hijos.add(hijo_12);
                    padre.hijos.add(exp2);
                    RESULT=padre;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FACTORIZANDO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FACTORIZANDO ::= id acorchete E ccorchete EIZQUIERDA igual E puntoycoma 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int otroleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int otroright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo otro = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo exp2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo padre = new Nodo("FACTORIZANDO (accesos)");
                    Nodo hijo_1 = new Nodo(id); padre.hijos.add(hijo_1);
                    Nodo hijo_2 = new Nodo("["); padre.hijos.add(hijo_2);
                    padre.hijos.add(exp);
                    Nodo hijo_22 = new Nodo("]"); padre.hijos.add(hijo_22);
                    padre.hijos.add(otro);
                    Nodo hijo_12 = new Nodo("="); padre.hijos.add(hijo_12);
                    padre.hijos.add(exp2);
                    RESULT=padre;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FACTORIZANDO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FACTORIZANDO ::= id acorchete acorchete E ccorchete ccorchete EIZQUIERDA igual E 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int otroleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int otroright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo otro = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo exp2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo padre = new Nodo("FACTORIZANDO (accesos)");
                    Nodo hijo_1 = new Nodo(id); padre.hijos.add(hijo_1);
                    Nodo hijo_2 = new Nodo("["); padre.hijos.add(hijo_2);
                    Nodo hijo_22 = new Nodo("["); padre.hijos.add(hijo_22);
                    padre.hijos.add(exp);
                    Nodo hijo_122 = new Nodo("]"); padre.hijos.add(hijo_122);
                    Nodo hijo_322 = new Nodo("]"); padre.hijos.add(hijo_322);
                    padre.hijos.add(otro);
                    Nodo hijo_12 = new Nodo("="); padre.hijos.add(hijo_12);
                    padre.hijos.add(exp2);
                    RESULT=padre;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FACTORIZANDO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FACTORIZANDO ::= id acorchete E ccorchete EIZQUIERDA igual E 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int otroleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int otroright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo otro = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo exp2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo padre = new Nodo("FACTORIZANDO (accesos)");
                    Nodo hijo_1 = new Nodo(id); padre.hijos.add(hijo_1);
                    Nodo hijo_2 = new Nodo("["); padre.hijos.add(hijo_2);
                    padre.hijos.add(exp);
                    Nodo hijo_22 = new Nodo("]"); padre.hijos.add(hijo_22);
                    padre.hijos.add(otro);
                    Nodo hijo_12 = new Nodo("="); padre.hijos.add(hijo_12);
                    padre.hijos.add(exp2);
                    RESULT=padre;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FACTORIZANDO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FACTORIZANDO ::= id aparentesis cparentesis puntoycoma 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
                    Nodo padre = new Nodo("FACTORIZANDO (Llamada Fun)");
                    Nodo hijo_1 = new Nodo(id); padre.hijos.add(hijo_1);
                    Nodo hijo_4 = new Nodo("("); padre.hijos.add(hijo_4);                    
                    Nodo hijo_44 = new Nodo(")"); padre.hijos.add(hijo_44);
                    RESULT=padre;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FACTORIZANDO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FACTORIZANDO ::= id aparentesis E cparentesis puntoycoma 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                    Nodo padre = new Nodo("FACTORIZANDO (Llamada Fun)");
                    Nodo hijo_1 = new Nodo(id); padre.hijos.add(hijo_1); 
                    Nodo hijo_4 = new Nodo("("); padre.hijos.add(hijo_4);                    
                    padre.hijos.add(exp);
                    Nodo hijo_44 = new Nodo(")"); padre.hijos.add(hijo_44);
                    RESULT=padre;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FACTORIZANDO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FACTORIZANDO ::= id aparentesis cparentesis 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                    Nodo padre = new Nodo("FACTORIZANDO (Llamada Fun)");
                    Nodo hijo_1 = new Nodo(id); padre.hijos.add(hijo_1);
                    Nodo hijo_4 = new Nodo("("); padre.hijos.add(hijo_4);                    
                    Nodo hijo_44 = new Nodo(")"); padre.hijos.add(hijo_44);
                    RESULT=padre;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FACTORIZANDO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FACTORIZANDO ::= id aparentesis E cparentesis 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo padre = new Nodo("FACTORIZANDO (Llamada Fun)");
                    Nodo hijo_1 = new Nodo(id); padre.hijos.add(hijo_1);
                    Nodo hijo_4 = new Nodo("("); padre.hijos.add(hijo_4);                    
                    padre.hijos.add(exp);
                    Nodo hijo_44 = new Nodo(")"); padre.hijos.add(hijo_44);
                    RESULT=padre;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FACTORIZANDO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FACTORIZANDO ::= id acorchete coma E ccorchete igual E puntoycoma 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo exp2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo padre = new Nodo("FACTORIZANDO (Matrix , E)");
                    Nodo hijo_1 = new Nodo(id); padre.hijos.add(hijo_1);
                    Nodo hijo_2 = new Nodo("["); padre.hijos.add(hijo_2);
                    Nodo hijo_3 = new Nodo(","); padre.hijos.add(hijo_3);    
                    padre.hijos.add(exp);
                    Nodo hijo_4 = new Nodo("]"); padre.hijos.add(hijo_4);                    
                    Nodo hijo_44 = new Nodo("="); padre.hijos.add(hijo_44);
                    padre.hijos.add(exp2);
                    RESULT=padre;
               
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FACTORIZANDO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FACTORIZANDO ::= id acorchete E coma ccorchete igual E puntoycoma 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo exp2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo padre = new Nodo("FACTORIZANDO (Matrix E,)");
                    Nodo hijo_1 = new Nodo(id); padre.hijos.add(hijo_1);
                    Nodo hijo_2 = new Nodo("["); padre.hijos.add(hijo_2);
                    padre.hijos.add(exp);
                    Nodo hijo_3 = new Nodo(","); padre.hijos.add(hijo_3); 
                    Nodo hijo_4 = new Nodo("]"); padre.hijos.add(hijo_4);                    
                    Nodo hijo_44 = new Nodo("="); padre.hijos.add(hijo_44);
                    padre.hijos.add(exp2);
                    RESULT=padre;
               
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FACTORIZANDO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FACTORIZANDO ::= id acorchete coma E ccorchete igual E 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo exp2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo padre = new Nodo("FACTORIZANDO (Matrix , E)");
                    Nodo hijo_1 = new Nodo(id); padre.hijos.add(hijo_1);
                    Nodo hijo_2 = new Nodo("["); padre.hijos.add(hijo_2);
                    Nodo hijo_3 = new Nodo(","); padre.hijos.add(hijo_3);                   
                    padre.hijos.add(exp);
                    Nodo hijo_4 = new Nodo("]"); padre.hijos.add(hijo_4);
                    Nodo hijo_44 = new Nodo("="); padre.hijos.add(hijo_44);
                    padre.hijos.add(exp2);
                    RESULT=padre;
               
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FACTORIZANDO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FACTORIZANDO ::= id acorchete E coma ccorchete igual E 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int forrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo forr = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo padre = new Nodo("FACTORIZANDO (Matrix E,)");
                    Nodo hijo_1 = new Nodo(id);
                    padre.hijos.add(hijo_1);
                    Nodo hijo_2 = new Nodo("["); padre.hijos.add(hijo_2);
                    padre.hijos.add(forr);
                    Nodo hijo_3 = new Nodo(","); padre.hijos.add(hijo_3);
                    Nodo hijo_4 = new Nodo("]"); padre.hijos.add(hijo_4);
                    Nodo hijo_44 = new Nodo("="); padre.hijos.add(hijo_44);
                    padre.hijos.add(exp);
                    RESULT=padre;
               
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FACTORIZANDO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FACTORIZANDO ::= id igual FUNCIONESMETODOSDECLARACIONES 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo padre = new Nodo("FACTORIZANDO (F O EXP)");
                    Nodo hijo_1 = new Nodo(id);
                    padre.hijos.add(hijo_1);
                    Nodo hijo_2 = new Nodo("="); 
                    padre.hijos.add(hijo_2);
                    padre.hijos.add(nodo);
                    RESULT=padre;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FACTORIZANDO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IF_LISTA ::= IF_LISTA elsee iff aparentesis E cparentesis BLOQUESENTENCIAS 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo bloque = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                
                Nodo hijo = new Nodo("else if");
                lista.hijos.add(hijo);
                lista.hijos.add(e1);
                lista.hijos.add(bloque);
                RESULT = lista;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF_LISTA",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IF_LISTA ::= iff aparentesis E cparentesis BLOQUESENTENCIAS 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo bloque = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                Nodo padre = new Nodo("IF ELSE");
                Nodo hijo = new Nodo("if");
                padre.hijos.add(hijo);
                padre.hijos.add(e1);
                padre.hijos.add(bloque);
                RESULT = padre;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF_LISTA",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IFSSS ::= IF_LISTA 
            {
              Nodo RESULT =null;
		int ifffleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ifffright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo ifff = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo padre = new Nodo("LISTA IF");
                    padre.hijos.add(ifff);
                    RESULT = padre;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IFSSS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IFSSS ::= IF_LISTA elsee BLOQUESENTENCIAS 
            {
              Nodo RESULT =null;
		int ifffleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int ifffright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo ifff = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo bloque = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo padre = new Nodo("LISTA IF ELSE");
                    Nodo hijo = new Nodo("else");
                    padre.hijos.add(hijo);
                    padre.hijos.add(ifff);
                    padre.hijos.add(bloque);
                    RESULT = padre;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IFSSS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SWITCHCASEDEFAULT ::= defaultt dospuntos 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                Nodo padre = new Nodo("Default");
                Nodo hijo_1 = new Nodo(id);
                padre.hijos.add(hijo_1);
                RESULT = padre;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHCASEDEFAULT",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SWITCHCASEDEFAULT ::= casee E dospuntos 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                Nodo padre = new Nodo("Case");
                padre.hijos.add(e1);
                RESULT = padre;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHCASEDEFAULT",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SWITCHCASEDEFAULTS ::= SWITCHCASEDEFAULT 
            {
              Nodo RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sentencia = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo lista = new Nodo("SWITCHCASEDEFAULTS");
                    lista.hijos.add(sentencia);
                    RESULT = lista;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHCASEDEFAULTS",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SWITCHCASEDEFAULTS ::= SWITCHCASEDEFAULTS SWITCHCASEDEFAULT 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sentencia = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        lista.hijos.add(sentencia);
                        RESULT = lista;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHCASEDEFAULTS",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIATRANSFERENCIA ::= returnn aparentesis E cparentesis 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                            Nodo padre = new Nodo("SENTENCIATRANSFERENCIA");
                            Nodo hijo_1 = new Nodo("return");
                            padre.hijos.add(hijo_1);
                            padre.hijos.add(e1);
                            RESULT = padre;
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIATRANSFERENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIATRANSFERENCIA ::= returnn 
            {
              Nodo RESULT =null;
		
                            Nodo padre = new Nodo("SENTENCIATRANSFERENCIA");
                            Nodo hijo_1 = new Nodo("return");
                            padre.hijos.add(hijo_1);
                            RESULT = padre;
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIATRANSFERENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIATRANSFERENCIA ::= breakk 
            {
              Nodo RESULT =null;
		
                            Nodo padre = new Nodo("SENTENCIATRANSFERENCIA");
                            Nodo hijo_1 = new Nodo("break");
                            padre.hijos.add(hijo_1);
                            RESULT = padre;
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIATRANSFERENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIATRANSFERENCIA ::= continuee 
            {
              Nodo RESULT =null;
		
                            Nodo padre = new Nodo("SENTENCIATRANSFERENCIA");
                            Nodo hijo_1 = new Nodo("continue");
                            padre.hijos.add(hijo_1);
                            RESULT = padre;
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIATRANSFERENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SWITCHBLOQUES ::= SWITCHCASEDEFAULTS CUERPO 
            {
              Nodo RESULT =null;
		int casesdefaultsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int casesdefaultsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo casesdefaults = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cuerpo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo padre = new Nodo("SENTENCIATRANSFERENCIA");
                    padre.hijos.add(casesdefaults);
                    padre.hijos.add(cuerpo);
                    RESULT = padre;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHBLOQUES",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SWITCHBLOQUESUPS ::= SWITCHBLOQUESUPS SWITCHBLOQUES 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sentencia = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        lista.hijos.add(sentencia);
                        RESULT = lista;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHBLOQUESUPS",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SWITCHBLOQUESUPS ::= SWITCHBLOQUES 
            {
              Nodo RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sentencia = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo lista = new Nodo("sentencias");
                        lista.hijos.add(sentencia);
                        RESULT = lista;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHBLOQUESUPS",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SWITCHH ::= switchh aparentesis E cparentesis allave cllave 
            {
              Nodo RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo ee = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
                Nodo padre = new Nodo("Switch");
                Nodo hijo_1 = new Nodo("Switch");
                padre.hijos.add(hijo_1);
                padre.hijos.add(ee);
                RESULT =  padre;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHH",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SWITCHH ::= switchh aparentesis E cparentesis allave SWITCHCASEDEFAULTS cllave 
            {
              Nodo RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo ee = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int casesleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo cases = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                Nodo padre = new Nodo("Switch");
                Nodo hijo_1 = new Nodo("Switch");
                padre.hijos.add(hijo_1);
                padre.hijos.add(ee);
                padre.hijos.add(cases);
                RESULT =  padre;
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHH",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SWITCHH ::= switchh aparentesis E cparentesis allave SWITCHBLOQUESUPS cllave 
            {
              Nodo RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo ee = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int casesleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo cases = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                Nodo padre = new Nodo("Switch");
                Nodo hijo_1 = new Nodo("Switch");
                padre.hijos.add(hijo_1);
                padre.hijos.add(ee);
                padre.hijos.add(cases);
                RESULT =  padre;
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHH",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SWITCHH ::= switchh aparentesis E cparentesis allave SWITCHBLOQUESUPS SWITCHCASEDEFAULTS cllave 
            {
              Nodo RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Nodo ee = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int casesleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo cases = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cases2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cases2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo cases2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                Nodo padre = new Nodo("Switch");
                Nodo hijo_1 = new Nodo("Switch");
                padre.hijos.add(hijo_1);
                padre.hijos.add(ee);
                padre.hijos.add(cases);
                padre.hijos.add(cases2);
                RESULT =  padre;
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHH",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DOWHILE ::= doo BLOQUESENTENCIAS whilee aparentesis E cparentesis 
            {
              Nodo RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo sentencias = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo ee = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                Nodo padre = new Nodo("DoWhile");
                Nodo hijo_1 = new Nodo("Do");
                padre.hijos.add(hijo_1);
                padre.hijos.add(sentencias);
                Nodo hijo_2 = new Nodo("While");
                padre.hijos.add(hijo_2);
                padre.hijos.add(ee);
                RESULT =  padre;
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DOWHILE",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // WHILEE ::= whilee aparentesis E cparentesis BLOQUESENTENCIAS 
            {
              Nodo RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo ee = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sentencias = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                Nodo padre = new Nodo("While");
                Nodo hijo_1 = new Nodo("While");
                padre.hijos.add(hijo_1);
                padre.hijos.add(ee);
                padre.hijos.add(sentencias);
                RESULT =  padre;
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILEE",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INICIALIZACION ::= id inn E 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo padre = new Nodo("INICIALIZACION");
                    Nodo hijo_1 = new Nodo(id);
                    padre.hijos.add(hijo_1);
                    padre.hijos.add(e);
                    RESULT =  padre;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALIZACION",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FORR ::= forr aparentesis INICIALIZACION cparentesis BLOQUESENTENCIAS 
            {
              Nodo RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo ini = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Nodo padre = new Nodo("FORR");
            Nodo hijo_1 = new Nodo("For");
            padre.hijos.add(hijo_1);
            padre.hijos.add(ini);
            padre.hijos.add(e);
            RESULT =  padre;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FORR",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIATRANSFERENCIA 
            {
              Nodo RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sentencia = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = sentencia;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIATRANSFERENCIA puntoycoma 
            {
              Nodo RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sentencia = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT = sentencia;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= FORR 
            {
              Nodo RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sentencia = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = sentencia;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= DOWHILE 
            {
              Nodo RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sentencia = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = sentencia;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= DOWHILE puntoycoma 
            {
              Nodo RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sentencia = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT = sentencia;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= WHILEE 
            {
              Nodo RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sentencia = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = sentencia;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SWITCHH 
            {
              Nodo RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sentencia = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = sentencia;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= IFSSS 
            {
              Nodo RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sentencia = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = sentencia;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= FACTORIZANDO 
            {
              Nodo RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sentencia = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = sentencia;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO ::= SENTENCIA 
            {
              Nodo RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sentencia = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Nodo lista = new Nodo("sentencia");
            lista.hijos.add(sentencia);
            RESULT = lista;
         
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CUERPO ::= CUERPO SENTENCIA 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sentencia = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            lista.hijos.add(sentencia);
            RESULT = lista;
         
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= CUERPO 
            {
              Nodo RESULT =null;
		int raizleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int raizright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo raiz = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        parser.raiz=raiz;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

