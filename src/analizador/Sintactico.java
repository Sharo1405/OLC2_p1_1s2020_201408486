
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Feb 24 15:33:33 CST 2020
//----------------------------------------------------

package analizador;

import java.util.LinkedList;
import java.util.ArrayList;
import java_cup.runtime.*;
import Errores.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Feb 24 15:33:33 CST 2020
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\004\000\002\004\003\000\002\004\003\000\002" +
    "\004\004\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\004\000\002\024\006\000\002\024\005" +
    "\000\002\021\010\000\002\021\007\000\002\021\010\000" +
    "\002\021\007\000\002\022\007\000\002\023\005\000\002" +
    "\016\007\000\002\017\010\000\002\011\012\000\002\011" +
    "\011\000\002\011\011\000\002\011\010\000\002\012\003" +
    "\000\002\012\004\000\002\013\004\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\004\000\002" +
    "\014\004\000\002\014\003\000\002\015\005\000\002\015" +
    "\004\000\002\007\005\000\002\007\003\000\002\010\007" +
    "\000\002\010\011\000\002\006\005\000\002\006\006\000" +
    "\002\005\005\000\002\005\004\000\002\025\004\000\002" +
    "\025\004\000\002\025\004\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\007\000\002\025\005\000\002\025\005\000\002\025\004" +
    "\000\002\025\004\000\002\025\005\000\002\025\006\000" +
    "\002\025\005\000\002\025\006\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\004\000\002\025\003\000\002\025\003\000\002\025\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\024\004\022\006\010\010\006\011\017\012" +
    "\031\013\026\017\016\020\023\063\021\001\002\000\032" +
    "\002\ufffa\004\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\013\ufffa\017\ufffa\020\ufffa\024\ufffa\063\ufffa\001\002" +
    "\000\032\002\ufff3\004\ufff3\006\ufff3\007\ufff3\010\ufff3\011" +
    "\ufff3\012\ufff3\013\ufff3\017\ufff3\020\ufff3\024\ufff3\063\ufff3" +
    "\001\002\000\034\002\uffde\004\uffde\006\uffde\007\uffde\010" +
    "\uffde\011\uffde\012\uffde\013\uffde\017\uffde\020\uffde\024\uffde" +
    "\053\uffde\063\uffde\001\002\000\026\002\000\004\022\006" +
    "\010\010\006\011\017\012\031\013\026\017\016\020\023" +
    "\063\021\001\002\000\004\027\221\001\002\000\004\002" +
    "\220\001\002\000\032\002\ufffe\004\ufffe\006\ufffe\007\ufffe" +
    "\010\ufffe\011\ufffe\012\ufffe\013\ufffe\017\ufffe\020\ufffe\024" +
    "\ufffe\063\ufffe\001\002\000\032\002\ufff6\004\ufff6\006\ufff6" +
    "\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\017\ufff6\020" +
    "\ufff6\024\ufff6\063\ufff6\001\002\000\032\002\ufffb\004\ufffb" +
    "\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\017" +
    "\ufffb\020\ufffb\024\ufffb\063\ufffb\001\002\000\034\002\ufff7" +
    "\004\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013" +
    "\ufff7\017\ufff7\020\ufff7\024\ufff7\053\217\063\ufff7\001\002" +
    "\000\034\002\uffdf\004\uffdf\006\uffdf\007\uffdf\010\uffdf\011" +
    "\uffdf\012\uffdf\013\uffdf\017\uffdf\020\uffdf\024\uffdf\053\uffdf" +
    "\063\uffdf\001\002\000\004\027\213\001\002\000\034\002" +
    "\ufff4\004\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4" +
    "\013\ufff4\017\ufff4\020\ufff4\024\ufff4\053\212\063\ufff4\001" +
    "\002\000\036\014\036\015\041\022\045\025\052\027\165" +
    "\031\167\032\044\033\042\051\043\054\040\060\046\061" +
    "\051\062\050\063\037\001\002\000\004\027\161\001\002" +
    "\000\064\002\uffdd\004\uffdd\006\uffdd\007\uffdd\010\uffdd\011" +
    "\uffdd\012\uffdd\013\uffdd\014\036\015\041\017\uffdd\020\uffdd" +
    "\022\045\024\uffdd\025\052\027\047\032\044\033\042\051" +
    "\043\053\uffdd\054\040\060\046\061\051\062\050\063\037" +
    "\001\002\000\034\002\ufffd\004\ufffd\006\ufffd\007\ufffd\010" +
    "\ufffd\011\ufffd\012\ufffd\013\ufffd\017\ufffd\020\ufffd\024\ufffd" +
    "\053\157\063\ufffd\001\002\000\034\002\ufff2\004\ufff2\006" +
    "\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\017\ufff2" +
    "\020\ufff2\024\ufff2\053\156\063\ufff2\001\002\000\004\023" +
    "\135\001\002\000\032\002\ufff9\004\ufff9\006\ufff9\007\ufff9" +
    "\010\ufff9\011\ufff9\012\ufff9\013\ufff9\017\ufff9\020\ufff9\024" +
    "\ufff9\063\ufff9\001\002\000\034\002\uffd6\004\uffd6\005\142" +
    "\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\017" +
    "\uffd6\020\uffd6\024\uffd6\063\uffd6\001\002\000\004\027\032" +
    "\001\002\000\004\063\034\001\002\000\004\030\133\001" +
    "\002\000\004\016\035\001\002\000\034\014\036\015\041" +
    "\022\045\025\052\027\047\032\044\033\042\051\043\054" +
    "\040\060\046\061\051\062\050\063\037\001\002\000\110" +
    "\002\uffb0\004\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012" +
    "\uffb0\013\uffb0\017\uffb0\020\uffb0\023\uffb0\024\uffb0\026\uffb0" +
    "\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036" +
    "\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0" +
    "\045\uffb0\046\uffb0\047\uffb0\050\uffb0\052\uffb0\053\uffb0\054" +
    "\uffb0\055\uffb0\063\uffb0\001\002\000\132\002\uffb2\004\uffb2" +
    "\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014" +
    "\036\015\041\017\uffb2\020\uffb2\022\045\023\uffb2\024\uffb2" +
    "\025\052\026\uffb2\027\047\030\uffb2\031\uffb2\032\044\033" +
    "\042\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2" +
    "\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050" +
    "\uffb2\051\043\052\uffb2\053\uffb2\054\uffb2\055\uffb2\060\046" +
    "\061\051\062\050\063\uffb2\001\002\000\034\014\036\015" +
    "\041\022\045\025\052\027\047\032\044\033\042\051\043" +
    "\054\040\060\046\061\051\062\050\063\037\001\002\000" +
    "\110\002\uffaf\004\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf" +
    "\012\uffaf\013\uffaf\017\uffaf\020\uffaf\023\uffaf\024\uffaf\026" +
    "\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf" +
    "\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044" +
    "\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\052\uffaf\053\uffaf" +
    "\054\uffaf\055\uffaf\063\uffaf\001\002\000\034\014\036\015" +
    "\041\022\045\025\052\027\047\032\044\033\042\051\043" +
    "\054\040\060\046\061\051\062\050\063\037\001\002\000" +
    "\034\014\036\015\041\022\045\025\052\027\047\032\044" +
    "\033\042\051\043\054\040\060\046\061\051\062\050\063" +
    "\037\001\002\000\034\014\036\015\041\022\045\025\052" +
    "\027\047\032\044\033\042\051\043\054\040\060\046\061" +
    "\051\062\050\063\037\001\002\000\110\002\uffae\004\uffae" +
    "\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013\uffae\017" +
    "\uffae\020\uffae\023\uffae\024\uffae\026\uffae\030\uffae\031\uffae" +
    "\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040" +
    "\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae" +
    "\047\uffae\050\uffae\052\uffae\053\uffae\054\uffae\055\uffae\063" +
    "\uffae\001\002\000\110\002\uffb3\004\uffb3\006\uffb3\007\uffb3" +
    "\010\uffb3\011\uffb3\012\uffb3\013\uffb3\017\uffb3\020\uffb3\023" +
    "\uffb3\024\uffb3\026\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3" +
    "\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042" +
    "\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3" +
    "\052\uffb3\053\uffb3\054\uffb3\055\uffb3\063\uffb3\001\002\000" +
    "\034\014\036\015\041\022\045\025\052\027\047\032\044" +
    "\033\042\051\043\054\040\060\046\061\051\062\050\063" +
    "\037\001\002\000\110\002\uffb4\004\uffb4\006\uffb4\007\uffb4" +
    "\010\uffb4\011\uffb4\012\uffb4\013\uffb4\017\uffb4\020\uffb4\023" +
    "\uffb4\024\uffb4\026\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4" +
    "\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042" +
    "\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4" +
    "\052\uffb4\053\uffb4\054\uffb4\055\uffb4\063\uffb4\001\002\000" +
    "\110\002\uffb5\004\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5" +
    "\012\uffb5\013\uffb5\017\uffb5\020\uffb5\023\uffb5\024\uffb5\026" +
    "\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5" +
    "\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044" +
    "\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\052\uffb5\053\uffb5" +
    "\054\uffb5\055\uffb5\063\uffb5\001\002\000\034\014\036\015" +
    "\041\022\045\025\052\027\047\032\044\033\042\051\043" +
    "\054\040\060\046\061\051\062\050\063\037\001\002\000" +
    "\046\030\uffe9\031\073\032\057\033\055\034\071\035\065" +
    "\036\054\037\066\040\074\041\062\042\072\043\070\044" +
    "\063\045\064\046\067\047\061\050\060\054\056\001\002" +
    "\000\034\014\036\015\041\022\045\025\052\027\047\032" +
    "\044\033\042\051\043\054\040\060\046\061\051\062\050" +
    "\063\037\001\002\000\034\014\036\015\041\022\045\025" +
    "\052\027\047\032\044\033\042\051\043\054\040\060\046" +
    "\061\051\062\050\063\037\001\002\000\132\002\uffbb\004" +
    "\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb" +
    "\014\036\015\041\017\uffbb\020\uffbb\022\045\023\uffbb\024" +
    "\uffbb\025\052\026\uffbb\027\047\030\uffbb\031\uffbb\032\044" +
    "\033\042\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041" +
    "\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb" +
    "\050\uffbb\051\043\052\uffbb\053\uffbb\054\uffbb\055\uffbb\060" +
    "\046\061\051\062\050\063\037\001\002\000\034\014\036" +
    "\015\041\022\045\025\052\027\047\032\044\033\042\051" +
    "\043\054\040\060\046\061\051\062\050\063\037\001\002" +
    "\000\034\014\036\015\041\022\045\025\052\027\047\032" +
    "\044\033\042\051\043\054\040\060\046\061\051\062\050" +
    "\063\037\001\002\000\034\014\036\015\041\022\045\025" +
    "\052\027\047\032\044\033\042\051\043\054\040\060\046" +
    "\061\051\062\050\063\037\001\002\000\034\014\036\015" +
    "\041\022\045\025\052\027\047\032\044\033\042\051\043" +
    "\054\040\060\046\061\051\062\050\063\037\001\002\000" +
    "\034\014\036\015\041\022\045\025\052\027\047\032\044" +
    "\033\042\051\043\054\040\060\046\061\051\062\050\063" +
    "\037\001\002\000\034\014\036\015\041\022\045\025\052" +
    "\027\047\032\044\033\042\051\043\054\040\060\046\061" +
    "\051\062\050\063\037\001\002\000\034\014\036\015\041" +
    "\022\045\025\052\027\047\032\044\033\042\051\043\054" +
    "\040\060\046\061\051\062\050\063\037\001\002\000\034" +
    "\014\036\015\041\022\045\025\052\027\047\032\044\033" +
    "\042\051\043\054\040\060\046\061\051\062\050\063\037" +
    "\001\002\000\034\014\036\015\041\022\045\025\052\027" +
    "\047\032\044\033\042\051\043\054\040\060\046\061\051" +
    "\062\050\063\037\001\002\000\034\014\036\015\041\022" +
    "\045\025\052\027\047\032\044\033\042\051\043\054\040" +
    "\060\046\061\051\062\050\063\037\001\002\000\034\014" +
    "\036\015\041\022\045\025\052\027\047\032\044\033\042" +
    "\051\043\054\040\060\046\061\051\062\050\063\037\001" +
    "\002\000\034\014\036\015\041\022\045\025\052\027\047" +
    "\032\044\033\042\051\043\054\040\060\046\061\051\062" +
    "\050\063\037\001\002\000\034\014\036\015\041\022\045" +
    "\025\052\027\047\032\044\033\042\051\043\054\040\060" +
    "\046\061\051\062\050\063\037\001\002\000\034\014\036" +
    "\015\041\022\045\025\052\027\047\032\044\033\042\051" +
    "\043\054\040\060\046\061\051\062\050\063\037\001\002" +
    "\000\110\002\uffc4\004\uffc4\006\uffc4\007\uffc4\010\uffc4\011" +
    "\uffc4\012\uffc4\013\uffc4\017\uffc4\020\uffc4\023\uffc4\024\uffc4" +
    "\026\uffc4\030\uffc4\031\073\032\uffc4\033\uffc4\034\uffc4\035" +
    "\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4" +
    "\044\063\045\064\046\067\047\061\050\060\052\uffc4\053" +
    "\uffc4\054\uffc4\055\uffc4\063\uffc4\001\002\000\110\002\uffbc" +
    "\004\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013" +
    "\uffbc\017\uffbc\020\uffbc\023\uffbc\024\uffbc\026\uffbc\030\uffbc" +
    "\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037" +
    "\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc" +
    "\046\uffbc\047\uffbc\050\uffbc\052\uffbc\053\uffbc\054\uffbc\055" +
    "\uffbc\063\uffbc\001\002\000\110\002\uffc2\004\uffc2\006\uffc2" +
    "\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\017\uffc2\020" +
    "\uffc2\023\uffc2\024\uffc2\026\uffc2\030\uffc2\031\073\032\uffc2" +
    "\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041" +
    "\uffc2\042\uffc2\043\uffc2\044\063\045\064\046\067\047\061" +
    "\050\060\052\uffc2\053\uffc2\054\uffc2\055\uffc2\063\uffc2\001" +
    "\002\000\110\002\uffc8\004\uffc8\006\uffc8\007\uffc8\010\uffc8" +
    "\011\uffc8\012\uffc8\013\uffc8\017\uffc8\020\uffc8\023\uffc8\024" +
    "\uffc8\026\uffc8\030\uffc8\031\073\032\057\033\055\034\uffc8" +
    "\035\uffc8\036\uffc8\037\uffc8\040\074\041\062\042\072\043" +
    "\070\044\063\045\064\046\067\047\061\050\060\052\uffc8" +
    "\053\uffc8\054\uffc8\055\uffc8\063\uffc8\001\002\000\110\002" +
    "\uffc1\004\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1" +
    "\013\uffc1\017\uffc1\020\uffc1\023\uffc1\024\uffc1\026\uffc1\030" +
    "\uffc1\031\073\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1" +
    "\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\063\045" +
    "\064\046\067\047\061\050\060\052\uffc1\053\uffc1\054\uffc1" +
    "\055\uffc1\063\uffc1\001\002\000\046\031\073\032\057\033" +
    "\055\034\071\035\065\036\054\037\066\040\074\041\062" +
    "\042\072\043\070\044\063\045\064\046\067\047\061\050" +
    "\060\052\103\054\056\001\002\000\034\014\036\015\041" +
    "\022\045\025\052\027\047\032\044\033\042\051\043\054" +
    "\040\060\046\061\051\062\050\063\037\001\002\000\110" +
    "\002\uffbe\004\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012" +
    "\uffbe\013\uffbe\017\uffbe\020\uffbe\023\uffbe\024\uffbe\026\uffbe" +
    "\030\uffbe\031\073\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036" +
    "\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe" +
    "\045\uffbe\046\uffbe\047\uffbe\050\uffbe\052\uffbe\053\uffbe\054" +
    "\uffbe\055\uffbe\063\uffbe\001\002\000\110\002\uffc5\004\uffc5" +
    "\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\017" +
    "\uffc5\020\uffc5\023\uffc5\024\uffc5\026\uffc5\030\uffc5\031\073" +
    "\032\057\033\055\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040" +
    "\074\041\062\042\072\043\070\044\063\045\064\046\067" +
    "\047\061\050\060\052\uffc5\053\uffc5\054\uffc5\055\uffc5\063" +
    "\uffc5\001\002\000\110\002\uffc7\004\uffc7\006\uffc7\007\uffc7" +
    "\010\uffc7\011\uffc7\012\uffc7\013\uffc7\017\uffc7\020\uffc7\023" +
    "\uffc7\024\uffc7\026\uffc7\030\uffc7\031\073\032\057\033\055" +
    "\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\074\041\062\042" +
    "\072\043\070\044\063\045\064\046\067\047\061\050\060" +
    "\052\uffc7\053\uffc7\054\uffc7\055\uffc7\063\uffc7\001\002\000" +
    "\110\002\uffbf\004\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf" +
    "\012\uffbf\013\uffbf\017\uffbf\020\uffbf\023\uffbf\024\uffbf\026" +
    "\uffbf\030\uffbf\031\073\032\uffbf\033\uffbf\034\uffbf\035\uffbf" +
    "\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044" +
    "\uffbf\045\uffbf\046\067\047\061\050\060\052\uffbf\053\uffbf" +
    "\054\uffbf\055\uffbf\063\uffbf\001\002\000\110\002\uffc0\004" +
    "\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0" +
    "\017\uffc0\020\uffc0\023\uffc0\024\uffc0\026\uffc0\030\uffc0\031" +
    "\073\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0" +
    "\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046" +
    "\067\047\061\050\060\052\uffc0\053\uffc0\054\uffc0\055\uffc0" +
    "\063\uffc0\001\002\000\110\002\uffc3\004\uffc3\006\uffc3\007" +
    "\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\017\uffc3\020\uffc3" +
    "\023\uffc3\024\uffc3\026\uffc3\030\uffc3\031\073\032\uffc3\033" +
    "\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3" +
    "\042\uffc3\043\uffc3\044\063\045\064\046\067\047\061\050" +
    "\060\052\uffc3\053\uffc3\054\uffc3\055\uffc3\063\uffc3\001\002" +
    "\000\110\002\uffcb\004\uffcb\006\uffcb\007\uffcb\010\uffcb\011" +
    "\uffcb\012\uffcb\013\uffcb\017\uffcb\020\uffcb\023\uffcb\024\uffcb" +
    "\026\uffcb\030\uffcb\031\073\032\uffcb\033\uffcb\034\uffcb\035" +
    "\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb" +
    "\044\uffcb\045\uffcb\046\067\047\uffcb\050\060\052\uffcb\053" +
    "\uffcb\054\uffcb\055\uffcb\063\uffcb\001\002\000\110\002\uffcc" +
    "\004\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013" +
    "\uffcc\017\uffcc\020\uffcc\023\uffcc\024\uffcc\026\uffcc\030\uffcc" +
    "\031\073\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037" +
    "\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc" +
    "\046\067\047\uffcc\050\uffcc\052\uffcc\053\uffcc\054\uffcc\055" +
    "\uffcc\063\uffcc\001\002\000\110\002\uffca\004\uffca\006\uffca" +
    "\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca\017\uffca\020" +
    "\uffca\023\uffca\024\uffca\026\uffca\030\uffca\031\073\032\uffca" +
    "\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\074\041" +
    "\062\042\072\043\070\044\063\045\064\046\067\047\061" +
    "\050\060\052\uffca\053\uffca\054\uffca\055\uffca\063\uffca\001" +
    "\002\000\110\002\uffbd\004\uffbd\006\uffbd\007\uffbd\010\uffbd" +
    "\011\uffbd\012\uffbd\013\uffbd\017\uffbd\020\uffbd\023\uffbd\024" +
    "\uffbd\026\uffbd\030\uffbd\031\073\032\057\033\055\034\071" +
    "\035\065\036\054\037\066\040\074\041\062\042\072\043" +
    "\070\044\063\045\064\046\067\047\061\050\060\052\uffbd" +
    "\053\uffbd\054\uffbd\055\uffbd\063\uffbd\001\002\000\110\002" +
    "\uffc9\004\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9" +
    "\013\uffc9\017\uffc9\020\uffc9\023\uffc9\024\uffc9\026\uffc9\030" +
    "\uffc9\031\073\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9" +
    "\037\uffc9\040\074\041\062\042\072\043\070\044\063\045" +
    "\064\046\067\047\061\050\060\052\uffc9\053\uffc9\054\uffc9" +
    "\055\uffc9\063\uffc9\001\002\000\110\002\uffc6\004\uffc6\006" +
    "\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\017\uffc6" +
    "\020\uffc6\023\uffc6\024\uffc6\026\uffc6\030\uffc6\031\073\032" +
    "\057\033\055\034\071\035\065\036\uffc6\037\066\040\074" +
    "\041\062\042\072\043\070\044\063\045\064\046\067\047" +
    "\061\050\060\052\uffc6\053\uffc6\054\uffc6\055\uffc6\063\uffc6" +
    "\001\002\000\046\026\121\031\073\032\057\033\055\034" +
    "\071\035\065\036\054\037\066\040\074\041\062\042\072" +
    "\043\070\044\063\045\064\046\067\047\061\050\060\054" +
    "\056\001\002\000\132\002\uffb9\004\uffb9\006\uffb9\007\uffb9" +
    "\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014\036\015\041\017" +
    "\uffb9\020\uffb9\022\045\023\uffb9\024\uffb9\025\052\026\uffb9" +
    "\027\047\030\uffb9\031\uffb9\032\044\033\042\034\uffb9\035" +
    "\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9" +
    "\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\043\052" +
    "\uffb9\053\uffb9\054\040\055\uffb9\060\046\061\051\062\050" +
    "\063\037\001\002\000\110\002\uffb8\004\uffb8\006\uffb8\007" +
    "\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\017\uffb8\020\uffb8" +
    "\023\uffb8\024\uffb8\026\uffb8\030\uffb8\031\073\032\057\033" +
    "\055\034\071\035\065\036\054\037\066\040\074\041\062" +
    "\042\072\043\070\044\063\045\064\046\067\047\061\050" +
    "\060\052\uffb8\053\uffb8\054\056\055\uffb8\063\uffb8\001\002" +
    "\000\046\030\124\031\073\032\057\033\055\034\071\035" +
    "\065\036\054\037\066\040\074\041\062\042\072\043\070" +
    "\044\063\045\064\046\067\047\061\050\060\054\056\001" +
    "\002\000\132\002\uffb7\004\uffb7\006\uffb7\007\uffb7\010\uffb7" +
    "\011\uffb7\012\uffb7\013\uffb7\014\036\015\041\017\uffb7\020" +
    "\uffb7\022\045\023\uffb7\024\uffb7\025\052\026\uffb7\027\047" +
    "\030\uffb7\031\uffb7\032\044\033\042\034\uffb7\035\uffb7\036" +
    "\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7" +
    "\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\043\052\uffb7\053" +
    "\uffb7\054\040\055\uffb7\060\046\061\051\062\050\063\037" +
    "\001\002\000\110\002\uffb6\004\uffb6\006\uffb6\007\uffb6\010" +
    "\uffb6\011\uffb6\012\uffb6\013\uffb6\017\uffb6\020\uffb6\023\uffb6" +
    "\024\uffb6\026\uffb6\030\uffb6\031\073\032\057\033\055\034" +
    "\071\035\065\036\054\037\066\040\074\041\062\042\072" +
    "\043\070\044\063\045\064\046\067\047\061\050\060\052" +
    "\uffb6\053\uffb6\054\056\055\uffb6\063\uffb6\001\002\000\110" +
    "\002\uffce\004\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012" +
    "\uffce\013\uffce\017\uffce\020\uffce\023\uffce\024\uffce\026\uffce" +
    "\030\uffce\031\073\032\057\033\055\034\071\035\065\036" +
    "\054\037\066\040\074\041\062\042\072\043\070\044\063" +
    "\045\064\046\067\047\061\050\060\052\uffce\053\uffce\054" +
    "\uffce\055\uffce\063\uffce\001\002\000\110\002\uffcd\004\uffcd" +
    "\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\017" +
    "\uffcd\020\uffcd\023\uffcd\024\uffcd\026\uffcd\030\uffcd\031\073" +
    "\032\057\033\055\034\071\035\065\036\054\037\066\040" +
    "\074\041\062\042\072\043\070\044\063\045\064\046\067" +
    "\047\061\050\060\052\uffcd\053\uffcd\054\uffcd\055\uffcd\063" +
    "\uffcd\001\002\000\110\002\uffcf\004\uffcf\006\uffcf\007\uffcf" +
    "\010\uffcf\011\uffcf\012\uffcf\013\uffcf\017\uffcf\020\uffcf\023" +
    "\uffcf\024\uffcf\026\uffcf\030\uffcf\031\073\032\057\033\055" +
    "\034\071\035\065\036\054\037\066\040\074\041\062\042" +
    "\072\043\070\044\063\045\064\046\067\047\061\050\060" +
    "\052\uffcf\053\uffcf\054\uffcf\055\uffcf\063\uffcf\001\002\000" +
    "\110\002\uffba\004\uffba\006\uffba\007\uffba\010\uffba\011\uffba" +
    "\012\uffba\013\uffba\017\uffba\020\uffba\023\uffba\024\uffba\026" +
    "\uffba\030\uffba\031\073\032\057\033\055\034\071\035\065" +
    "\036\054\037\066\040\074\041\062\042\072\043\070\044" +
    "\063\045\064\046\067\047\061\050\060\052\uffba\053\uffba" +
    "\054\uffba\055\uffba\063\uffba\001\002\000\110\002\uffb1\004" +
    "\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1" +
    "\017\uffb1\020\uffb1\023\uffb1\024\uffb1\026\uffb1\030\uffb1\031" +
    "\073\032\057\033\055\034\071\035\065\036\054\037\066" +
    "\040\074\041\062\042\072\043\070\044\063\045\064\046" +
    "\067\047\061\050\060\052\uffb1\053\uffb1\054\uffb1\055\uffb1" +
    "\063\uffb1\001\002\000\004\023\135\001\002\000\032\002" +
    "\uffea\004\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea" +
    "\013\uffea\017\uffea\020\uffea\024\uffea\063\uffea\001\002\000" +
    "\026\004\022\006\010\010\006\011\017\012\031\013\026" +
    "\017\016\020\023\024\137\063\021\001\002\000\026\004" +
    "\022\006\010\010\006\011\017\012\031\013\026\017\016" +
    "\020\023\024\141\063\021\001\002\000\034\002\uffd0\004" +
    "\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0" +
    "\013\uffd0\017\uffd0\020\uffd0\024\uffd0\063\uffd0\001\002\000" +
    "\032\002\uffff\004\uffff\006\uffff\007\uffff\010\uffff\011\uffff" +
    "\012\uffff\013\uffff\017\uffff\020\uffff\024\uffff\063\uffff\001" +
    "\002\000\034\002\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1" +
    "\010\uffd1\011\uffd1\012\uffd1\013\uffd1\017\uffd1\020\uffd1\024" +
    "\uffd1\063\uffd1\001\002\000\006\004\143\023\135\001\002" +
    "\000\004\027\145\001\002\000\032\002\uffd7\004\uffd7\006" +
    "\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\017\uffd7" +
    "\020\uffd7\024\uffd7\063\uffd7\001\002\000\034\014\036\015" +
    "\041\022\045\025\052\027\047\032\044\033\042\051\043" +
    "\054\040\060\046\061\051\062\050\063\037\001\002\000" +
    "\046\030\147\031\073\032\057\033\055\034\071\035\065" +
    "\036\054\037\066\040\074\041\062\042\072\043\070\044" +
    "\063\045\064\046\067\047\061\050\060\054\056\001\002" +
    "\000\004\023\135\001\002\000\034\002\uffd4\004\uffd4\005" +
    "\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4" +
    "\017\uffd4\020\uffd4\024\uffd4\063\uffd4\001\002\000\004\011" +
    "\152\001\002\000\004\027\153\001\002\000\034\014\036" +
    "\015\041\022\045\025\052\027\047\032\044\033\042\051" +
    "\043\054\040\060\046\061\051\062\050\063\037\001\002" +
    "\000\046\030\155\031\073\032\057\033\055\034\071\035" +
    "\065\036\054\037\066\040\074\041\062\042\072\043\070" +
    "\044\063\045\064\046\067\047\061\050\060\054\056\001" +
    "\002\000\034\002\uffe7\004\uffe7\006\uffe7\007\uffe7\010\uffe7" +
    "\011\uffe7\012\uffe7\013\uffe7\017\uffe7\020\uffe7\024\uffe7\053" +
    "\uffe7\063\uffe7\001\002\000\032\002\ufff1\004\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\017\ufff1\020" +
    "\ufff1\024\ufff1\063\ufff1\001\002\000\032\002\ufffc\004\ufffc" +
    "\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\017" +
    "\ufffc\020\ufffc\024\ufffc\063\ufffc\001\002\000\076\002\uffdc" +
    "\004\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013" +
    "\uffdc\017\uffdc\020\uffdc\024\uffdc\031\073\032\057\033\055" +
    "\034\071\035\065\036\054\037\066\040\074\041\062\042" +
    "\072\043\070\044\063\045\064\046\067\047\061\050\060" +
    "\053\uffdc\054\056\063\uffdc\001\002\000\034\014\036\015" +
    "\041\022\045\025\052\027\047\032\044\033\042\051\043" +
    "\054\040\060\046\061\051\062\050\063\037\001\002\000" +
    "\046\030\163\031\073\032\057\033\055\034\071\035\065" +
    "\036\054\037\066\040\074\041\062\042\072\043\070\044" +
    "\063\045\064\046\067\047\061\050\060\054\056\001\002" +
    "\000\004\023\135\001\002\000\034\002\uffd5\004\uffd5\005" +
    "\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5" +
    "\017\uffd5\020\uffd5\024\uffd5\063\uffd5\001\002\000\036\014" +
    "\036\015\041\022\045\025\052\027\047\030\207\032\044" +
    "\033\042\051\043\054\040\060\046\061\051\062\050\063" +
    "\037\001\002\000\044\031\205\032\057\033\055\034\071" +
    "\035\065\036\054\037\066\040\074\041\062\042\072\043" +
    "\070\044\063\045\064\046\067\047\061\050\060\054\056" +
    "\001\002\000\036\014\036\015\041\021\171\022\045\025" +
    "\052\027\170\032\044\033\042\051\043\054\040\060\046" +
    "\061\051\062\050\063\037\001\002\000\036\014\036\015" +
    "\041\022\045\025\052\027\047\030\202\032\044\033\042" +
    "\051\043\054\040\060\046\061\051\062\050\063\037\001" +
    "\002\000\034\014\036\015\041\022\045\025\052\027\175" +
    "\032\044\033\042\051\043\054\040\060\046\061\051\062" +
    "\050\063\037\001\002\000\100\002\uffd3\004\uffd3\006\uffd3" +
    "\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\017\uffd3\020" +
    "\uffd3\024\uffd3\031\073\032\057\033\055\034\071\035\065" +
    "\036\054\037\066\040\074\041\062\042\072\043\070\044" +
    "\063\045\064\046\067\047\061\050\060\053\uffd3\054\056" +
    "\055\173\063\uffd3\001\002\000\004\023\135\001\002\000" +
    "\032\002\uffeb\004\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb" +
    "\012\uffeb\013\uffeb\017\uffeb\020\uffeb\024\uffeb\063\uffeb\001" +
    "\002\000\036\014\036\015\041\022\045\025\052\027\047" +
    "\030\200\032\044\033\042\051\043\054\040\060\046\061" +
    "\051\062\050\063\037\001\002\000\046\023\135\031\073" +
    "\032\057\033\055\034\071\035\065\036\054\037\066\040" +
    "\074\041\062\042\072\043\070\044\063\045\064\046\067" +
    "\047\061\050\060\054\056\001\002\000\032\002\uffed\004" +
    "\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed" +
    "\017\uffed\020\uffed\024\uffed\063\uffed\001\002\000\004\023" +
    "\135\001\002\000\032\002\uffee\004\uffee\006\uffee\007\uffee" +
    "\010\uffee\011\uffee\012\uffee\013\uffee\017\uffee\020\uffee\024" +
    "\uffee\063\uffee\001\002\000\004\055\203\001\002\000\004" +
    "\023\135\001\002\000\032\002\uffec\004\uffec\006\uffec\007" +
    "\uffec\010\uffec\011\uffec\012\uffec\013\uffec\017\uffec\020\uffec" +
    "\024\uffec\063\uffec\001\002\000\034\014\036\015\041\022" +
    "\045\025\052\027\047\032\044\033\042\051\043\054\040" +
    "\060\046\061\051\062\050\063\037\001\002\000\076\002" +
    "\uffd2\004\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2" +
    "\013\uffd2\017\uffd2\020\uffd2\024\uffd2\031\uffbc\032\uffbc\033" +
    "\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc" +
    "\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050" +
    "\uffbc\053\uffd2\054\uffbc\063\uffd2\001\002\000\034\002\uffef" +
    "\004\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013" +
    "\uffef\017\uffef\020\uffef\024\uffef\053\uffef\063\uffef\001\002" +
    "\000\046\030\211\031\073\032\057\033\055\034\071\035" +
    "\065\036\054\037\066\040\074\041\062\042\072\043\070" +
    "\044\063\045\064\046\067\047\061\050\060\054\056\001" +
    "\002\000\120\002\ufff0\004\ufff0\006\ufff0\007\ufff0\010\ufff0" +
    "\011\ufff0\012\ufff0\013\ufff0\014\036\015\041\017\ufff0\020" +
    "\ufff0\022\045\024\ufff0\025\052\027\047\031\uffb7\032\044" +
    "\033\042\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041" +
    "\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7" +
    "\050\uffb7\051\043\053\ufff0\054\040\060\046\061\051\062" +
    "\050\063\037\001\002\000\032\002\ufff5\004\ufff5\006\ufff5" +
    "\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\017\ufff5\020" +
    "\ufff5\024\ufff5\063\ufff5\001\002\000\034\014\036\015\041" +
    "\022\045\025\052\027\047\032\044\033\042\051\043\054" +
    "\040\060\046\061\051\062\050\063\037\001\002\000\046" +
    "\030\215\031\073\032\057\033\055\034\071\035\065\036" +
    "\054\037\066\040\074\041\062\042\072\043\070\044\063" +
    "\045\064\046\067\047\061\050\060\054\056\001\002\000" +
    "\004\023\135\001\002\000\032\002\uffe8\004\uffe8\006\uffe8" +
    "\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\017\uffe8\020" +
    "\uffe8\024\uffe8\063\uffe8\001\002\000\032\002\ufff8\004\ufff8" +
    "\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\017" +
    "\ufff8\020\ufff8\024\ufff8\063\ufff8\001\002\000\004\002\001" +
    "\001\002\000\034\014\036\015\041\022\045\025\052\027" +
    "\047\032\044\033\042\051\043\054\040\060\046\061\051" +
    "\062\050\063\037\001\002\000\046\030\223\031\073\032" +
    "\057\033\055\034\071\035\065\036\054\037\066\040\074" +
    "\041\062\042\072\043\070\044\063\045\064\046\067\047" +
    "\061\050\060\054\056\001\002\000\004\023\224\001\002" +
    "\000\010\007\231\024\230\063\232\001\002\000\010\007" +
    "\uffe2\024\uffe2\063\uffe2\001\002\000\030\004\uffda\006\uffda" +
    "\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\017\uffda\020" +
    "\uffda\024\uffda\063\uffda\001\002\000\030\004\022\006\010" +
    "\007\231\010\006\011\017\012\031\013\026\017\016\020" +
    "\023\024\246\063\242\001\002\000\032\002\uffe3\004\uffe3" +
    "\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\017" +
    "\uffe3\020\uffe3\024\uffe3\063\uffe3\001\002\000\034\014\036" +
    "\015\041\022\045\025\052\027\047\032\044\033\042\051" +
    "\043\054\040\060\046\061\051\062\050\063\037\001\002" +
    "\000\004\052\243\001\002\000\010\007\231\024\236\063" +
    "\232\001\002\000\010\007\uffe1\024\uffe1\063\uffe1\001\002" +
    "\000\030\004\022\006\010\007\231\010\006\011\017\012" +
    "\031\013\026\017\016\020\023\024\241\063\242\001\002" +
    "\000\032\002\uffe5\004\uffe5\006\uffe5\007\uffe5\010\uffe5\011" +
    "\uffe5\012\uffe5\013\uffe5\017\uffe5\020\uffe5\024\uffe5\063\uffe5" +
    "\001\002\000\030\004\uffdb\006\uffdb\007\uffdb\010\uffdb\011" +
    "\uffdb\012\uffdb\013\uffdb\017\uffdb\020\uffdb\024\uffdb\063\uffdb" +
    "\001\002\000\030\004\022\006\010\007\uffe0\010\006\011" +
    "\017\012\031\013\026\017\016\020\023\024\uffe0\063\021" +
    "\001\002\000\032\002\uffe6\004\uffe6\006\uffe6\007\uffe6\010" +
    "\uffe6\011\uffe6\012\uffe6\013\uffe6\017\uffe6\020\uffe6\024\uffe6" +
    "\063\uffe6\001\002\000\040\014\036\015\041\022\045\025" +
    "\052\027\165\031\167\032\044\033\042\051\043\052\243" +
    "\054\040\060\046\061\051\062\050\063\037\001\002\000" +
    "\030\004\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8" +
    "\013\uffd8\017\uffd8\020\uffd8\024\uffd8\063\uffd8\001\002\000" +
    "\046\031\073\032\057\033\055\034\071\035\065\036\054" +
    "\037\066\040\074\041\062\042\072\043\070\044\063\045" +
    "\064\046\067\047\061\050\060\052\245\054\056\001\002" +
    "\000\030\004\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012" +
    "\uffd9\013\uffd9\017\uffd9\020\uffd9\024\uffd9\063\uffd9\001\002" +
    "\000\032\002\uffe4\004\uffe4\006\uffe4\007\uffe4\010\uffe4\011" +
    "\uffe4\012\uffe4\013\uffe4\017\uffe4\020\uffe4\024\uffe4\063\uffe4" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\034\002\010\003\006\004\011\006\023\007" +
    "\013\010\027\011\003\016\026\017\014\020\017\021\004" +
    "\022\012\024\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\004\137\006\023\007\013" +
    "\010\027\011\003\016\026\017\014\020\017\021\004\022" +
    "\012\024\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\165\001\001\000\002\001\001\000" +
    "\004\025\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\052\001\001\000" +
    "\002\001\001\000\004\025\131\001\001\000\004\025\130" +
    "\001\001\000\002\001\001\000\004\025\127\001\001\000" +
    "\004\025\126\001\001\000\004\025\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\117\001\001" +
    "\000\002\001\001\000\004\025\116\001\001\000\004\025" +
    "\115\001\001\000\004\025\114\001\001\000\004\025\113" +
    "\001\001\000\004\025\112\001\001\000\004\025\111\001" +
    "\001\000\004\025\110\001\001\000\004\025\107\001\001" +
    "\000\004\025\106\001\001\000\004\025\105\001\001\000" +
    "\004\025\104\001\001\000\004\025\101\001\001\000\004" +
    "\025\100\001\001\000\004\025\077\001\001\000\004\025" +
    "\076\001\001\000\004\025\075\001\001\000\004\025\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\133\001\001\000\002\001\001\000\032\003\135\004" +
    "\011\006\023\007\013\010\027\011\003\016\026\017\014" +
    "\020\017\021\004\022\012\024\024\001\001\000\030\004" +
    "\137\006\023\007\013\010\027\011\003\016\026\017\014" +
    "\020\017\021\004\022\012\024\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\145\001\001\000\002\001\001\000\004\005\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\161\001\001\000\002\001\001\000\004\005\163" +
    "\001\001\000\002\001\001\000\004\025\207\001\001\000" +
    "\002\001\001\000\004\025\171\001\001\000\004\025\122" +
    "\001\001\000\004\025\175\001\001\000\002\001\001\000" +
    "\004\005\173\001\001\000\002\001\001\000\004\025\122" +
    "\001\001\000\004\005\176\001\001\000\002\001\001\000" +
    "\004\005\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\203\001\001\000\002\001\001\000\004\025" +
    "\205\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\124\001\001\000\002\001\001\000" +
    "\004\025\213\001\001\000\002\001\001\000\004\005\215" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\221\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\232\013\224\014\226\015\225\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\003\237" +
    "\004\011\006\023\007\013\010\027\011\003\015\236\016" +
    "\026\017\014\020\017\021\004\022\012\024\024\001\001" +
    "\000\002\001\001\000\004\025\243\001\001\000\002\001" +
    "\001\000\010\013\233\014\234\015\225\001\001\000\002" +
    "\001\001\000\034\003\237\004\011\006\023\007\013\010" +
    "\027\011\003\015\236\016\026\017\014\020\017\021\004" +
    "\022\012\024\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\004\137\006\023\007\013\010\027\011\003" +
    "\016\026\017\014\020\017\021\004\022\012\024\024\001" +
    "\001\000\002\001\001\000\004\025\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo de acciones
  //Codigo visible
    
    //public ASTfs arbol;
    public ArrayList<ErrorE> errorSintactico = new ArrayList<>();
    
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int columna = s.right;
        int fila = s.left;
        
        System.out.println("!!!!!!!---- Error Sintactico Recuperado ----!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        String aux = "Error Sintactico Recuperado: " + "\t\tLexema: "+lexema + " \t\tFila: "+fila +" \t\tColumna: "+columna;
        errorSintactico.add(new ErrorE(aux));
    }

   
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int columna = s.right;
        int fila = s.left;
        
        System.err.println("Error caracter no esperado");
        System.err.println(s);
        System.out.println("!!!!!!! Error Sintactico, Panic Mode!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);  
        
        String aux1 = "Error Sintactico, Modo Panico: " + "\t\tLexema: "+lexema + " \t\tFila: "+fila +" \t\tColumna: "+columna;
        errorSintactico.add(new ErrorE(aux1));
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {

//Codigo de acciones
      

  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E ::= nulo 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E ::= falsee 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E ::= truee 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E ::= id E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E ::= id 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E ::= cadena 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E ::= ERdecimal 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E ::= ERnumero 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E ::= aparentesis E cparentesis E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= aparentesis E cparentesis 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E ::= acorchete E ccorchete E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E ::= acorchete E ccorchete 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E ::= coma E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E ::= E coma 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E ::= E igual E 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E ::= E coma E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E ::= E interrogacion E dospuntos E 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int vddleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int vddright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object vdd = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fakeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fakeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object fake = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E ::= E diferente E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E ::= E igualigual E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E ::= E menorigualq E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E ::= E mayorigualq E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E ::= E menorq E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E ::= E mayorq E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E ::= E modulo E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E ::= E potencia E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E ::= E division E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E ::= E por E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E ::= E resta E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E ::= E suma E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E ::= E and E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E ::= E or E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E ::= not E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E ::= suma E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E ::= resta E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BLOQUESENTENCIAS ::= allave cllave 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUESENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BLOQUESENTENCIAS ::= allave CUERPO cllave 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUESENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACIONES ::= id E igual E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACIONES ::= id igual E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IF_LISTA ::= IF_LISTA elsee iff aparentesis E cparentesis BLOQUESENTENCIAS 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF_LISTA",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IF_LISTA ::= iff aparentesis E cparentesis BLOQUESENTENCIAS 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF_LISTA",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IFSTATEMENT ::= IF_LISTA 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IFSTATEMENT",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IFSTATEMENT ::= IF_LISTA elsee BLOQUESENTENCIAS 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IFSTATEMENT",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SWITCHLABEL ::= id dospuntos 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHLABEL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SWITCHLABEL ::= casee E dospuntos 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHLABEL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SWITCHLABELS ::= SWITCHLABEL 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHLABELS",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SWITCHLABELS ::= SWITCHLABELS SWITCHLABEL 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHLABELS",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIATRANSFERENCIA ::= returnn E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIATRANSFERENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIATRANSFERENCIA ::= returnn 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIATRANSFERENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIATRANSFERENCIA ::= breakk 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIATRANSFERENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIATRANSFERENCIA ::= continuee 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIATRANSFERENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SWITCHBLOCKSTATEMENTGRO ::= SWITCHLABELS CUERPO 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHBLOCKSTATEMENTGRO",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SWITCHBLOCKSTATEMENTGROUPS ::= SWITCHBLOCKSTATEMENTGROUPS SWITCHBLOCKSTATEMENTGRO 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHBLOCKSTATEMENTGROUPS",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SWITCHBLOCKSTATEMENTGROUPS ::= SWITCHBLOCKSTATEMENTGRO 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHBLOCKSTATEMENTGROUPS",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SWITCHSTATEMENT ::= switchh aparentesis E cparentesis allave cllave 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHSTATEMENT",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SWITCHSTATEMENT ::= switchh aparentesis E cparentesis allave SWITCHLABELS cllave 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHSTATEMENT",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SWITCHSTATEMENT ::= switchh aparentesis E cparentesis allave SWITCHBLOCKSTATEMENTGROUPS cllave 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHSTATEMENT",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SWITCHSTATEMENT ::= switchh aparentesis E cparentesis allave SWITCHBLOCKSTATEMENTGROUPS SWITCHLABELS cllave 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHSTATEMENT",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DOWHILE ::= doo BLOQUESENTENCIAS whilee aparentesis E cparentesis 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DOWHILE",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // WHILEE ::= whilee aparentesis E cparentesis BLOQUESENTENCIAS 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILEE",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INICIALIZACION ::= id inn E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALIZACION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FORR ::= forr aparentesis INICIALIZACION cparentesis BLOQUESENTENCIAS 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FORR",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNCIONESMETODOS ::= id igual E flecha BLOQUESENTENCIAS 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESMETODOS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNCIONESMETODOS ::= id igual aparentesis cparentesis flecha BLOQUESENTENCIAS 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESMETODOS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNCIONESMETODOS ::= id igual functionn E BLOQUESENTENCIAS 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESMETODOS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNCIONESMETODOS ::= id igual functionn aparentesis cparentesis BLOQUESENTENCIAS 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESMETODOS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LLAMADASFUNCIONES ::= id aparentesis cparentesis 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADASFUNCIONES",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LLAMADASFUNCIONES ::= id aparentesis E cparentesis 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADASFUNCIONES",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= LLAMADASFUNCIONES puntoycoma 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= LLAMADASFUNCIONES 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= FUNCIONESMETODOS 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIATRANSFERENCIA 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIATRANSFERENCIA puntoycoma 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= FORR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= DOWHILE 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= DOWHILE puntoycoma 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= WHILEE 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SWITCHSTATEMENT 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= IFSTATEMENT 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= DECLARACIONES puntoycoma 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DECLARACIONES 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO ::= SENTENCIA 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CUERPO ::= CUERPO SENTENCIA 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= CUERPO 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

