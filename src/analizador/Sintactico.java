
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Feb 26 15:13:50 CST 2020
//----------------------------------------------------

package analizador;

import java.util.LinkedList;
import java.util.ArrayList;
import java_cup.runtime.*;
import Errores.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Feb 26 15:13:50 CST 2020
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\004\000\002\004\003\000\002\004\003\000\002" +
    "\004\004\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\004\000\002\022\007\000\002\023\005" +
    "\000\002\016\007\000\002\017\010\000\002\011\012\000" +
    "\002\011\011\000\002\011\011\000\002\011\010\000\002" +
    "\012\003\000\002\012\004\000\002\013\004\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\004" +
    "\000\002\014\004\000\002\014\003\000\002\015\005\000" +
    "\002\015\004\000\002\007\005\000\002\007\003\000\002" +
    "\010\007\000\002\010\011\000\002\006\005\000\002\006" +
    "\006\000\002\024\006\000\002\024\005\000\002\021\010" +
    "\000\002\021\007\000\002\021\010\000\002\021\007\000" +
    "\002\005\005\000\002\005\004\000\002\025\004\000\002" +
    "\025\004\000\002\025\004\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\007\000\002\025\005\000\002\025\005\000\002\025\004" +
    "\000\002\025\004\000\002\025\005\000\002\025\006\000" +
    "\002\025\005\000\002\025\006\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\250\000\024\004\020\006\007\010\005\011\015\012" +
    "\031\013\024\017\014\020\021\064\017\001\002\000\034" +
    "\002\ufff3\004\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\017\ufff3\020\ufff3\023\ufff3\025\ufff3\064\ufff3" +
    "\001\002\000\036\002\uffe4\004\uffe4\006\uffe4\007\uffe4\010" +
    "\uffe4\011\uffe4\012\uffe4\013\uffe4\017\uffe4\020\uffe4\023\uffe4" +
    "\025\uffe4\054\uffe4\064\uffe4\001\002\000\026\002\000\004" +
    "\020\006\007\010\005\011\015\012\031\013\024\017\014" +
    "\020\021\064\017\001\002\000\004\030\226\001\002\000" +
    "\004\002\225\001\002\000\034\002\ufffe\004\ufffe\006\ufffe" +
    "\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\017\ufffe\020" +
    "\ufffe\023\ufffe\025\ufffe\064\ufffe\001\002\000\034\002\ufff6" +
    "\004\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013" +
    "\ufff6\017\ufff6\020\ufff6\023\ufff6\025\ufff6\064\ufff6\001\002" +
    "\000\036\002\ufff7\004\ufff7\006\ufff7\007\ufff7\010\ufff7\011" +
    "\ufff7\012\ufff7\013\ufff7\017\ufff7\020\ufff7\023\ufff7\025\ufff7" +
    "\054\224\064\ufff7\001\002\000\036\002\uffe5\004\uffe5\006" +
    "\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\017\uffe5" +
    "\020\uffe5\023\uffe5\025\uffe5\054\uffe5\064\uffe5\001\002\000" +
    "\004\030\220\001\002\000\036\002\ufff4\004\ufff4\006\ufff4" +
    "\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\017\ufff4\020" +
    "\ufff4\023\ufff4\025\ufff4\054\217\064\ufff4\001\002\000\040" +
    "\014\036\015\041\022\046\023\044\026\053\030\172\032" +
    "\174\033\045\034\042\052\043\055\040\061\047\062\052" +
    "\063\051\064\037\001\002\000\004\030\166\001\002\000" +
    "\066\002\uffe3\004\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3" +
    "\012\uffe3\013\uffe3\014\036\015\041\017\uffe3\020\uffe3\022" +
    "\046\023\044\025\uffe3\026\053\030\050\033\045\034\042" +
    "\052\043\054\uffe3\055\040\061\047\062\052\063\051\064" +
    "\037\001\002\000\036\002\ufffd\004\ufffd\006\ufffd\007\ufffd" +
    "\010\ufffd\011\ufffd\012\ufffd\013\ufffd\017\ufffd\020\ufffd\023" +
    "\ufffd\025\ufffd\054\164\064\ufffd\001\002\000\036\002\ufff2" +
    "\004\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013" +
    "\ufff2\017\ufff2\020\ufff2\023\ufff2\025\ufff2\054\163\064\ufff2" +
    "\001\002\000\004\024\142\001\002\000\034\002\ufffa\004" +
    "\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa" +
    "\017\ufffa\020\ufffa\023\ufffa\025\ufffa\064\ufffa\001\002\000" +
    "\034\002\ufffb\004\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb" +
    "\012\ufffb\013\ufffb\017\ufffb\020\ufffb\023\ufffb\025\ufffb\064" +
    "\ufffb\001\002\000\034\002\ufff9\004\ufff9\006\ufff9\007\ufff9" +
    "\010\ufff9\011\ufff9\012\ufff9\013\ufff9\017\ufff9\020\ufff9\023" +
    "\ufff9\025\ufff9\064\ufff9\001\002\000\036\002\uffdc\004\uffdc" +
    "\005\147\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013" +
    "\uffdc\017\uffdc\020\uffdc\023\uffdc\025\uffdc\064\uffdc\001\002" +
    "\000\004\030\032\001\002\000\004\064\034\001\002\000" +
    "\004\031\140\001\002\000\004\016\035\001\002\000\036" +
    "\014\036\015\041\022\046\023\044\026\053\030\050\033" +
    "\045\034\042\052\043\055\040\061\047\062\052\063\051" +
    "\064\037\001\002\000\116\002\uffb2\004\uffb2\006\uffb2\007" +
    "\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\017\uffb2\020\uffb2" +
    "\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031" +
    "\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046" +
    "\uffb2\047\uffb2\050\uffb2\051\uffb2\053\uffb2\054\uffb2\055\uffb2" +
    "\056\uffb2\064\uffb2\001\002\000\134\002\uffae\004\uffae\006" +
    "\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014\036" +
    "\015\041\017\uffae\020\uffae\022\046\023\uffae\024\uffae\025" +
    "\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae" +
    "\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042" +
    "\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae" +
    "\051\uffae\052\043\053\uffae\054\uffae\055\uffae\056\uffae\061" +
    "\047\062\052\063\051\064\uffae\001\002\000\036\014\036" +
    "\015\041\022\046\023\044\026\053\030\050\033\045\034" +
    "\042\052\043\055\040\061\047\062\052\063\051\064\037" +
    "\001\002\000\116\002\uffb1\004\uffb1\006\uffb1\007\uffb1\010" +
    "\uffb1\011\uffb1\012\uffb1\013\uffb1\017\uffb1\020\uffb1\023\uffb1" +
    "\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032" +
    "\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1" +
    "\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047" +
    "\uffb1\050\uffb1\051\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1" +
    "\064\uffb1\001\002\000\036\014\036\015\041\022\046\023" +
    "\044\026\053\030\050\033\045\034\042\052\043\055\040" +
    "\061\047\062\052\063\051\064\037\001\002\000\036\014" +
    "\036\015\041\022\046\023\044\026\053\030\050\033\045" +
    "\034\042\052\043\055\040\061\047\062\052\063\051\064" +
    "\037\001\002\000\116\002\uffaf\004\uffaf\006\uffaf\007\uffaf" +
    "\010\uffaf\011\uffaf\012\uffaf\013\uffaf\017\uffaf\020\uffaf\023" +
    "\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf" +
    "\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040" +
    "\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf" +
    "\047\uffaf\050\uffaf\051\uffaf\053\uffaf\054\uffaf\055\uffaf\056" +
    "\uffaf\064\uffaf\001\002\000\036\014\036\015\041\022\046" +
    "\023\044\026\053\030\050\033\045\034\042\052\043\055" +
    "\040\061\047\062\052\063\051\064\037\001\002\000\116" +
    "\002\uffb0\004\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012" +
    "\uffb0\013\uffb0\017\uffb0\020\uffb0\023\uffb0\024\uffb0\025\uffb0" +
    "\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034" +
    "\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0" +
    "\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051" +
    "\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\064\uffb0\001\002" +
    "\000\116\002\uffb3\004\uffb3\006\uffb3\007\uffb3\010\uffb3\011" +
    "\uffb3\012\uffb3\013\uffb3\017\uffb3\020\uffb3\023\uffb3\024\uffb3" +
    "\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033" +
    "\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3" +
    "\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050" +
    "\uffb3\051\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\064\uffb3" +
    "\001\002\000\036\014\036\015\041\022\046\023\044\026" +
    "\053\030\050\033\045\034\042\052\043\055\040\061\047" +
    "\062\052\063\051\064\037\001\002\000\116\002\uffb4\004" +
    "\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4" +
    "\017\uffb4\020\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027" +
    "\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4" +
    "\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044" +
    "\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\053\uffb4" +
    "\054\uffb4\055\uffb4\056\uffb4\064\uffb4\001\002\000\116\002" +
    "\uffb5\004\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5" +
    "\013\uffb5\017\uffb5\020\uffb5\023\uffb5\024\uffb5\025\uffb5\026" +
    "\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5" +
    "\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043" +
    "\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5" +
    "\053\uffb5\054\uffb5\055\uffb5\056\uffb5\064\uffb5\001\002\000" +
    "\036\014\036\015\041\022\046\023\044\026\053\030\050" +
    "\033\045\034\042\052\043\055\040\061\047\062\052\063" +
    "\051\064\037\001\002\000\052\026\060\030\057\031\uffef" +
    "\032\065\033\075\034\064\035\062\036\066\037\067\040" +
    "\072\041\055\042\074\043\070\044\056\045\076\046\073" +
    "\047\071\050\077\051\063\055\061\001\002\000\036\014" +
    "\036\015\041\022\046\023\044\026\053\030\050\033\045" +
    "\034\042\052\043\055\040\061\047\062\052\063\051\064" +
    "\037\001\002\000\036\014\036\015\041\022\046\023\044" +
    "\026\053\030\050\033\045\034\042\052\043\055\040\061" +
    "\047\062\052\063\051\064\037\001\002\000\036\014\036" +
    "\015\041\022\046\023\044\026\053\030\050\033\045\034" +
    "\042\052\043\055\040\061\047\062\052\063\051\064\037" +
    "\001\002\000\036\014\036\015\041\022\046\023\044\026" +
    "\053\030\050\033\045\034\042\052\043\055\040\061\047" +
    "\062\052\063\051\064\037\001\002\000\134\002\uffbb\004" +
    "\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb" +
    "\014\036\015\041\017\uffbb\020\uffbb\022\046\023\uffbb\024" +
    "\uffbb\025\uffbb\026\053\027\uffbb\030\050\031\uffbb\032\uffbb" +
    "\033\045\034\042\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041" +
    "\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb" +
    "\050\uffbb\051\uffbb\052\043\053\uffbb\054\uffbb\055\uffbb\056" +
    "\uffbb\061\047\062\052\063\051\064\037\001\002\000\036" +
    "\014\036\015\041\022\046\023\044\026\053\030\050\033" +
    "\045\034\042\052\043\055\040\061\047\062\052\063\051" +
    "\064\037\001\002\000\036\014\036\015\041\022\046\023" +
    "\044\026\053\030\050\033\045\034\042\052\043\055\040" +
    "\061\047\062\052\063\051\064\037\001\002\000\036\014" +
    "\036\015\041\022\046\023\044\026\053\030\050\033\045" +
    "\034\042\052\043\055\040\061\047\062\052\063\051\064" +
    "\037\001\002\000\036\014\036\015\041\022\046\023\044" +
    "\026\053\030\050\033\045\034\042\052\043\055\040\061" +
    "\047\062\052\063\051\064\037\001\002\000\036\014\036" +
    "\015\041\022\046\023\044\026\053\030\050\033\045\034" +
    "\042\052\043\055\040\061\047\062\052\063\051\064\037" +
    "\001\002\000\036\014\036\015\041\022\046\023\044\026" +
    "\053\030\050\033\045\034\042\052\043\055\040\061\047" +
    "\062\052\063\051\064\037\001\002\000\036\014\036\015" +
    "\041\022\046\023\044\026\053\030\050\033\045\034\042" +
    "\052\043\055\040\061\047\062\052\063\051\064\037\001" +
    "\002\000\036\014\036\015\041\022\046\023\044\026\053" +
    "\030\050\033\045\034\042\052\043\055\040\061\047\062" +
    "\052\063\051\064\037\001\002\000\036\014\036\015\041" +
    "\022\046\023\044\026\053\030\050\033\045\034\042\052" +
    "\043\055\040\061\047\062\052\063\051\064\037\001\002" +
    "\000\036\014\036\015\041\022\046\023\044\026\053\030" +
    "\050\033\045\034\042\052\043\055\040\061\047\062\052" +
    "\063\051\064\037\001\002\000\036\014\036\015\041\022" +
    "\046\023\044\026\053\030\050\033\045\034\042\052\043" +
    "\055\040\061\047\062\052\063\051\064\037\001\002\000" +
    "\036\014\036\015\041\022\046\023\044\026\053\030\050" +
    "\033\045\034\042\052\043\055\040\061\047\062\052\063" +
    "\051\064\037\001\002\000\036\014\036\015\041\022\046" +
    "\023\044\026\053\030\050\033\045\034\042\052\043\055" +
    "\040\061\047\062\052\063\051\064\037\001\002\000\036" +
    "\014\036\015\041\022\046\023\044\026\053\030\050\033" +
    "\045\034\042\052\043\055\040\061\047\062\052\063\051" +
    "\064\037\001\002\000\116\002\uffcb\004\uffcb\006\uffcb\007" +
    "\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\017\uffcb\020\uffcb" +
    "\023\uffcb\024\uffcb\025\uffcb\026\060\027\uffcb\030\057\031" +
    "\uffcb\032\uffcb\033\075\034\064\035\062\036\066\037\067" +
    "\040\072\041\055\042\074\043\070\044\056\045\076\046" +
    "\073\047\uffcb\050\uffcb\051\uffcb\053\uffcb\054\uffcb\055\uffcb" +
    "\056\uffcb\064\uffcb\001\002\000\116\002\uffc0\004\uffc0\006" +
    "\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\017\uffc0" +
    "\020\uffc0\023\uffc0\024\uffc0\025\uffc0\026\060\027\uffc0\030" +
    "\057\031\uffc0\032\uffc0\033\075\034\064\035\062\036\066" +
    "\037\067\040\072\041\055\042\074\043\070\044\056\045" +
    "\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\053\uffc0\054\uffc0" +
    "\055\uffc0\056\uffc0\064\uffc0\001\002\000\116\002\uffca\004" +
    "\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca" +
    "\017\uffca\020\uffca\023\uffca\024\uffca\025\uffca\026\060\027" +
    "\uffca\030\057\031\uffca\032\uffca\033\uffca\034\uffca\035\062" +
    "\036\066\037\067\040\072\041\uffca\042\uffca\043\uffca\044" +
    "\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\053\uffca" +
    "\054\uffca\055\uffca\056\uffca\064\uffca\001\002\000\116\002" +
    "\uffc3\004\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3" +
    "\013\uffc3\017\uffc3\020\uffc3\023\uffc3\024\uffc3\025\uffc3\026" +
    "\060\027\uffc3\030\057\031\uffc3\032\uffc3\033\075\034\064" +
    "\035\062\036\066\037\067\040\072\041\uffc3\042\uffc3\043" +
    "\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3" +
    "\053\uffc3\054\uffc3\055\uffc3\056\uffc3\064\uffc3\001\002\000" +
    "\116\002\uffbf\004\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf" +
    "\012\uffbf\013\uffbf\017\uffbf\020\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\026\060\027\uffbf\030\057\031\uffbf\032\uffbf\033\075" +
    "\034\064\035\062\036\066\037\067\040\072\041\055\042" +
    "\074\043\070\044\056\045\uffbf\046\uffbf\047\uffbf\050\uffbf" +
    "\051\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\064\uffbf\001" +
    "\002\000\116\002\uffc5\004\uffc5\006\uffc5\007\uffc5\010\uffc5" +
    "\011\uffc5\012\uffc5\013\uffc5\017\uffc5\020\uffc5\023\uffc5\024" +
    "\uffc5\025\uffc5\026\060\027\uffc5\030\057\031\uffc5\032\uffc5" +
    "\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\067\040\uffc5\041" +
    "\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5" +
    "\050\uffc5\051\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\064" +
    "\uffc5\001\002\000\052\026\060\030\057\032\065\033\075" +
    "\034\064\035\062\036\066\037\067\040\072\041\055\042" +
    "\074\043\070\044\056\045\076\046\073\047\071\050\077" +
    "\051\063\053\107\055\061\001\002\000\036\014\036\015" +
    "\041\022\046\023\044\026\053\030\050\033\045\034\042" +
    "\052\043\055\040\061\047\062\052\063\051\064\037\001" +
    "\002\000\116\002\uffbe\004\uffbe\006\uffbe\007\uffbe\010\uffbe" +
    "\011\uffbe\012\uffbe\013\uffbe\017\uffbe\020\uffbe\023\uffbe\024" +
    "\uffbe\025\uffbe\026\060\027\uffbe\030\057\031\uffbe\032\uffbe" +
    "\033\075\034\064\035\062\036\066\037\067\040\072\041" +
    "\055\042\074\043\070\044\056\045\076\046\073\047\071" +
    "\050\077\051\063\053\uffbe\054\uffbe\055\uffbe\056\uffbe\064" +
    "\uffbe\001\002\000\116\002\uffc2\004\uffc2\006\uffc2\007\uffc2" +
    "\010\uffc2\011\uffc2\012\uffc2\013\uffc2\017\uffc2\020\uffc2\023" +
    "\uffc2\024\uffc2\025\uffc2\026\060\027\uffc2\030\057\031\uffc2" +
    "\032\uffc2\033\075\034\064\035\062\036\066\037\067\040" +
    "\072\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2" +
    "\047\uffc2\050\uffc2\051\uffc2\053\uffc2\054\uffc2\055\uffc2\056" +
    "\uffc2\064\uffc2\001\002\000\116\002\uffc6\004\uffc6\006\uffc6" +
    "\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\017\uffc6\020" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\026\060\027\uffc6\030\057" +
    "\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037" +
    "\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6" +
    "\046\uffc6\047\uffc6\050\uffc6\051\uffc6\053\uffc6\054\uffc6\055" +
    "\uffc6\056\uffc6\064\uffc6\001\002\000\116\002\uffc7\004\uffc7" +
    "\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\017" +
    "\uffc7\020\uffc7\023\uffc7\024\uffc7\025\uffc7\026\060\027\uffc7" +
    "\030\057\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036" +
    "\uffc7\037\067\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7" +
    "\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\053\uffc7\054" +
    "\uffc7\055\uffc7\056\uffc7\064\uffc7\001\002\000\116\002\uffbc" +
    "\004\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013" +
    "\uffbc\017\uffbc\020\uffbc\023\uffbc\024\uffbc\025\uffbc\026\060" +
    "\027\uffbc\030\057\031\uffbc\032\uffbc\033\075\034\064\035" +
    "\062\036\066\037\067\040\072\041\055\042\074\043\070" +
    "\044\056\045\076\046\073\047\071\050\077\051\063\053" +
    "\uffbc\054\uffbc\055\uffbc\056\uffbc\064\uffbc\001\002\000\116" +
    "\002\uffc9\004\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012" +
    "\uffc9\013\uffc9\017\uffc9\020\uffc9\023\uffc9\024\uffc9\025\uffc9" +
    "\026\060\027\uffc9\030\057\031\uffc9\032\uffc9\033\uffc9\034" +
    "\uffc9\035\062\036\066\037\067\040\072\041\uffc9\042\uffc9" +
    "\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051" +
    "\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\064\uffc9\001\002" +
    "\000\116\002\uffcc\004\uffcc\006\uffcc\007\uffcc\010\uffcc\011" +
    "\uffcc\012\uffcc\013\uffcc\017\uffcc\020\uffcc\023\uffcc\024\uffcc" +
    "\025\uffcc\026\060\027\uffcc\030\057\031\uffcc\032\uffcc\033" +
    "\075\034\064\035\062\036\066\037\067\040\072\041\055" +
    "\042\074\043\070\044\056\045\076\046\073\047\uffcc\050" +
    "\077\051\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\064\uffcc" +
    "\001\002\000\116\002\uffc8\004\uffc8\006\uffc8\007\uffc8\010" +
    "\uffc8\011\uffc8\012\uffc8\013\uffc8\017\uffc8\020\uffc8\023\uffc8" +
    "\024\uffc8\025\uffc8\026\060\027\uffc8\030\057\031\uffc8\032" +
    "\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\067\040\uffc8" +
    "\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047" +
    "\uffc8\050\uffc8\051\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8" +
    "\064\uffc8\001\002\000\116\002\uffbd\004\uffbd\006\uffbd\007" +
    "\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\017\uffbd\020\uffbd" +
    "\023\uffbd\024\uffbd\025\uffbd\026\060\027\uffbd\030\057\031" +
    "\uffbd\032\065\033\075\034\064\035\062\036\066\037\067" +
    "\040\072\041\055\042\074\043\070\044\056\045\076\046" +
    "\073\047\071\050\077\051\063\053\uffbd\054\uffbd\055\uffbd" +
    "\056\uffbd\064\uffbd\001\002\000\052\026\060\027\122\030" +
    "\057\032\065\033\075\034\064\035\062\036\066\037\067" +
    "\040\072\041\055\042\074\043\070\044\056\045\076\046" +
    "\073\047\071\050\077\051\063\055\061\001\002\000\116" +
    "\002\uffb8\004\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012" +
    "\uffb8\013\uffb8\017\uffb8\020\uffb8\023\uffb8\024\uffb8\025\uffb8" +
    "\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034" +
    "\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051" +
    "\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\064\uffb8\001\002" +
    "\000\052\026\060\030\057\031\124\032\065\033\075\034" +
    "\064\035\062\036\066\037\067\040\072\041\055\042\074" +
    "\043\070\044\056\045\076\046\073\047\071\050\077\051" +
    "\063\055\061\001\002\000\116\002\uffb6\004\uffb6\006\uffb6" +
    "\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\017\uffb6\020" +
    "\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6" +
    "\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037" +
    "\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6" +
    "\046\uffb6\047\uffb6\050\uffb6\051\uffb6\053\uffb6\054\uffb6\055" +
    "\uffb6\056\uffb6\064\uffb6\001\002\000\116\002\uffc1\004\uffc1" +
    "\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\017" +
    "\uffc1\020\uffc1\023\uffc1\024\uffc1\025\uffc1\026\060\027\uffc1" +
    "\030\057\031\uffc1\032\uffc1\033\075\034\064\035\062\036" +
    "\066\037\067\040\072\041\uffc1\042\uffc1\043\uffc1\044\uffc1" +
    "\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\053\uffc1\054" +
    "\uffc1\055\uffc1\056\uffc1\064\uffc1\001\002\000\116\002\uffc4" +
    "\004\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013" +
    "\uffc4\017\uffc4\020\uffc4\023\uffc4\024\uffc4\025\uffc4\026\060" +
    "\027\uffc4\030\057\031\uffc4\032\uffc4\033\075\034\064\035" +
    "\062\036\066\037\067\040\072\041\uffc4\042\uffc4\043\uffc4" +
    "\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\053" +
    "\uffc4\054\uffc4\055\uffc4\056\uffc4\064\uffc4\001\002\000\052" +
    "\026\060\027\130\030\057\032\065\033\075\034\064\035" +
    "\062\036\066\037\067\040\072\041\055\042\074\043\070" +
    "\044\056\045\076\046\073\047\071\050\077\051\063\055" +
    "\061\001\002\000\116\002\uffb9\004\uffb9\006\uffb9\007\uffb9" +
    "\010\uffb9\011\uffb9\012\uffb9\013\uffb9\017\uffb9\020\uffb9\023" +
    "\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9" +
    "\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040" +
    "\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9" +
    "\047\uffb9\050\uffb9\051\uffb9\053\uffb9\054\uffb9\055\uffb9\056" +
    "\uffb9\064\uffb9\001\002\000\052\026\060\030\057\031\132" +
    "\032\065\033\075\034\064\035\062\036\066\037\067\040" +
    "\072\041\055\042\074\043\070\044\056\045\076\046\073" +
    "\047\071\050\077\051\063\055\061\001\002\000\116\002" +
    "\uffb7\004\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7" +
    "\013\uffb7\017\uffb7\020\uffb7\023\uffb7\024\uffb7\025\uffb7\026" +
    "\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7" +
    "\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043" +
    "\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7" +
    "\053\uffb7\054\uffb7\055\uffb7\056\uffb7\064\uffb7\001\002\000" +
    "\116\002\uffce\004\uffce\006\uffce\007\uffce\010\uffce\011\uffce" +
    "\012\uffce\013\uffce\017\uffce\020\uffce\023\uffce\024\uffce\025" +
    "\uffce\026\060\027\uffce\030\057\031\uffce\032\uffce\033\uffce" +
    "\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042" +
    "\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce" +
    "\051\uffce\053\uffce\054\uffce\055\uffce\056\uffce\064\uffce\001" +
    "\002\000\116\002\uffcd\004\uffcd\006\uffcd\007\uffcd\010\uffcd" +
    "\011\uffcd\012\uffcd\013\uffcd\017\uffcd\020\uffcd\023\uffcd\024" +
    "\uffcd\025\uffcd\026\060\027\uffcd\030\057\031\uffcd\032\uffcd" +
    "\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041" +
    "\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd" +
    "\050\uffcd\051\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\064" +
    "\uffcd\001\002\000\116\002\uffcf\004\uffcf\006\uffcf\007\uffcf" +
    "\010\uffcf\011\uffcf\012\uffcf\013\uffcf\017\uffcf\020\uffcf\023" +
    "\uffcf\024\uffcf\025\uffcf\026\060\027\uffcf\030\057\031\uffcf" +
    "\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040" +
    "\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf" +
    "\047\uffcf\050\uffcf\051\uffcf\053\uffcf\054\uffcf\055\uffcf\056" +
    "\uffcf\064\uffcf\001\002\000\116\002\uffba\004\uffba\006\uffba" +
    "\007\uffba\010\uffba\011\uffba\012\uffba\013\uffba\017\uffba\020" +
    "\uffba\023\uffba\024\uffba\025\uffba\026\060\027\uffba\030\057" +
    "\031\uffba\032\065\033\075\034\064\035\062\036\066\037" +
    "\067\040\072\041\055\042\074\043\070\044\056\045\076" +
    "\046\073\047\071\050\077\051\063\053\uffba\054\uffba\055" +
    "\uffba\056\uffba\064\uffba\001\002\000\116\002\uffad\004\uffad" +
    "\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad\017" +
    "\uffad\020\uffad\023\uffad\024\uffad\025\uffad\026\uffad\027\uffad" +
    "\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036" +
    "\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad" +
    "\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad\053\uffad\054" +
    "\uffad\055\uffad\056\uffad\064\uffad\001\002\000\004\024\142" +
    "\001\002\000\034\002\ufff0\004\ufff0\006\ufff0\007\ufff0\010" +
    "\ufff0\011\ufff0\012\ufff0\013\ufff0\017\ufff0\020\ufff0\023\ufff0" +
    "\025\ufff0\064\ufff0\001\002\000\026\004\020\006\007\010" +
    "\005\011\015\012\031\013\024\017\014\020\021\025\144" +
    "\064\017\001\002\000\026\004\020\006\007\010\005\011" +
    "\015\012\031\013\024\017\014\020\021\025\146\064\017" +
    "\001\002\000\036\002\uffd0\004\uffd0\005\uffd0\006\uffd0\007" +
    "\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\017\uffd0\020\uffd0" +
    "\023\uffd0\025\uffd0\064\uffd0\001\002\000\034\002\uffff\004" +
    "\uffff\006\uffff\007\uffff\010\uffff\011\uffff\012\uffff\013\uffff" +
    "\017\uffff\020\uffff\023\uffff\025\uffff\064\uffff\001\002\000" +
    "\036\002\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1" +
    "\011\uffd1\012\uffd1\013\uffd1\017\uffd1\020\uffd1\023\uffd1\025" +
    "\uffd1\064\uffd1\001\002\000\006\004\150\024\142\001\002" +
    "\000\004\030\152\001\002\000\034\002\uffdd\004\uffdd\006" +
    "\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\017\uffdd" +
    "\020\uffdd\023\uffdd\025\uffdd\064\uffdd\001\002\000\036\014" +
    "\036\015\041\022\046\023\044\026\053\030\050\033\045" +
    "\034\042\052\043\055\040\061\047\062\052\063\051\064" +
    "\037\001\002\000\052\026\060\030\057\031\154\032\065" +
    "\033\075\034\064\035\062\036\066\037\067\040\072\041" +
    "\055\042\074\043\070\044\056\045\076\046\073\047\071" +
    "\050\077\051\063\055\061\001\002\000\004\024\142\001" +
    "\002\000\036\002\uffda\004\uffda\005\uffda\006\uffda\007\uffda" +
    "\010\uffda\011\uffda\012\uffda\013\uffda\017\uffda\020\uffda\023" +
    "\uffda\025\uffda\064\uffda\001\002\000\004\011\157\001\002" +
    "\000\004\030\160\001\002\000\036\014\036\015\041\022" +
    "\046\023\044\026\053\030\050\033\045\034\042\052\043" +
    "\055\040\061\047\062\052\063\051\064\037\001\002\000" +
    "\052\026\060\030\057\031\162\032\065\033\075\034\064" +
    "\035\062\036\066\037\067\040\072\041\055\042\074\043" +
    "\070\044\056\045\076\046\073\047\071\050\077\051\063" +
    "\055\061\001\002\000\036\002\uffed\004\uffed\006\uffed\007" +
    "\uffed\010\uffed\011\uffed\012\uffed\013\uffed\017\uffed\020\uffed" +
    "\023\uffed\025\uffed\054\uffed\064\uffed\001\002\000\034\002" +
    "\ufff1\004\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1" +
    "\013\ufff1\017\ufff1\020\ufff1\023\ufff1\025\ufff1\064\ufff1\001" +
    "\002\000\034\002\ufffc\004\ufffc\006\ufffc\007\ufffc\010\ufffc" +
    "\011\ufffc\012\ufffc\013\ufffc\017\ufffc\020\ufffc\023\ufffc\025" +
    "\ufffc\064\ufffc\001\002\000\104\002\uffe2\004\uffe2\006\uffe2" +
    "\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\017\uffe2\020" +
    "\uffe2\023\uffe2\025\uffe2\026\060\030\057\032\065\033\075" +
    "\034\064\035\062\036\066\037\067\040\072\041\055\042" +
    "\074\043\070\044\056\045\076\046\073\047\071\050\077" +
    "\051\063\054\uffe2\055\061\064\uffe2\001\002\000\036\014" +
    "\036\015\041\022\046\023\044\026\053\030\050\033\045" +
    "\034\042\052\043\055\040\061\047\062\052\063\051\064" +
    "\037\001\002\000\052\026\060\030\057\031\170\032\065" +
    "\033\075\034\064\035\062\036\066\037\067\040\072\041" +
    "\055\042\074\043\070\044\056\045\076\046\073\047\071" +
    "\050\077\051\063\055\061\001\002\000\004\024\142\001" +
    "\002\000\036\002\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb" +
    "\010\uffdb\011\uffdb\012\uffdb\013\uffdb\017\uffdb\020\uffdb\023" +
    "\uffdb\025\uffdb\064\uffdb\001\002\000\040\014\036\015\041" +
    "\022\046\023\044\026\053\030\050\031\214\033\045\034" +
    "\042\052\043\055\040\061\047\062\052\063\051\064\037" +
    "\001\002\000\050\026\060\030\057\032\212\033\075\034" +
    "\064\035\062\036\066\037\067\040\072\041\055\042\074" +
    "\043\070\044\056\045\076\046\073\047\071\050\077\051" +
    "\063\055\061\001\002\000\040\014\036\015\041\021\175" +
    "\022\046\023\044\026\053\030\176\033\045\034\042\052" +
    "\043\055\040\061\047\062\052\063\051\064\037\001\002" +
    "\000\036\014\036\015\041\022\046\023\044\026\053\030" +
    "\205\033\045\034\042\052\043\055\040\061\047\062\052" +
    "\063\051\064\037\001\002\000\040\014\036\015\041\022" +
    "\046\023\044\026\053\030\050\031\202\033\045\034\042" +
    "\052\043\055\040\061\047\062\052\063\051\064\037\001" +
    "\002\000\106\002\uffd9\004\uffd9\006\uffd9\007\uffd9\010\uffd9" +
    "\011\uffd9\012\uffd9\013\uffd9\017\uffd9\020\uffd9\023\uffd9\025" +
    "\uffd9\026\060\030\057\032\065\033\075\034\064\035\062" +
    "\036\066\037\067\040\072\041\055\042\074\043\070\044" +
    "\056\045\076\046\073\047\071\050\077\051\063\054\uffd9" +
    "\055\061\056\200\064\uffd9\001\002\000\004\024\142\001" +
    "\002\000\034\002\uffd2\004\uffd2\006\uffd2\007\uffd2\010\uffd2" +
    "\011\uffd2\012\uffd2\013\uffd2\017\uffd2\020\uffd2\023\uffd2\025" +
    "\uffd2\064\uffd2\001\002\000\004\056\203\001\002\000\004" +
    "\024\142\001\002\000\034\002\uffd3\004\uffd3\006\uffd3\007" +
    "\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\017\uffd3\020\uffd3" +
    "\023\uffd3\025\uffd3\064\uffd3\001\002\000\040\014\036\015" +
    "\041\022\046\023\044\026\053\030\050\031\210\033\045" +
    "\034\042\052\043\055\040\061\047\062\052\063\051\064" +
    "\037\001\002\000\052\024\142\026\060\030\057\032\065" +
    "\033\075\034\064\035\062\036\066\037\067\040\072\041" +
    "\055\042\074\043\070\044\056\045\076\046\073\047\071" +
    "\050\077\051\063\055\061\001\002\000\034\002\uffd4\004" +
    "\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4" +
    "\017\uffd4\020\uffd4\023\uffd4\025\uffd4\064\uffd4\001\002\000" +
    "\004\024\142\001\002\000\034\002\uffd5\004\uffd5\006\uffd5" +
    "\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\017\uffd5\020" +
    "\uffd5\023\uffd5\025\uffd5\064\uffd5\001\002\000\036\014\036" +
    "\015\041\022\046\023\044\026\053\030\050\033\045\034" +
    "\042\052\043\055\040\061\047\062\052\063\051\064\037" +
    "\001\002\000\104\002\uffd8\004\uffd8\006\uffd8\007\uffd8\010" +
    "\uffd8\011\uffd8\012\uffd8\013\uffd8\017\uffd8\020\uffd8\023\uffd8" +
    "\025\uffd8\026\060\030\057\032\uffbc\033\075\034\064\035" +
    "\062\036\066\037\067\040\072\041\055\042\074\043\070" +
    "\044\056\045\076\046\073\047\071\050\077\051\063\054" +
    "\uffd8\055\uffbc\064\uffd8\001\002\000\036\002\uffd6\004\uffd6" +
    "\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\017" +
    "\uffd6\020\uffd6\023\uffd6\025\uffd6\054\uffd6\064\uffd6\001\002" +
    "\000\052\026\060\030\057\031\216\032\065\033\075\034" +
    "\064\035\062\036\066\037\067\040\072\041\055\042\074" +
    "\043\070\044\056\045\076\046\073\047\071\050\077\051" +
    "\063\055\061\001\002\000\104\002\uffd7\004\uffd7\006\uffd7" +
    "\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\017\uffd7\020" +
    "\uffd7\023\uffd7\025\uffd7\026\uffb7\030\uffb7\032\uffb7\033\uffb7" +
    "\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042" +
    "\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7" +
    "\051\uffb7\054\uffd7\055\uffb7\064\uffd7\001\002\000\034\002" +
    "\ufff5\004\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5" +
    "\013\ufff5\017\ufff5\020\ufff5\023\ufff5\025\ufff5\064\ufff5\001" +
    "\002\000\036\014\036\015\041\022\046\023\044\026\053" +
    "\030\050\033\045\034\042\052\043\055\040\061\047\062" +
    "\052\063\051\064\037\001\002\000\052\026\060\030\057" +
    "\031\222\032\065\033\075\034\064\035\062\036\066\037" +
    "\067\040\072\041\055\042\074\043\070\044\056\045\076" +
    "\046\073\047\071\050\077\051\063\055\061\001\002\000" +
    "\004\024\142\001\002\000\034\002\uffee\004\uffee\006\uffee" +
    "\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\017\uffee\020" +
    "\uffee\023\uffee\025\uffee\064\uffee\001\002\000\034\002\ufff8" +
    "\004\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013" +
    "\ufff8\017\ufff8\020\ufff8\023\ufff8\025\ufff8\064\ufff8\001\002" +
    "\000\004\002\001\001\002\000\036\014\036\015\041\022" +
    "\046\023\044\026\053\030\050\033\045\034\042\052\043" +
    "\055\040\061\047\062\052\063\051\064\037\001\002\000" +
    "\052\026\060\030\057\031\230\032\065\033\075\034\064" +
    "\035\062\036\066\037\067\040\072\041\055\042\074\043" +
    "\070\044\056\045\076\046\073\047\071\050\077\051\063" +
    "\055\061\001\002\000\004\024\231\001\002\000\010\007" +
    "\240\023\237\025\236\001\002\000\032\004\020\006\007" +
    "\007\240\010\005\011\015\012\031\013\024\017\014\020" +
    "\021\023\237\025\252\064\017\001\002\000\032\004\uffe0" +
    "\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\017" +
    "\uffe0\020\uffe0\023\uffe0\025\uffe0\064\uffe0\001\002\000\010" +
    "\007\uffe8\023\uffe8\025\uffe8\001\002\000\010\007\240\023" +
    "\237\025\246\001\002\000\034\002\uffe9\004\uffe9\006\uffe9" +
    "\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\017\uffe9\020" +
    "\uffe9\023\uffe9\025\uffe9\064\uffe9\001\002\000\004\053\243" +
    "\001\002\000\036\014\036\015\041\022\046\023\044\026" +
    "\053\030\050\033\045\034\042\052\043\055\040\061\047" +
    "\062\052\063\051\064\037\001\002\000\052\026\060\030" +
    "\057\032\065\033\075\034\064\035\062\036\066\037\067" +
    "\040\072\041\055\042\074\043\070\044\056\045\076\046" +
    "\073\047\071\050\077\051\063\053\242\055\061\001\002" +
    "\000\032\004\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012" +
    "\uffdf\013\uffdf\017\uffdf\020\uffdf\023\uffdf\025\uffdf\064\uffdf" +
    "\001\002\000\032\004\uffde\006\uffde\007\uffde\010\uffde\011" +
    "\uffde\012\uffde\013\uffde\017\uffde\020\uffde\023\uffde\025\uffde" +
    "\064\uffde\001\002\000\010\007\uffe7\023\uffe7\025\uffe7\001" +
    "\002\000\032\004\020\006\007\007\240\010\005\011\015" +
    "\012\031\013\024\017\014\020\021\023\237\025\251\064" +
    "\017\001\002\000\034\002\uffeb\004\uffeb\006\uffeb\007\uffeb" +
    "\010\uffeb\011\uffeb\012\uffeb\013\uffeb\017\uffeb\020\uffeb\023" +
    "\uffeb\025\uffeb\064\uffeb\001\002\000\032\004\020\006\007" +
    "\007\uffe6\010\005\011\015\012\031\013\024\017\014\020" +
    "\021\023\uffe6\025\uffe6\064\017\001\002\000\032\004\uffe1" +
    "\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\017" +
    "\uffe1\020\uffe1\023\uffe1\025\uffe1\064\uffe1\001\002\000\034" +
    "\002\uffec\004\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012" +
    "\uffec\013\uffec\017\uffec\020\uffec\023\uffec\025\uffec\064\uffec" +
    "\001\002\000\034\002\uffea\004\uffea\006\uffea\007\uffea\010" +
    "\uffea\011\uffea\012\uffea\013\uffea\017\uffea\020\uffea\023\uffea" +
    "\025\uffea\064\uffea\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\250\000\034\002\007\003\005\004\010\006\021\007" +
    "\025\010\027\011\024\016\026\017\012\020\015\021\003" +
    "\022\011\024\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\004\144\006\021\007\025\010\027\011\024" +
    "\016\026\017\012\020\015\021\003\022\011\024\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\172\001\001" +
    "\000\002\001\001\000\004\025\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\155\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\053\001\001\000" +
    "\002\001\001\000\004\025\136\001\001\000\004\025\135" +
    "\001\001\000\002\001\001\000\004\025\134\001\001\000" +
    "\004\025\133\001\001\000\002\001\001\000\004\025\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\126\001\001\000\002\001\001\000\004\025\125\001" +
    "\001\000\004\025\124\001\001\000\004\025\122\001\001" +
    "\000\004\025\120\001\001\000\004\025\117\001\001\000" +
    "\004\025\116\001\001\000\004\025\115\001\001\000\004" +
    "\025\114\001\001\000\004\025\113\001\001\000\004\025" +
    "\112\001\001\000\004\025\111\001\001\000\004\025\110" +
    "\001\001\000\004\025\105\001\001\000\004\025\104\001" +
    "\001\000\004\025\103\001\001\000\004\025\102\001\001" +
    "\000\004\025\101\001\001\000\004\025\100\001\001\000" +
    "\004\025\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\140\001\001\000\002" +
    "\001\001\000\032\003\142\004\010\006\021\007\025\010" +
    "\027\011\024\016\026\017\012\020\015\021\003\022\011" +
    "\024\022\001\001\000\030\004\144\006\021\007\025\010" +
    "\027\011\024\016\026\017\012\020\015\021\003\022\011" +
    "\024\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\152\001\001\000\002\001" +
    "\001\000\004\005\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\166\001\001\000" +
    "\002\001\001\000\004\005\170\001\001\000\002\001\001" +
    "\000\004\025\214\001\001\000\002\001\001\000\004\025" +
    "\176\001\001\000\004\025\205\001\001\000\004\025\130" +
    "\001\001\000\002\001\001\000\004\005\200\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\203\001\001" +
    "\000\002\001\001\000\004\025\130\001\001\000\004\005" +
    "\206\001\001\000\002\001\001\000\004\005\210\001\001" +
    "\000\002\001\001\000\004\025\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\220\001\001\000\002\001" +
    "\001\000\004\005\222\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\226\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\234\013\233" +
    "\014\231\015\232\001\001\000\034\003\246\004\010\006" +
    "\021\007\025\010\027\011\024\015\247\016\026\017\012" +
    "\020\015\021\003\022\011\024\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\243\014\244\015\232" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\240\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\003\246\004\010\006" +
    "\021\007\025\010\027\011\024\015\247\016\026\017\012" +
    "\020\015\021\003\022\011\024\022\001\001\000\002\001" +
    "\001\000\030\004\144\006\021\007\025\010\027\011\024" +
    "\016\026\017\012\020\015\021\003\022\011\024\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo de acciones
  //Codigo visible
    
    //public ASTfs arbol;
    public ArrayList<ErrorE> errorSintactico = new ArrayList<>();
    
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int columna = s.right;
        int fila = s.left;
        
        System.out.println("!!!!!!!---- Error Sintactico Recuperado ----!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        String aux = "Error Sintactico Recuperado: " + "\t\tLexema: "+lexema + " \t\tFila: "+fila +" \t\tColumna: "+columna;
        errorSintactico.add(new ErrorE(aux));
    }

   
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int columna = s.right;
        int fila = s.left;
        
        System.err.println("Error caracter no esperado");
        System.err.println(s);
        System.out.println("!!!!!!! Error Sintactico, Panic Mode!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);  
        
        String aux1 = "Error Sintactico, Modo Panico: " + "\t\tLexema: "+lexema + " \t\tFila: "+fila +" \t\tColumna: "+columna;
        errorSintactico.add(new ErrorE(aux1));
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {

//Codigo de acciones
      

  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E ::= id E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E ::= id 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E ::= defaultt 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E ::= nulo 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E ::= falsee 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E ::= truee 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E ::= cadena 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E ::= ERdecimal 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E ::= ERnumero 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E ::= E aparentesis E cparentesis 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= aparentesis E cparentesis 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E ::= E acorchete E ccorchete 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E ::= acorchete E ccorchete 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E ::= coma E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E ::= E coma 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E ::= E igual E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E ::= E coma E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E ::= E interrogacion E dospuntos E 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int vddleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int vddright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object vdd = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fakeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fakeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object fake = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E ::= E diferente E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E ::= E igualigual E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E ::= E menorigualq E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E ::= E mayorigualq E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E ::= E menorq E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E ::= E mayorq E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E ::= E modulo E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E ::= E potencia E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E ::= E division E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E ::= E por E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E ::= E resta E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E ::= E suma E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E ::= E and E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E ::= E or E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E ::= not E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E ::= suma E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E ::= resta E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BLOQUESENTENCIAS ::= allave cllave 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUESENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BLOQUESENTENCIAS ::= allave CUERPO cllave 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUESENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FUNCIONESMETODOS ::= id igual E flecha BLOQUESENTENCIAS 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESMETODOS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FUNCIONESMETODOS ::= id igual aparentesis cparentesis flecha BLOQUESENTENCIAS 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESMETODOS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FUNCIONESMETODOS ::= id igual functionn E BLOQUESENTENCIAS 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESMETODOS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FUNCIONESMETODOS ::= id igual functionn aparentesis cparentesis BLOQUESENTENCIAS 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESMETODOS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LLAMADASFUNCIONES ::= id aparentesis cparentesis 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADASFUNCIONES",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LLAMADASFUNCIONES ::= id aparentesis E cparentesis 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADASFUNCIONES",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACIONES ::= id E igual E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACIONES ::= id igual E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IF_LISTA ::= IF_LISTA elsee iff aparentesis E cparentesis BLOQUESENTENCIAS 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF_LISTA",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IF_LISTA ::= iff aparentesis E cparentesis BLOQUESENTENCIAS 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF_LISTA",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IFSSS ::= IF_LISTA 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IFSSS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IFSSS ::= IF_LISTA elsee BLOQUESENTENCIAS 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IFSSS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SWITCHCASEDEFAULT ::= defaultt dospuntos 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHCASEDEFAULT",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SWITCHCASEDEFAULT ::= casee E dospuntos 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHCASEDEFAULT",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SWITCHCASEDEFAULTS ::= SWITCHCASEDEFAULT 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHCASEDEFAULTS",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SWITCHCASEDEFAULTS ::= SWITCHCASEDEFAULTS SWITCHCASEDEFAULT 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHCASEDEFAULTS",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIATRANSFERENCIA ::= returnn E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIATRANSFERENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIATRANSFERENCIA ::= returnn 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIATRANSFERENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIATRANSFERENCIA ::= breakk 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIATRANSFERENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIATRANSFERENCIA ::= continuee 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIATRANSFERENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SWITCHBLOQUES ::= SWITCHCASEDEFAULTS CUERPO 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHBLOQUES",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SWITCHBLOQUESUPS ::= SWITCHBLOQUESUPS SWITCHBLOQUES 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHBLOQUESUPS",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SWITCHBLOQUESUPS ::= SWITCHBLOQUES 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHBLOQUESUPS",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SWITCHH ::= switchh aparentesis E cparentesis allave cllave 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHH",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SWITCHH ::= switchh aparentesis E cparentesis allave SWITCHCASEDEFAULTS cllave 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHH",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SWITCHH ::= switchh aparentesis E cparentesis allave SWITCHBLOQUESUPS cllave 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHH",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SWITCHH ::= switchh aparentesis E cparentesis allave SWITCHBLOQUESUPS SWITCHCASEDEFAULTS cllave 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHH",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DOWHILE ::= doo BLOQUESENTENCIAS whilee aparentesis E cparentesis 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DOWHILE",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // WHILEE ::= whilee aparentesis E cparentesis BLOQUESENTENCIAS 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILEE",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INICIALIZACION ::= id inn E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALIZACION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FORR ::= forr aparentesis INICIALIZACION cparentesis BLOQUESENTENCIAS 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FORR",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= LLAMADASFUNCIONES puntoycoma 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= LLAMADASFUNCIONES 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= FUNCIONESMETODOS 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIATRANSFERENCIA 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIATRANSFERENCIA puntoycoma 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= FORR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= DOWHILE 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= DOWHILE puntoycoma 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= WHILEE 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SWITCHH 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= IFSSS 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= DECLARACIONES puntoycoma 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DECLARACIONES 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO ::= SENTENCIA 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CUERPO ::= CUERPO SENTENCIA 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= CUERPO 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

