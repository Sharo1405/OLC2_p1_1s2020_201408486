
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Feb 19 17:14:43 CST 2020
//----------------------------------------------------

package analizador;

import java.util.LinkedList;
import java.util.ArrayList;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Feb 19 17:14:43 CST 2020
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\004" +
    "\000\002\004\003\000\002\004\004\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\004\000\002" +
    "\004\003\000\002\004\003\000\002\004\004\000\002\004" +
    "\003\000\002\004\003\000\002\004\004\000\002\004\003" +
    "\000\002\004\004\000\002\004\003\000\002\004\003\000" +
    "\002\032\004\000\002\032\004\000\002\032\004\000\002" +
    "\032\004\000\002\031\006\000\002\027\006\000\002\027" +
    "\005\000\002\026\004\000\002\026\004\000\002\026\004" +
    "\000\002\026\004\000\002\026\004\000\002\026\004\000" +
    "\002\026\004\000\002\026\004\000\002\026\004\000\002" +
    "\026\004\000\002\026\004\000\002\026\004\000\002\026" +
    "\004\000\002\026\004\000\002\025\006\000\002\024\006" +
    "\000\002\024\005\000\002\021\007\000\002\021\007\000" +
    "\002\022\007\000\002\023\005\000\002\016\007\000\002" +
    "\017\010\000\002\011\012\000\002\011\011\000\002\011" +
    "\011\000\002\011\010\000\002\012\003\000\002\012\004" +
    "\000\002\013\004\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\004\000\002\014\004\000\002" +
    "\014\003\000\002\015\005\000\002\015\004\000\002\007" +
    "\005\000\002\007\003\000\002\010\007\000\002\010\011" +
    "\000\002\006\005\000\002\005\005\000\002\030\004\000" +
    "\002\030\004\000\002\030\004\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\007\000\002\030\005\000\002\030\004\000\002\030" +
    "\004\000\002\030\005\000\002\030\006\000\002\030\005" +
    "\000\002\030\006\000\002\030\003\000\002\030\004\000" +
    "\002\030\004\000\002\030\004\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\322\000\072\004\036\006\010\010\040\012\037\013" +
    "\054\014\041\015\004\021\053\022\032\024\057\026\026" +
    "\027\012\030\006\032\035\033\024\034\034\035\033\036" +
    "\025\037\055\040\007\041\027\042\052\043\017\046\044" +
    "\047\014\050\005\051\050\111\042\001\002\000\004\052" +
    "\213\001\002\000\074\016\072\017\066\024\057\025\101" +
    "\026\026\027\012\030\006\031\067\032\035\033\024\034" +
    "\034\035\033\036\025\037\055\040\007\041\027\042\052" +
    "\043\017\044\071\045\076\054\063\056\061\061\100\062" +
    "\070\100\062\103\064\107\077\110\065\111\075\001\002" +
    "\000\074\016\072\017\066\024\057\025\101\026\026\027" +
    "\012\030\006\031\067\032\035\033\024\034\034\035\033" +
    "\036\025\037\055\040\007\041\027\042\052\043\017\044" +
    "\071\045\076\054\063\056\061\061\100\062\070\100\062" +
    "\103\064\107\077\110\065\111\075\001\002\000\074\016" +
    "\072\017\066\024\057\025\101\026\026\027\012\030\006" +
    "\031\067\032\035\033\024\034\034\035\033\036\025\037" +
    "\055\040\007\041\027\042\052\043\017\044\071\045\076" +
    "\054\063\056\061\061\100\062\070\100\062\103\064\107" +
    "\077\110\065\111\075\001\002\000\004\056\270\001\002" +
    "\000\004\002\267\001\002\000\074\016\072\017\066\024" +
    "\057\025\101\026\026\027\012\030\006\031\067\032\035" +
    "\033\024\034\034\035\033\036\025\037\055\040\007\041" +
    "\027\042\052\043\017\044\071\045\076\054\063\056\061" +
    "\061\100\062\070\100\062\103\064\107\077\110\065\111" +
    "\075\001\002\000\102\002\ufff7\004\ufff7\006\ufff7\007\ufff7" +
    "\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\021" +
    "\ufff7\022\ufff7\024\ufff7\026\ufff7\027\ufff7\030\ufff7\032\ufff7" +
    "\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041" +
    "\ufff7\042\ufff7\043\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7" +
    "\053\ufff7\111\ufff7\001\002\000\074\016\072\017\066\024" +
    "\057\025\101\026\026\027\012\030\006\031\067\032\035" +
    "\033\024\034\034\035\033\036\025\037\055\040\007\041" +
    "\027\042\052\043\017\044\071\045\076\054\063\056\061" +
    "\061\100\062\070\100\062\103\064\107\077\110\065\111" +
    "\075\001\002\000\104\002\uffef\004\uffef\006\uffef\007\uffef" +
    "\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\021" +
    "\uffef\022\uffef\024\uffef\026\uffef\027\uffef\030\uffef\032\uffef" +
    "\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041" +
    "\uffef\042\uffef\043\uffef\046\uffef\047\uffef\050\uffef\051\uffef" +
    "\053\uffef\102\264\111\uffef\001\002\000\004\102\263\001" +
    "\002\000\074\016\072\017\066\024\057\025\101\026\026" +
    "\027\012\030\006\031\067\032\035\033\024\034\034\035" +
    "\033\036\025\037\055\040\007\041\027\042\052\043\017" +
    "\044\071\045\076\054\063\056\061\061\100\062\070\100" +
    "\062\103\064\107\077\110\065\111\075\001\002\000\102" +
    "\002\ufffe\004\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012" +
    "\ufffe\013\ufffe\014\ufffe\015\ufffe\021\ufffe\022\ufffe\024\ufffe" +
    "\026\ufffe\027\ufffe\030\ufffe\032\ufffe\033\ufffe\034\ufffe\035" +
    "\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe" +
    "\046\ufffe\047\ufffe\050\ufffe\051\ufffe\053\ufffe\111\ufffe\001" +
    "\002\000\074\002\000\004\036\006\010\010\040\012\037" +
    "\013\054\014\041\015\004\021\053\022\032\024\057\026" +
    "\026\027\012\030\006\032\035\033\024\034\034\035\033" +
    "\036\025\037\055\040\007\041\027\042\052\043\017\046" +
    "\044\047\014\050\005\051\050\111\042\001\002\000\102" +
    "\002\ufff9\004\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012" +
    "\ufff9\013\ufff9\014\ufff9\015\ufff9\021\ufff9\022\ufff9\024\ufff9" +
    "\026\ufff9\027\ufff9\030\ufff9\032\ufff9\033\ufff9\034\ufff9\035" +
    "\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9" +
    "\046\ufff9\047\ufff9\050\ufff9\051\ufff9\053\ufff9\111\ufff9\001" +
    "\002\000\102\002\uffec\004\uffec\006\uffec\007\uffec\010\uffec" +
    "\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\021\uffec\022" +
    "\uffec\024\uffec\026\uffec\027\uffec\030\uffec\032\uffec\033\uffec" +
    "\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec\042" +
    "\uffec\043\uffec\046\uffec\047\uffec\050\uffec\051\uffec\053\uffec" +
    "\111\uffec\001\002\000\074\016\072\017\066\024\057\025" +
    "\101\026\026\027\012\030\006\031\067\032\035\033\024" +
    "\034\034\035\033\036\025\037\055\040\007\041\027\042" +
    "\052\043\017\044\071\045\076\054\063\056\061\061\100" +
    "\062\070\100\062\103\064\107\077\110\065\111\075\001" +
    "\002\000\074\016\072\017\066\024\057\025\101\026\026" +
    "\027\012\030\006\031\067\032\035\033\024\034\034\035" +
    "\033\036\025\037\055\040\007\041\027\042\052\043\017" +
    "\044\071\045\076\054\063\056\061\061\100\062\070\100" +
    "\062\103\064\107\077\110\065\111\075\001\002\000\074" +
    "\016\072\017\066\024\057\025\101\026\026\027\012\030" +
    "\006\031\067\032\035\033\024\034\034\035\033\036\025" +
    "\037\055\040\007\041\027\042\052\043\017\044\071\045" +
    "\076\054\063\056\061\061\100\062\070\100\062\103\064" +
    "\107\077\110\065\111\075\001\002\000\074\016\072\017" +
    "\066\024\057\025\101\026\026\027\012\030\006\031\067" +
    "\032\035\033\024\034\034\035\033\036\025\037\055\040" +
    "\007\041\027\042\052\043\017\044\071\045\076\054\063" +
    "\056\061\061\100\062\070\100\062\103\064\107\077\110" +
    "\065\111\075\001\002\000\102\002\uffed\004\uffed\006\uffed" +
    "\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015" +
    "\uffed\021\uffed\022\uffed\024\uffed\026\uffed\027\uffed\030\uffed" +
    "\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040" +
    "\uffed\041\uffed\042\uffed\043\uffed\046\uffed\047\uffed\050\uffed" +
    "\051\uffed\053\uffed\111\uffed\001\002\000\104\002\uffbd\004" +
    "\uffbd\005\247\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd" +
    "\013\uffbd\014\uffbd\015\uffbd\021\uffbd\022\uffbd\024\uffbd\026" +
    "\uffbd\027\uffbd\030\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd" +
    "\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\046" +
    "\uffbd\047\uffbd\050\uffbd\051\uffbd\053\uffbd\111\uffbd\001\002" +
    "\000\076\016\072\017\066\024\057\025\101\026\026\027" +
    "\012\030\006\031\067\032\035\033\024\034\034\035\033" +
    "\036\025\037\055\040\007\041\027\042\052\043\017\044" +
    "\071\045\076\054\063\056\061\061\100\062\070\100\062" +
    "\102\uffc4\103\064\107\077\110\065\111\075\001\002\000" +
    "\074\016\072\017\066\024\057\025\101\026\026\027\012" +
    "\030\006\031\067\032\035\033\024\034\034\035\033\036" +
    "\025\037\055\040\007\041\027\042\052\043\017\044\071" +
    "\045\076\054\063\056\061\061\100\062\070\100\062\103" +
    "\064\107\077\110\065\111\075\001\002\000\074\016\072" +
    "\017\066\024\057\025\101\026\026\027\012\030\006\031" +
    "\067\032\035\033\024\034\034\035\033\036\025\037\055" +
    "\040\007\041\027\042\052\043\017\044\071\045\076\054" +
    "\063\056\061\061\100\062\070\100\062\103\064\107\077" +
    "\110\065\111\075\001\002\000\074\016\072\017\066\024" +
    "\057\025\101\026\026\027\012\030\006\031\067\032\035" +
    "\033\024\034\034\035\033\036\025\037\055\040\007\041" +
    "\027\042\052\043\017\044\071\045\076\054\063\056\061" +
    "\061\100\062\070\100\062\103\064\107\077\110\065\111" +
    "\075\001\002\000\004\056\237\001\002\000\004\056\233" +
    "\001\002\000\004\102\uffc5\001\002\000\004\056\224\001" +
    "\002\000\010\054\176\056\174\060\175\001\002\000\102" +
    "\002\ufff8\004\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012" +
    "\ufff8\013\ufff8\014\ufff8\015\ufff8\021\ufff8\022\ufff8\024\ufff8" +
    "\026\ufff8\027\ufff8\030\ufff8\032\ufff8\033\ufff8\034\ufff8\035" +
    "\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8" +
    "\046\ufff8\047\ufff8\050\ufff8\051\ufff8\053\ufff8\111\ufff8\001" +
    "\002\000\074\016\072\017\066\024\057\025\101\026\026" +
    "\027\012\030\006\031\067\032\035\033\024\034\034\035" +
    "\033\036\025\037\055\040\007\041\027\042\052\043\017" +
    "\044\071\045\076\054\063\056\061\061\100\062\070\100" +
    "\062\103\064\107\077\110\065\111\075\001\002\000\104" +
    "\002\ufff5\004\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012" +
    "\ufff5\013\ufff5\014\ufff5\015\ufff5\021\ufff5\022\ufff5\024\ufff5" +
    "\026\ufff5\027\ufff5\030\ufff5\032\ufff5\033\ufff5\034\ufff5\035" +
    "\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5" +
    "\046\ufff5\047\ufff5\050\ufff5\051\ufff5\053\ufff5\102\172\111" +
    "\ufff5\001\002\000\102\002\ufff2\004\ufff2\006\ufff2\007\ufff2" +
    "\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\021" +
    "\ufff2\022\ufff2\024\ufff2\026\ufff2\027\ufff2\030\ufff2\032\ufff2" +
    "\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041" +
    "\ufff2\042\ufff2\043\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2" +
    "\053\ufff2\111\ufff2\001\002\000\104\002\ufffd\004\ufffd\006" +
    "\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd" +
    "\015\ufffd\021\ufffd\022\ufffd\024\ufffd\026\ufffd\027\ufffd\030" +
    "\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd" +
    "\040\ufffd\041\ufffd\042\ufffd\043\ufffd\046\ufffd\047\ufffd\050" +
    "\ufffd\051\ufffd\053\ufffd\102\171\111\ufffd\001\002\000\074" +
    "\016\072\017\066\024\057\025\101\026\026\027\012\030" +
    "\006\031\067\032\035\033\024\034\034\035\033\036\025" +
    "\037\055\040\007\041\027\042\052\043\017\044\071\045" +
    "\076\054\063\056\061\061\100\062\070\100\062\103\064" +
    "\107\077\110\065\111\075\001\002\000\104\002\ufffb\004" +
    "\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb" +
    "\014\ufffb\015\ufffb\021\ufffb\022\ufffb\024\ufffb\026\ufffb\027" +
    "\ufffb\030\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb" +
    "\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\046\ufffb\047" +
    "\ufffb\050\ufffb\051\ufffb\053\ufffb\102\167\111\ufffb\001\002" +
    "\000\074\016\072\017\066\024\057\025\101\026\026\027" +
    "\012\030\006\031\067\032\035\033\024\034\034\035\033" +
    "\036\025\037\055\040\007\041\027\042\052\043\017\044" +
    "\071\045\076\054\063\056\061\061\100\062\070\100\062" +
    "\103\064\107\077\110\065\111\075\001\002\000\004\102" +
    "\uffc6\001\002\000\004\056\163\001\002\000\074\016\072" +
    "\017\066\024\057\025\101\026\026\027\012\030\006\031" +
    "\067\032\035\033\024\034\034\035\033\036\025\037\055" +
    "\040\007\041\027\042\052\043\017\044\071\045\076\054" +
    "\063\056\061\061\100\062\070\100\062\103\064\107\077" +
    "\110\065\111\075\001\002\000\104\002\ufff1\004\ufff1\006" +
    "\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1" +
    "\015\ufff1\021\ufff1\022\ufff1\024\ufff1\026\ufff1\027\ufff1\030" +
    "\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1" +
    "\040\ufff1\041\ufff1\042\ufff1\043\ufff1\046\ufff1\047\ufff1\050" +
    "\ufff1\051\ufff1\053\ufff1\102\161\111\ufff1\001\002\000\074" +
    "\016\072\017\066\024\057\025\101\026\026\027\012\030" +
    "\006\031\067\032\035\033\024\034\034\035\033\036\025" +
    "\037\055\040\007\041\027\042\052\043\017\044\071\045" +
    "\076\054\063\056\061\061\100\062\070\100\062\103\064" +
    "\107\077\110\065\111\075\001\002\000\102\002\ufff4\004" +
    "\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4" +
    "\014\ufff4\015\ufff4\021\ufff4\022\ufff4\024\ufff4\026\ufff4\027" +
    "\ufff4\030\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4" +
    "\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\046\ufff4\047" +
    "\ufff4\050\ufff4\051\ufff4\053\ufff4\111\ufff4\001\002\000\074" +
    "\016\072\017\066\024\057\025\101\026\026\027\012\030" +
    "\006\031\067\032\035\033\024\034\034\035\033\036\025" +
    "\037\055\040\007\041\027\042\052\043\017\044\071\045" +
    "\076\054\063\056\061\061\100\062\070\100\062\103\064" +
    "\107\077\110\065\111\075\001\002\000\074\016\072\017" +
    "\066\024\057\025\101\026\026\027\012\030\006\031\067" +
    "\032\035\033\024\034\034\035\033\036\025\037\055\040" +
    "\007\041\027\042\052\043\017\044\071\045\076\054\063" +
    "\056\061\061\100\062\070\100\062\103\064\107\077\110" +
    "\065\111\075\001\002\000\074\016\072\017\066\024\057" +
    "\025\101\026\026\027\012\030\006\031\067\032\035\033" +
    "\024\034\034\035\033\036\025\037\055\040\007\041\027" +
    "\042\052\043\017\044\071\045\076\054\063\056\061\061" +
    "\100\062\070\100\062\103\064\107\077\110\065\111\075" +
    "\001\002\000\074\016\072\017\066\024\057\025\101\026" +
    "\026\027\012\030\006\031\067\032\035\033\024\034\034" +
    "\035\033\036\025\037\055\040\007\041\027\042\052\043" +
    "\017\044\071\045\076\054\063\056\061\061\100\062\070" +
    "\100\062\103\064\107\077\110\065\111\075\001\002\000" +
    "\156\002\uff9a\004\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a" +
    "\012\uff9a\013\uff9a\014\uff9a\015\uff9a\021\uff9a\022\uff9a\024" +
    "\uff9a\026\uff9a\027\uff9a\030\uff9a\032\uff9a\033\uff9a\034\uff9a" +
    "\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043" +
    "\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a" +
    "\055\uff9a\057\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a\065" +
    "\uff9a\066\uff9a\067\uff9a\070\uff9a\071\uff9a\072\uff9a\073\uff9a" +
    "\074\uff9a\075\uff9a\076\uff9a\077\uff9a\101\uff9a\102\uff9a\103" +
    "\uff9a\104\uff9a\111\uff9a\001\002\000\156\002\uff97\004\uff97" +
    "\006\uff97\007\uff97\010\uff97\011\uff97\012\uff97\013\uff97\014" +
    "\uff97\015\uff97\021\uff97\022\uff97\024\uff97\026\uff97\027\uff97" +
    "\030\uff97\032\uff97\033\uff97\034\uff97\035\uff97\036\uff97\037" +
    "\uff97\040\uff97\041\uff97\042\uff97\043\uff97\046\uff97\047\uff97" +
    "\050\uff97\051\uff97\052\uff97\053\uff97\055\uff97\057\uff97\061" +
    "\uff97\062\uff97\063\uff97\064\uff97\065\uff97\066\uff97\067\uff97" +
    "\070\uff97\071\uff97\072\uff97\073\uff97\074\uff97\075\uff97\076" +
    "\uff97\077\uff97\101\uff97\102\uff97\103\uff97\104\uff97\111\uff97" +
    "\001\002\000\074\016\072\017\066\024\057\025\101\026" +
    "\026\027\012\030\006\031\067\032\035\033\024\034\034" +
    "\035\033\036\025\037\055\040\007\041\027\042\052\043" +
    "\017\044\071\045\076\054\063\056\061\061\100\062\070" +
    "\100\062\103\064\107\077\110\065\111\075\001\002\000" +
    "\074\016\072\017\066\024\057\025\101\026\026\027\012" +
    "\030\006\031\067\032\035\033\024\034\034\035\033\036" +
    "\025\037\055\040\007\041\027\042\052\043\017\044\071" +
    "\045\076\054\063\056\061\061\100\062\070\100\062\103" +
    "\064\107\077\110\065\111\075\001\002\000\156\002\uff96" +
    "\004\uff96\006\uff96\007\uff96\010\uff96\011\uff96\012\uff96\013" +
    "\uff96\014\uff96\015\uff96\021\uff96\022\uff96\024\uff96\026\uff96" +
    "\027\uff96\030\uff96\032\uff96\033\uff96\034\uff96\035\uff96\036" +
    "\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96\046\uff96" +
    "\047\uff96\050\uff96\051\uff96\052\uff96\053\uff96\055\uff96\057" +
    "\uff96\061\uff96\062\uff96\063\uff96\064\uff96\065\uff96\066\uff96" +
    "\067\uff96\070\uff96\071\uff96\072\uff96\073\uff96\074\uff96\075" +
    "\uff96\076\uff96\077\uff96\101\uff96\102\uff96\103\uff96\104\uff96" +
    "\111\uff96\001\002\000\156\002\uff98\004\uff98\006\uff98\007" +
    "\uff98\010\uff98\011\uff98\012\uff98\013\uff98\014\uff98\015\uff98" +
    "\021\uff98\022\uff98\024\uff98\026\uff98\027\uff98\030\uff98\032" +
    "\uff98\033\uff98\034\uff98\035\uff98\036\uff98\037\uff98\040\uff98" +
    "\041\uff98\042\uff98\043\uff98\046\uff98\047\uff98\050\uff98\051" +
    "\uff98\052\uff98\053\uff98\055\uff98\057\uff98\061\uff98\062\uff98" +
    "\063\uff98\064\uff98\065\uff98\066\uff98\067\uff98\070\uff98\071" +
    "\uff98\072\uff98\073\uff98\074\uff98\075\uff98\076\uff98\077\uff98" +
    "\101\uff98\102\uff98\103\uff98\104\uff98\111\uff98\001\002\000" +
    "\156\002\uff9f\004\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f" +
    "\012\uff9f\013\uff9f\014\uff9f\015\uff9f\021\uff9f\022\uff9f\024" +
    "\uff9f\026\uff9f\027\uff9f\030\uff9f\032\uff9f\033\uff9f\034\uff9f" +
    "\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043" +
    "\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f" +
    "\055\uff9f\057\uff9f\061\uff9f\062\uff9f\063\uff9f\064\uff9f\065" +
    "\uff9f\066\uff9f\067\uff9f\070\uff9f\071\uff9f\072\uff9f\073\uff9f" +
    "\074\uff9f\075\uff9f\076\uff9f\077\uff9f\101\uff9f\102\uff9f\103" +
    "\uff9f\104\uff9f\111\uff9f\001\002\000\156\002\uffe4\004\uffe4" +
    "\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014" +
    "\uffe4\015\uffe4\021\uffe4\022\uffe4\024\uffe4\026\uffe4\027\uffe4" +
    "\030\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037" +
    "\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\046\uffe4\047\uffe4" +
    "\050\uffe4\051\uffe4\052\uffe4\053\uffe4\055\uffe4\057\uffe4\061" +
    "\106\062\104\063\120\064\114\065\103\066\115\067\122" +
    "\070\112\071\121\072\117\073\111\074\113\075\116\076" +
    "\110\077\107\101\uffe4\102\uffe4\103\105\104\uffe4\111\uffe4" +
    "\001\002\000\156\002\uff99\004\uff99\006\uff99\007\uff99\010" +
    "\uff99\011\uff99\012\uff99\013\uff99\014\uff99\015\uff99\021\uff99" +
    "\022\uff99\024\uff99\026\uff99\027\uff99\030\uff99\032\uff99\033" +
    "\uff99\034\uff99\035\uff99\036\uff99\037\uff99\040\uff99\041\uff99" +
    "\042\uff99\043\uff99\046\uff99\047\uff99\050\uff99\051\uff99\052" +
    "\uff99\053\uff99\055\uff99\057\uff99\061\uff99\062\uff99\063\uff99" +
    "\064\uff99\065\uff99\066\uff99\067\uff99\070\uff99\071\uff99\072" +
    "\uff99\073\uff99\074\uff99\075\uff99\076\uff99\077\uff99\101\uff99" +
    "\102\uff99\103\uff99\104\uff99\111\uff99\001\002\000\074\016" +
    "\072\017\066\024\057\025\101\026\026\027\012\030\006" +
    "\031\067\032\035\033\024\034\034\035\033\036\025\037" +
    "\055\040\007\041\027\042\052\043\017\044\071\045\076" +
    "\054\063\056\061\061\100\062\070\100\062\103\064\107" +
    "\077\110\065\111\075\001\002\000\156\002\uff9b\004\uff9b" +
    "\006\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\014" +
    "\uff9b\015\uff9b\021\uff9b\022\uff9b\024\uff9b\026\uff9b\027\uff9b" +
    "\030\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037" +
    "\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\046\uff9b\047\uff9b" +
    "\050\uff9b\051\uff9b\052\uff9b\053\uff9b\055\uff9b\057\uff9b\061" +
    "\uff9b\062\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b" +
    "\070\uff9b\071\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b\076" +
    "\uff9b\077\uff9b\101\uff9b\102\uff9b\103\uff9b\104\uff9b\111\uff9b" +
    "\001\002\000\074\016\072\017\066\024\057\025\101\026" +
    "\026\027\012\030\006\031\067\032\035\033\024\034\034" +
    "\035\033\036\025\037\055\040\007\041\027\042\052\043" +
    "\017\044\071\045\076\054\063\056\061\061\100\062\070" +
    "\100\062\103\064\107\077\110\065\111\075\001\002\000" +
    "\074\016\072\017\066\024\057\025\101\026\026\027\012" +
    "\030\006\031\067\032\035\033\024\034\034\035\033\036" +
    "\025\037\055\040\007\041\027\042\052\043\017\044\071" +
    "\045\076\054\063\056\061\061\100\062\070\100\062\103" +
    "\064\107\077\110\065\111\075\001\002\000\156\002\uff9e" +
    "\004\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013" +
    "\uff9e\014\uff9e\015\uff9e\021\uff9e\022\uff9e\024\uff9e\026\uff9e" +
    "\027\uff9e\030\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036" +
    "\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\046\uff9e" +
    "\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\055\uff9e\057" +
    "\uff9e\061\106\062\104\063\120\064\114\065\103\066\115" +
    "\067\122\070\112\071\121\072\117\073\111\074\113\075" +
    "\116\076\110\077\107\101\uff9e\102\uff9e\103\105\104\uff9e" +
    "\111\uff9e\001\002\000\074\016\072\017\066\024\057\025" +
    "\101\026\026\027\012\030\006\031\067\032\035\033\024" +
    "\034\034\035\033\036\025\037\055\040\007\041\027\042" +
    "\052\043\017\044\071\045\076\054\063\056\061\061\100" +
    "\062\070\100\062\103\064\107\077\110\065\111\075\001" +
    "\002\000\074\016\072\017\066\024\057\025\101\026\026" +
    "\027\012\030\006\031\067\032\035\033\024\034\034\035" +
    "\033\036\025\037\055\040\007\041\027\042\052\043\017" +
    "\044\071\045\076\054\063\056\061\061\100\062\070\100" +
    "\062\103\064\107\077\110\065\111\075\001\002\000\204" +
    "\002\uffa5\004\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\012" +
    "\uffa5\013\uffa5\014\uffa5\015\uffa5\016\072\017\066\021\uffa5" +
    "\022\uffa5\024\uffa5\025\101\026\uffa5\027\uffa5\030\uffa5\031" +
    "\067\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5" +
    "\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\071\045\076\046" +
    "\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054\063" +
    "\055\uffa5\056\061\057\uffa5\061\100\062\070\063\uffa5\064" +
    "\uffa5\065\uffa5\066\uffa5\067\uffa5\070\uffa5\071\uffa5\072\uffa5" +
    "\073\uffa5\074\uffa5\075\uffa5\076\uffa5\077\uffa5\100\062\101" +
    "\uffa5\102\uffa5\103\uffa5\104\uffa5\107\077\110\065\111\uffa5" +
    "\001\002\000\074\016\072\017\066\024\057\025\101\026" +
    "\026\027\012\030\006\031\067\032\035\033\024\034\034" +
    "\035\033\036\025\037\055\040\007\041\027\042\052\043" +
    "\017\044\071\045\076\054\063\056\061\061\100\062\070" +
    "\100\062\103\064\107\077\110\065\111\075\001\002\000" +
    "\074\016\072\017\066\024\057\025\101\026\026\027\012" +
    "\030\006\031\067\032\035\033\024\034\034\035\033\036" +
    "\025\037\055\040\007\041\027\042\052\043\017\044\071" +
    "\045\076\054\063\056\061\061\100\062\070\100\062\103" +
    "\064\107\077\110\065\111\075\001\002\000\074\016\072" +
    "\017\066\024\057\025\101\026\026\027\012\030\006\031" +
    "\067\032\035\033\024\034\034\035\033\036\025\037\055" +
    "\040\007\041\027\042\052\043\017\044\071\045\076\054" +
    "\063\056\061\061\100\062\070\100\062\103\064\107\077" +
    "\110\065\111\075\001\002\000\074\016\072\017\066\024" +
    "\057\025\101\026\026\027\012\030\006\031\067\032\035" +
    "\033\024\034\034\035\033\036\025\037\055\040\007\041" +
    "\027\042\052\043\017\044\071\045\076\054\063\056\061" +
    "\061\100\062\070\100\062\103\064\107\077\110\065\111" +
    "\075\001\002\000\074\016\072\017\066\024\057\025\101" +
    "\026\026\027\012\030\006\031\067\032\035\033\024\034" +
    "\034\035\033\036\025\037\055\040\007\041\027\042\052" +
    "\043\017\044\071\045\076\054\063\056\061\061\100\062" +
    "\070\100\062\103\064\107\077\110\065\111\075\001\002" +
    "\000\074\016\072\017\066\024\057\025\101\026\026\027" +
    "\012\030\006\031\067\032\035\033\024\034\034\035\033" +
    "\036\025\037\055\040\007\041\027\042\052\043\017\044" +
    "\071\045\076\054\063\056\061\061\100\062\070\100\062" +
    "\103\064\107\077\110\065\111\075\001\002\000\074\016" +
    "\072\017\066\024\057\025\101\026\026\027\012\030\006" +
    "\031\067\032\035\033\024\034\034\035\033\036\025\037" +
    "\055\040\007\041\027\042\052\043\017\044\071\045\076" +
    "\054\063\056\061\061\100\062\070\100\062\103\064\107" +
    "\077\110\065\111\075\001\002\000\074\016\072\017\066" +
    "\024\057\025\101\026\026\027\012\030\006\031\067\032" +
    "\035\033\024\034\034\035\033\036\025\037\055\040\007" +
    "\041\027\042\052\043\017\044\071\045\076\054\063\056" +
    "\061\061\100\062\070\100\062\103\064\107\077\110\065" +
    "\111\075\001\002\000\074\016\072\017\066\024\057\025" +
    "\101\026\026\027\012\030\006\031\067\032\035\033\024" +
    "\034\034\035\033\036\025\037\055\040\007\041\027\042" +
    "\052\043\017\044\071\045\076\054\063\056\061\061\100" +
    "\062\070\100\062\103\064\107\077\110\065\111\075\001" +
    "\002\000\074\016\072\017\066\024\057\025\101\026\026" +
    "\027\012\030\006\031\067\032\035\033\024\034\034\035" +
    "\033\036\025\037\055\040\007\041\027\042\052\043\017" +
    "\044\071\045\076\054\063\056\061\061\100\062\070\100" +
    "\062\103\064\107\077\110\065\111\075\001\002\000\074" +
    "\016\072\017\066\024\057\025\101\026\026\027\012\030" +
    "\006\031\067\032\035\033\024\034\034\035\033\036\025" +
    "\037\055\040\007\041\027\042\052\043\017\044\071\045" +
    "\076\054\063\056\061\061\100\062\070\100\062\103\064" +
    "\107\077\110\065\111\075\001\002\000\074\016\072\017" +
    "\066\024\057\025\101\026\026\027\012\030\006\031\067" +
    "\032\035\033\024\034\034\035\033\036\025\037\055\040" +
    "\007\041\027\042\052\043\017\044\071\045\076\054\063" +
    "\056\061\061\100\062\070\100\062\103\064\107\077\110" +
    "\065\111\075\001\002\000\074\016\072\017\066\024\057" +
    "\025\101\026\026\027\012\030\006\031\067\032\035\033" +
    "\024\034\034\035\033\036\025\037\055\040\007\041\027" +
    "\042\052\043\017\044\071\045\076\054\063\056\061\061" +
    "\100\062\070\100\062\103\064\107\077\110\065\111\075" +
    "\001\002\000\156\002\uffad\004\uffad\006\uffad\007\uffad\010" +
    "\uffad\011\uffad\012\uffad\013\uffad\014\uffad\015\uffad\021\uffad" +
    "\022\uffad\024\uffad\026\uffad\027\uffad\030\uffad\032\uffad\033" +
    "\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad" +
    "\042\uffad\043\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052" +
    "\uffad\053\uffad\055\uffad\057\uffad\061\uffad\062\uffad\063\uffad" +
    "\064\uffad\065\uffad\066\uffad\067\uffad\070\uffad\071\uffad\072" +
    "\uffad\073\111\074\113\075\116\076\110\077\107\101\uffad" +
    "\102\uffad\103\uffad\104\uffad\111\uffad\001\002\000\156\002" +
    "\uffab\004\uffab\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab" +
    "\013\uffab\014\uffab\015\uffab\021\uffab\022\uffab\024\uffab\026" +
    "\uffab\027\uffab\030\uffab\032\uffab\033\uffab\034\uffab\035\uffab" +
    "\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\046" +
    "\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab\055\uffab" +
    "\057\uffab\061\uffab\062\uffab\063\uffab\064\uffab\065\uffab\066" +
    "\uffab\067\uffab\070\uffab\071\uffab\072\uffab\073\111\074\113" +
    "\075\116\076\110\077\107\101\uffab\102\uffab\103\uffab\104" +
    "\uffab\111\uffab\001\002\000\156\002\uffb1\004\uffb1\006\uffb1" +
    "\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015" +
    "\uffb1\021\uffb1\022\uffb1\024\uffb1\026\uffb1\027\uffb1\030\uffb1" +
    "\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040" +
    "\uffb1\041\uffb1\042\uffb1\043\uffb1\046\uffb1\047\uffb1\050\uffb1" +
    "\051\uffb1\052\uffb1\053\uffb1\055\uffb1\057\uffb1\061\106\062" +
    "\104\063\uffb1\064\uffb1\065\uffb1\066\uffb1\067\122\070\112" +
    "\071\121\072\117\073\111\074\113\075\116\076\110\077" +
    "\107\101\uffb1\102\uffb1\103\uffb1\104\uffb1\111\uffb1\001\002" +
    "\000\156\002\uffaa\004\uffaa\006\uffaa\007\uffaa\010\uffaa\011" +
    "\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\021\uffaa\022\uffaa" +
    "\024\uffaa\026\uffaa\027\uffaa\030\uffaa\032\uffaa\033\uffaa\034" +
    "\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa" +
    "\043\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053" +
    "\uffaa\055\uffaa\057\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa" +
    "\065\uffaa\066\uffaa\067\uffaa\070\uffaa\071\uffaa\072\uffaa\073" +
    "\111\074\113\075\116\076\110\077\107\101\uffaa\102\uffaa" +
    "\103\uffaa\104\uffaa\111\uffaa\001\002\000\044\061\106\062" +
    "\104\063\120\064\114\065\103\066\115\067\122\070\112" +
    "\071\121\072\117\073\111\074\113\075\116\076\110\077" +
    "\107\101\130\103\105\001\002\000\074\016\072\017\066" +
    "\024\057\025\101\026\026\027\012\030\006\031\067\032" +
    "\035\033\024\034\034\035\033\036\025\037\055\040\007" +
    "\041\027\042\052\043\017\044\071\045\076\054\063\056" +
    "\061\061\100\062\070\100\062\103\064\107\077\110\065" +
    "\111\075\001\002\000\156\002\uffa7\004\uffa7\006\uffa7\007" +
    "\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7" +
    "\021\uffa7\022\uffa7\024\uffa7\026\uffa7\027\uffa7\030\uffa7\032" +
    "\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7" +
    "\041\uffa7\042\uffa7\043\uffa7\046\uffa7\047\uffa7\050\uffa7\051" +
    "\uffa7\052\uffa7\053\uffa7\055\uffa7\057\uffa7\061\uffa7\062\uffa7" +
    "\063\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7\070\uffa7\071" +
    "\uffa7\072\uffa7\073\uffa7\074\uffa7\075\uffa7\076\uffa7\077\uffa7" +
    "\101\uffa7\102\uffa7\103\uffa7\104\uffa7\111\uffa7\001\002\000" +
    "\156\002\uffae\004\uffae\006\uffae\007\uffae\010\uffae\011\uffae" +
    "\012\uffae\013\uffae\014\uffae\015\uffae\021\uffae\022\uffae\024" +
    "\uffae\026\uffae\027\uffae\030\uffae\032\uffae\033\uffae\034\uffae" +
    "\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043" +
    "\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae" +
    "\055\uffae\057\uffae\061\106\062\104\063\uffae\064\uffae\065" +
    "\uffae\066\uffae\067\122\070\112\071\121\072\117\073\111" +
    "\074\113\075\116\076\110\077\107\101\uffae\102\uffae\103" +
    "\uffae\104\uffae\111\uffae\001\002\000\156\002\uffb0\004\uffb0" +
    "\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014" +
    "\uffb0\015\uffb0\021\uffb0\022\uffb0\024\uffb0\026\uffb0\027\uffb0" +
    "\030\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037" +
    "\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\046\uffb0\047\uffb0" +
    "\050\uffb0\051\uffb0\052\uffb0\053\uffb0\055\uffb0\057\uffb0\061" +
    "\106\062\104\063\uffb0\064\uffb0\065\uffb0\066\uffb0\067\122" +
    "\070\112\071\121\072\117\073\111\074\113\075\116\076" +
    "\110\077\107\101\uffb0\102\uffb0\103\uffb0\104\uffb0\111\uffb0" +
    "\001\002\000\156\002\uffa8\004\uffa8\006\uffa8\007\uffa8\010" +
    "\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\021\uffa8" +
    "\022\uffa8\024\uffa8\026\uffa8\027\uffa8\030\uffa8\032\uffa8\033" +
    "\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8" +
    "\042\uffa8\043\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052" +
    "\uffa8\053\uffa8\055\uffa8\057\uffa8\061\uffa8\062\uffa8\063\uffa8" +
    "\064\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8\071\uffa8\072" +
    "\uffa8\073\uffa8\074\uffa8\075\116\076\110\077\107\101\uffa8" +
    "\102\uffa8\103\uffa8\104\uffa8\111\uffa8\001\002\000\156\002" +
    "\uffac\004\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac" +
    "\013\uffac\014\uffac\015\uffac\021\uffac\022\uffac\024\uffac\026" +
    "\uffac\027\uffac\030\uffac\032\uffac\033\uffac\034\uffac\035\uffac" +
    "\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac\046" +
    "\uffac\047\uffac\050\uffac\051\uffac\052\uffac\053\uffac\055\uffac" +
    "\057\uffac\061\uffac\062\uffac\063\uffac\064\uffac\065\uffac\066" +
    "\uffac\067\uffac\070\uffac\071\uffac\072\uffac\073\111\074\113" +
    "\075\116\076\110\077\107\101\uffac\102\uffac\103\uffac\104" +
    "\uffac\111\uffac\001\002\000\156\002\uffa9\004\uffa9\006\uffa9" +
    "\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015" +
    "\uffa9\021\uffa9\022\uffa9\024\uffa9\026\uffa9\027\uffa9\030\uffa9" +
    "\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040" +
    "\uffa9\041\uffa9\042\uffa9\043\uffa9\046\uffa9\047\uffa9\050\uffa9" +
    "\051\uffa9\052\uffa9\053\uffa9\055\uffa9\057\uffa9\061\uffa9\062" +
    "\uffa9\063\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9" +
    "\071\uffa9\072\uffa9\073\uffa9\074\uffa9\075\116\076\110\077" +
    "\107\101\uffa9\102\uffa9\103\uffa9\104\uffa9\111\uffa9\001\002" +
    "\000\156\002\uffb4\004\uffb4\006\uffb4\007\uffb4\010\uffb4\011" +
    "\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\021\uffb4\022\uffb4" +
    "\024\uffb4\026\uffb4\027\uffb4\030\uffb4\032\uffb4\033\uffb4\034" +
    "\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4" +
    "\043\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053" +
    "\uffb4\055\uffb4\057\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4" +
    "\065\uffb4\066\uffb4\067\uffb4\070\uffb4\071\uffb4\072\uffb4\073" +
    "\uffb4\074\uffb4\075\116\076\uffb4\077\107\101\uffb4\102\uffb4" +
    "\103\uffb4\104\uffb4\111\uffb4\001\002\000\156\002\uffb5\004" +
    "\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5" +
    "\014\uffb5\015\uffb5\021\uffb5\022\uffb5\024\uffb5\026\uffb5\027" +
    "\uffb5\030\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5" +
    "\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\046\uffb5\047" +
    "\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\055\uffb5\057\uffb5" +
    "\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\066\uffb5\067" +
    "\uffb5\070\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5\075\116" +
    "\076\uffb5\077\uffb5\101\uffb5\102\uffb5\103\uffb5\104\uffb5\111" +
    "\uffb5\001\002\000\156\002\uffb3\004\uffb3\006\uffb3\007\uffb3" +
    "\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\021" +
    "\uffb3\022\uffb3\024\uffb3\026\uffb3\027\uffb3\030\uffb3\032\uffb3" +
    "\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041" +
    "\uffb3\042\uffb3\043\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3" +
    "\052\uffb3\053\uffb3\055\uffb3\057\uffb3\061\uffb3\062\uffb3\063" +
    "\uffb3\064\uffb3\065\uffb3\066\uffb3\067\122\070\112\071\121" +
    "\072\117\073\111\074\113\075\116\076\110\077\107\101" +
    "\uffb3\102\uffb3\103\uffb3\104\uffb3\111\uffb3\001\002\000\156" +
    "\002\uffa6\004\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012" +
    "\uffa6\013\uffa6\014\uffa6\015\uffa6\021\uffa6\022\uffa6\024\uffa6" +
    "\026\uffa6\027\uffa6\030\uffa6\032\uffa6\033\uffa6\034\uffa6\035" +
    "\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6" +
    "\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\055" +
    "\uffa6\057\uffa6\061\106\062\104\063\120\064\114\065\103" +
    "\066\115\067\122\070\112\071\121\072\117\073\111\074" +
    "\113\075\116\076\110\077\107\101\uffa6\102\uffa6\103\uffa6" +
    "\104\uffa6\111\uffa6\001\002\000\156\002\uffb2\004\uffb2\006" +
    "\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2" +
    "\015\uffb2\021\uffb2\022\uffb2\024\uffb2\026\uffb2\027\uffb2\030" +
    "\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\043\uffb2\046\uffb2\047\uffb2\050" +
    "\uffb2\051\uffb2\052\uffb2\053\uffb2\055\uffb2\057\uffb2\061\uffb2" +
    "\062\uffb2\063\uffb2\064\uffb2\065\uffb2\066\uffb2\067\122\070" +
    "\112\071\121\072\117\073\111\074\113\075\116\076\110" +
    "\077\107\101\uffb2\102\uffb2\103\uffb2\104\uffb2\111\uffb2\001" +
    "\002\000\156\002\uffaf\004\uffaf\006\uffaf\007\uffaf\010\uffaf" +
    "\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\021\uffaf\022" +
    "\uffaf\024\uffaf\026\uffaf\027\uffaf\030\uffaf\032\uffaf\033\uffaf" +
    "\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042" +
    "\uffaf\043\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf" +
    "\053\uffaf\055\uffaf\057\uffaf\061\106\062\104\063\120\064" +
    "\114\065\uffaf\066\115\067\122\070\112\071\121\072\117" +
    "\073\111\074\113\075\116\076\110\077\107\101\uffaf\102" +
    "\uffaf\103\uffaf\104\uffaf\111\uffaf\001\002\000\156\002\uffb7" +
    "\004\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013" +
    "\uffb7\014\uffb7\015\uffb7\021\uffb7\022\uffb7\024\uffb7\026\uffb7" +
    "\027\uffb7\030\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036" +
    "\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\046\uffb7" +
    "\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\055\uffb7\057" +
    "\uffb7\061\106\062\104\063\120\064\114\065\103\066\115" +
    "\067\122\070\112\071\121\072\117\073\111\074\113\075" +
    "\116\076\110\077\107\101\uffb7\102\uffb7\103\uffb7\104\uffb7" +
    "\111\uffb7\001\002\000\156\002\uff9d\004\uff9d\006\uff9d\007" +
    "\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d" +
    "\021\uff9d\022\uff9d\024\uff9d\026\uff9d\027\uff9d\030\uff9d\032" +
    "\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d" +
    "\041\uff9d\042\uff9d\043\uff9d\046\uff9d\047\uff9d\050\uff9d\051" +
    "\uff9d\052\uff9d\053\uff9d\055\uff9d\057\uff9d\061\106\062\104" +
    "\063\120\064\114\065\103\066\115\067\122\070\112\071" +
    "\121\072\117\073\111\074\113\075\116\076\110\077\107" +
    "\101\uff9d\102\uff9d\103\105\104\uff9d\111\uff9d\001\002\000" +
    "\156\002\uffb8\004\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8" +
    "\012\uffb8\013\uffb8\014\uffb8\015\uffb8\021\uffb8\022\uffb8\024" +
    "\uffb8\026\uffb8\027\uffb8\030\uffb8\032\uffb8\033\uffb8\034\uffb8" +
    "\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043" +
    "\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8" +
    "\055\uffb8\057\uffb8\061\106\062\104\063\120\064\114\065" +
    "\103\066\115\067\122\070\112\071\121\072\117\073\111" +
    "\074\113\075\116\076\110\077\107\101\uffb8\102\uffb8\103" +
    "\uffb8\104\uffb8\111\uffb8\001\002\000\156\002\uff9c\004\uff9c" +
    "\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c\014" +
    "\uff9c\015\uff9c\021\uff9c\022\uff9c\024\uff9c\026\uff9c\027\uff9c" +
    "\030\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037" +
    "\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\046\uff9c\047\uff9c" +
    "\050\uff9c\051\uff9c\052\uff9c\053\uff9c\055\uff9c\057\uff9c\061" +
    "\106\062\104\063\120\064\114\065\103\066\115\067\122" +
    "\070\112\071\121\072\117\073\111\074\113\075\116\076" +
    "\110\077\107\101\uff9c\102\uff9c\103\105\104\uff9c\111\uff9c" +
    "\001\002\000\156\002\uffa4\004\uffa4\006\uffa4\007\uffa4\010" +
    "\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\021\uffa4" +
    "\022\uffa4\024\uffa4\026\uffa4\027\uffa4\030\uffa4\032\uffa4\033" +
    "\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4" +
    "\042\uffa4\043\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052" +
    "\uffa4\053\uffa4\055\uffa4\057\uffa4\061\106\062\104\063\120" +
    "\064\114\065\103\066\115\067\122\070\112\071\121\072" +
    "\117\073\111\074\113\075\116\076\110\077\107\101\uffa4" +
    "\102\uffa4\103\uffa4\104\uffa4\111\uffa4\001\002\000\044\055" +
    "\153\061\106\062\104\063\120\064\114\065\103\066\115" +
    "\067\122\070\112\071\121\072\117\073\111\074\113\075" +
    "\116\076\110\077\107\103\105\001\002\000\204\002\uffa3" +
    "\004\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013" +
    "\uffa3\014\uffa3\015\uffa3\016\072\017\066\021\uffa3\022\uffa3" +
    "\024\057\025\101\026\026\027\012\030\006\031\067\032" +
    "\035\033\024\034\034\035\033\036\025\037\055\040\007" +
    "\041\027\042\052\043\017\044\071\045\076\046\uffa3\047" +
    "\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\063\055\uffa3" +
    "\056\061\057\uffa3\061\100\062\070\063\uffa3\064\uffa3\065" +
    "\uffa3\066\uffa3\067\uffa3\070\uffa3\071\uffa3\072\uffa3\073\uffa3" +
    "\074\uffa3\075\uffa3\076\uffa3\077\uffa3\100\062\101\uffa3\102" +
    "\uffa3\103\064\104\uffa3\107\077\110\065\111\075\001\002" +
    "\000\156\002\uffa2\004\uffa2\006\uffa2\007\uffa2\010\uffa2\011" +
    "\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\021\uffa2\022\uffa2" +
    "\024\uffa2\026\uffa2\027\uffa2\030\uffa2\032\uffa2\033\uffa2\034" +
    "\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2" +
    "\043\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053" +
    "\uffa2\055\uffa2\057\uffa2\061\106\062\104\063\120\064\114" +
    "\065\103\066\115\067\122\070\112\071\121\072\117\073" +
    "\111\074\113\075\116\076\110\077\107\101\uffa2\102\uffa2" +
    "\103\105\104\uffa2\111\uffa2\001\002\000\156\002\uffb6\004" +
    "\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6" +
    "\014\uffb6\015\uffb6\021\uffb6\022\uffb6\024\uffb6\026\uffb6\027" +
    "\uffb6\030\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6" +
    "\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\046\uffb6\047" +
    "\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\055\uffb6\057\uffb6" +
    "\061\106\062\104\063\120\064\114\065\103\066\115\067" +
    "\122\070\112\071\121\072\117\073\111\074\113\075\116" +
    "\076\110\077\107\101\uffb6\102\uffb6\103\uffb6\104\uffb6\111" +
    "\uffb6\001\002\000\044\057\157\061\106\062\104\063\120" +
    "\064\114\065\103\066\115\067\122\070\112\071\121\072" +
    "\117\073\111\074\113\075\116\076\110\077\107\103\105" +
    "\001\002\000\204\002\uffa1\004\uffa1\006\uffa1\007\uffa1\010" +
    "\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\072" +
    "\017\066\021\uffa1\022\uffa1\024\057\025\101\026\026\027" +
    "\012\030\006\031\067\032\035\033\024\034\034\035\033" +
    "\036\025\037\055\040\007\041\027\042\052\043\017\044" +
    "\071\045\076\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1" +
    "\053\uffa1\054\063\055\uffa1\056\061\057\uffa1\061\100\062" +
    "\070\063\uffa1\064\uffa1\065\uffa1\066\uffa1\067\uffa1\070\uffa1" +
    "\071\uffa1\072\uffa1\073\uffa1\074\uffa1\075\uffa1\076\uffa1\077" +
    "\uffa1\100\062\101\uffa1\102\uffa1\103\064\104\uffa1\107\077" +
    "\110\065\111\075\001\002\000\156\002\uffa0\004\uffa0\006" +
    "\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0" +
    "\015\uffa0\021\uffa0\022\uffa0\024\uffa0\026\uffa0\027\uffa0\030" +
    "\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0" +
    "\040\uffa0\041\uffa0\042\uffa0\043\uffa0\046\uffa0\047\uffa0\050" +
    "\uffa0\051\uffa0\052\uffa0\053\uffa0\055\uffa0\057\uffa0\061\106" +
    "\062\104\063\120\064\114\065\103\066\115\067\122\070" +
    "\112\071\121\072\117\073\111\074\113\075\116\076\110" +
    "\077\107\101\uffa0\102\uffa0\103\105\104\uffa0\111\uffa0\001" +
    "\002\000\102\002\ufff0\004\ufff0\006\ufff0\007\ufff0\010\ufff0" +
    "\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\021\ufff0\022" +
    "\ufff0\024\ufff0\026\ufff0\027\ufff0\030\ufff0\032\ufff0\033\ufff0" +
    "\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042" +
    "\ufff0\043\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0\053\ufff0" +
    "\111\ufff0\001\002\000\156\002\uffdb\004\uffdb\006\uffdb\007" +
    "\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\021\uffdb\022\uffdb\024\uffdb\026\uffdb\027\uffdb\030\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb" +
    "\041\uffdb\042\uffdb\043\uffdb\046\uffdb\047\uffdb\050\uffdb\051" +
    "\uffdb\052\uffdb\053\uffdb\055\uffdb\057\uffdb\061\106\062\104" +
    "\063\120\064\114\065\103\066\115\067\122\070\112\071" +
    "\121\072\117\073\111\074\113\075\116\076\110\077\107" +
    "\101\uffdb\102\uffdb\103\105\104\uffdb\111\uffdb\001\002\000" +
    "\074\016\072\017\066\024\057\025\101\026\026\027\012" +
    "\030\006\031\067\032\035\033\024\034\034\035\033\036" +
    "\025\037\055\040\007\041\027\042\052\043\017\044\071" +
    "\045\076\054\063\056\061\061\100\062\070\100\062\103" +
    "\064\107\077\110\065\111\075\001\002\000\044\057\165" +
    "\061\106\062\104\063\120\064\114\065\103\066\115\067" +
    "\122\070\112\071\121\072\117\073\111\074\113\075\116" +
    "\076\110\077\107\103\105\001\002\000\104\002\uffd6\004" +
    "\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6" +
    "\014\uffd6\015\uffd6\021\uffd6\022\uffd6\024\uffd6\026\uffd6\027" +
    "\uffd6\030\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6" +
    "\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\046\uffd6\047" +
    "\uffd6\050\uffd6\051\uffd6\053\uffd6\102\uffd6\111\uffd6\001\002" +
    "\000\156\002\uffd8\004\uffd8\006\uffd8\007\uffd8\010\uffd8\011" +
    "\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\021\uffd8\022\uffd8" +
    "\024\uffd8\026\uffd8\027\uffd8\030\uffd8\032\uffd8\033\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8" +
    "\043\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053" +
    "\uffd8\055\uffd8\057\uffd8\061\106\062\104\063\120\064\114" +
    "\065\103\066\115\067\122\070\112\071\121\072\117\073" +
    "\111\074\113\075\116\076\110\077\107\101\uffd8\102\uffd8" +
    "\103\105\104\uffd8\111\uffd8\001\002\000\102\002\ufffa\004" +
    "\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa" +
    "\014\ufffa\015\ufffa\021\ufffa\022\ufffa\024\ufffa\026\ufffa\027" +
    "\ufffa\030\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa" +
    "\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\046\ufffa\047" +
    "\ufffa\050\ufffa\051\ufffa\053\ufffa\111\ufffa\001\002\000\142" +
    "\002\uffe8\004\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012" +
    "\uffe8\013\uffe8\014\uffe8\015\uffe8\021\uffe8\022\uffe8\024\uffe8" +
    "\026\uffe8\027\uffe8\030\uffe8\032\uffe8\033\uffe8\034\uffe8\035" +
    "\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8" +
    "\046\uffe8\047\uffe8\050\uffe8\051\uffe8\053\uffe8\061\106\062" +
    "\104\063\120\064\114\065\103\066\115\067\122\070\112" +
    "\071\121\072\117\073\111\074\113\075\116\076\110\077" +
    "\107\103\105\111\uffe8\001\002\000\102\002\ufffc\004\ufffc" +
    "\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014" +
    "\ufffc\015\ufffc\021\ufffc\022\ufffc\024\ufffc\026\ufffc\027\ufffc" +
    "\030\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc\037" +
    "\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\046\ufffc\047\ufffc" +
    "\050\ufffc\051\ufffc\053\ufffc\111\ufffc\001\002\000\102\002" +
    "\ufff6\004\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6" +
    "\013\ufff6\014\ufff6\015\ufff6\021\ufff6\022\ufff6\024\ufff6\026" +
    "\ufff6\027\ufff6\030\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6" +
    "\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\046" +
    "\ufff6\047\ufff6\050\ufff6\051\ufff6\053\ufff6\111\ufff6\001\002" +
    "\000\142\002\uffeb\004\uffeb\006\uffeb\007\uffeb\010\uffeb\011" +
    "\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\021\uffeb\022\uffeb" +
    "\024\uffeb\026\uffeb\027\uffeb\030\uffeb\032\uffeb\033\uffeb\034" +
    "\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb" +
    "\043\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\053\uffeb\061" +
    "\106\062\104\063\120\064\114\065\103\066\115\067\122" +
    "\070\112\071\121\072\117\073\111\074\113\075\116\076" +
    "\110\077\107\103\105\111\uffeb\001\002\000\076\016\072" +
    "\017\066\024\057\025\101\026\026\027\012\030\006\031" +
    "\067\032\035\033\024\034\034\035\033\036\025\037\055" +
    "\040\007\041\027\042\052\043\017\044\071\045\076\054" +
    "\063\056\061\057\222\061\100\062\070\100\062\103\064" +
    "\107\077\110\065\111\075\001\002\000\076\016\072\017" +
    "\066\023\210\024\057\025\101\026\026\027\012\030\006" +
    "\031\067\032\035\033\024\034\034\035\033\036\025\037" +
    "\055\040\007\041\027\042\052\043\017\044\071\045\076" +
    "\054\063\056\061\061\100\062\070\100\062\103\064\107" +
    "\077\110\065\111\075\001\002\000\074\016\072\017\066" +
    "\024\057\025\101\026\026\027\012\030\006\031\067\032" +
    "\035\033\024\034\034\035\033\036\025\037\055\040\007" +
    "\041\027\042\052\043\017\044\071\045\076\054\063\056" +
    "\061\061\100\062\070\100\062\103\064\107\077\110\065" +
    "\111\075\001\002\000\006\054\201\060\200\001\002\000" +
    "\074\016\072\017\066\024\057\025\101\026\026\027\012" +
    "\030\006\031\067\032\035\033\024\034\034\035\033\036" +
    "\025\037\055\040\007\041\027\042\052\043\017\044\071" +
    "\045\076\054\063\056\061\061\100\062\070\100\062\103" +
    "\064\107\077\110\065\111\075\001\002\000\074\016\072" +
    "\017\066\024\057\025\101\026\026\027\012\030\006\031" +
    "\067\032\035\033\024\034\034\035\033\036\025\037\055" +
    "\040\007\041\027\042\052\043\017\044\071\045\076\054" +
    "\063\056\061\061\100\062\070\100\062\103\064\107\077" +
    "\110\065\111\075\001\002\000\044\055\203\061\106\062" +
    "\104\063\120\064\114\065\103\066\115\067\122\070\112" +
    "\071\121\072\117\073\111\074\113\075\116\076\110\077" +
    "\107\103\105\001\002\000\006\054\uffe6\060\uffe6\001\002" +
    "\000\144\002\uffe7\004\uffe7\006\uffe7\007\uffe7\010\uffe7\011" +
    "\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\021\uffe7\022\uffe7" +
    "\024\uffe7\026\uffe7\027\uffe7\030\uffe7\032\uffe7\033\uffe7\034" +
    "\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7" +
    "\043\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\053\uffe7\061" +
    "\106\062\104\063\120\064\114\065\103\066\115\067\122" +
    "\070\112\071\121\072\117\073\111\074\113\075\116\076" +
    "\110\077\107\102\uffe7\103\105\111\uffe7\001\002\000\044" +
    "\055\206\061\106\062\104\063\120\064\114\065\103\066" +
    "\115\067\122\070\112\071\121\072\117\073\111\074\113" +
    "\075\116\076\110\077\107\103\105\001\002\000\006\054" +
    "\uffe5\060\uffe5\001\002\000\146\002\uffba\004\uffba\006\uffba" +
    "\007\uffba\010\uffba\011\uffba\012\uffba\013\uffba\014\uffba\015" +
    "\uffba\021\uffba\022\uffba\024\uffba\026\uffba\027\uffba\030\uffba" +
    "\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040" +
    "\uffba\041\uffba\042\uffba\043\uffba\046\uffba\047\uffba\050\uffba" +
    "\051\uffba\053\uffba\061\106\062\104\063\120\064\114\065" +
    "\103\066\115\067\122\070\112\071\121\072\117\073\111" +
    "\074\113\075\116\076\110\077\107\102\uffba\103\105\104" +
    "\217\111\uffba\001\002\000\074\016\072\017\066\024\057" +
    "\025\101\026\026\027\012\030\006\031\067\032\035\033" +
    "\024\034\034\035\033\036\025\037\055\040\007\041\027" +
    "\042\052\043\017\044\071\045\076\054\063\056\061\061" +
    "\100\062\070\100\062\103\064\107\077\110\065\111\075" +
    "\001\002\000\044\052\213\061\106\062\104\063\120\064" +
    "\114\065\103\066\115\067\122\070\112\071\121\072\117" +
    "\073\111\074\113\075\116\076\110\077\107\103\105\001" +
    "\002\000\102\002\uffd3\004\uffd3\006\uffd3\007\uffd3\010\uffd3" +
    "\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\021\uffd3\022" +
    "\uffd3\024\uffd3\026\uffd3\027\uffd3\030\uffd3\032\uffd3\033\uffd3" +
    "\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\043\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\053\uffd3" +
    "\111\uffd3\001\002\000\072\004\036\006\010\010\040\012" +
    "\037\013\054\014\041\015\004\021\053\022\032\024\057" +
    "\026\026\027\012\030\006\032\035\033\024\034\034\035" +
    "\033\036\025\037\055\040\007\041\027\042\052\043\017" +
    "\046\044\047\014\050\005\051\050\111\042\001\002\000" +
    "\074\004\036\006\010\010\040\012\037\013\054\014\041" +
    "\015\004\021\053\022\032\024\057\026\026\027\012\030" +
    "\006\032\035\033\024\034\034\035\033\036\025\037\055" +
    "\040\007\041\027\042\052\043\017\046\044\047\014\050" +
    "\005\051\050\053\215\111\042\001\002\000\104\002\uffb9" +
    "\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012" +
    "\uffb9\013\uffb9\014\uffb9\015\uffb9\021\uffb9\022\uffb9\024\uffb9" +
    "\026\uffb9\027\uffb9\030\uffb9\032\uffb9\033\uffb9\034\uffb9\035" +
    "\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9" +
    "\046\uffb9\047\uffb9\050\uffb9\051\uffb9\053\uffb9\111\uffb9\001" +
    "\002\000\102\002\uffff\004\uffff\006\uffff\007\uffff\010\uffff" +
    "\011\uffff\012\uffff\013\uffff\014\uffff\015\uffff\021\uffff\022" +
    "\uffff\024\uffff\026\uffff\027\uffff\030\uffff\032\uffff\033\uffff" +
    "\034\uffff\035\uffff\036\uffff\037\uffff\040\uffff\041\uffff\042" +
    "\uffff\043\uffff\046\uffff\047\uffff\050\uffff\051\uffff\053\uffff" +
    "\111\uffff\001\002\000\004\052\213\001\002\000\102\002" +
    "\uffd2\004\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2" +
    "\013\uffd2\014\uffd2\015\uffd2\021\uffd2\022\uffd2\024\uffd2\026" +
    "\uffd2\027\uffd2\030\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2" +
    "\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\046" +
    "\uffd2\047\uffd2\050\uffd2\051\uffd2\053\uffd2\111\uffd2\001\002" +
    "\000\044\057\223\061\106\062\104\063\120\064\114\065" +
    "\103\066\115\067\122\070\112\071\121\072\117\073\111" +
    "\074\113\075\116\076\110\077\107\103\105\001\002\000" +
    "\104\002\uffd4\004\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4" +
    "\012\uffd4\013\uffd4\014\uffd4\015\uffd4\021\uffd4\022\uffd4\024" +
    "\uffd4\026\uffd4\027\uffd4\030\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043" +
    "\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\053\uffd4\102\uffd4" +
    "\111\uffd4\001\002\000\104\002\uffd5\004\uffd5\006\uffd5\007" +
    "\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5" +
    "\021\uffd5\022\uffd5\024\uffd5\026\uffd5\027\uffd5\030\uffd5\032" +
    "\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5" +
    "\041\uffd5\042\uffd5\043\uffd5\046\uffd5\047\uffd5\050\uffd5\051" +
    "\uffd5\053\uffd5\102\uffd5\111\uffd5\001\002\000\004\111\226" +
    "\001\002\000\004\057\231\001\002\000\004\020\227\001" +
    "\002\000\074\016\072\017\066\024\057\025\101\026\026" +
    "\027\012\030\006\031\067\032\035\033\024\034\034\035" +
    "\033\036\025\037\055\040\007\041\027\042\052\043\017" +
    "\044\071\045\076\054\063\056\061\061\100\062\070\100" +
    "\062\103\064\107\077\110\065\111\075\001\002\000\044" +
    "\057\uffd0\061\106\062\104\063\120\064\114\065\103\066" +
    "\115\067\122\070\112\071\121\072\117\073\111\074\113" +
    "\075\116\076\110\077\107\103\105\001\002\000\004\052" +
    "\213\001\002\000\102\002\uffd1\004\uffd1\006\uffd1\007\uffd1" +
    "\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\021" +
    "\uffd1\022\uffd1\024\uffd1\026\uffd1\027\uffd1\030\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041" +
    "\uffd1\042\uffd1\043\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1" +
    "\053\uffd1\111\uffd1\001\002\000\074\016\072\017\066\024" +
    "\057\025\101\026\026\027\012\030\006\031\067\032\035" +
    "\033\024\034\034\035\033\036\025\037\055\040\007\041" +
    "\027\042\052\043\017\044\071\045\076\054\063\056\061" +
    "\061\100\062\070\100\062\103\064\107\077\110\065\111" +
    "\075\001\002\000\044\057\235\061\106\062\104\063\120" +
    "\064\114\065\103\066\115\067\122\070\112\071\121\072" +
    "\117\073\111\074\113\075\116\076\110\077\107\103\105" +
    "\001\002\000\004\052\213\001\002\000\102\002\uffcf\004" +
    "\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf" +
    "\014\uffcf\015\uffcf\021\uffcf\022\uffcf\024\uffcf\026\uffcf\027" +
    "\uffcf\030\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf" +
    "\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\046\uffcf\047" +
    "\uffcf\050\uffcf\051\uffcf\053\uffcf\111\uffcf\001\002\000\074" +
    "\016\072\017\066\024\057\025\101\026\026\027\012\030" +
    "\006\031\067\032\035\033\024\034\034\035\033\036\025" +
    "\037\055\040\007\041\027\042\052\043\017\044\071\045" +
    "\076\054\063\056\061\061\100\062\070\100\062\103\064" +
    "\107\077\110\065\111\075\001\002\000\044\057\241\061" +
    "\106\062\104\063\120\064\114\065\103\066\115\067\122" +
    "\070\112\071\121\072\117\073\111\074\113\075\116\076" +
    "\110\077\107\103\105\001\002\000\004\052\213\001\002" +
    "\000\104\002\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010" +
    "\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\021\uffbc" +
    "\022\uffbc\024\uffbc\026\uffbc\027\uffbc\030\uffbc\032\uffbc\033" +
    "\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc" +
    "\042\uffbc\043\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\053" +
    "\uffbc\111\uffbc\001\002\000\156\002\uffe0\004\uffe0\006\uffe0" +
    "\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015" +
    "\uffe0\021\uffe0\022\uffe0\024\uffe0\026\uffe0\027\uffe0\030\uffe0" +
    "\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040" +
    "\uffe0\041\uffe0\042\uffe0\043\uffe0\046\uffe0\047\uffe0\050\uffe0" +
    "\051\uffe0\052\uffe0\053\uffe0\055\uffe0\057\uffe0\061\106\062" +
    "\104\063\120\064\114\065\103\066\115\067\122\070\112" +
    "\071\121\072\117\073\111\074\113\075\116\076\110\077" +
    "\107\101\uffe0\102\uffe0\103\105\104\uffe0\111\uffe0\001\002" +
    "\000\156\002\uffde\004\uffde\006\uffde\007\uffde\010\uffde\011" +
    "\uffde\012\uffde\013\uffde\014\uffde\015\uffde\021\uffde\022\uffde" +
    "\024\uffde\026\uffde\027\uffde\030\uffde\032\uffde\033\uffde\034" +
    "\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde" +
    "\043\uffde\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053" +
    "\uffde\055\uffde\057\uffde\061\106\062\104\063\120\064\114" +
    "\065\103\066\115\067\122\070\112\071\121\072\117\073" +
    "\111\074\113\075\116\076\110\077\107\101\uffde\102\uffde" +
    "\103\105\104\uffde\111\uffde\001\002\000\156\002\uffdd\004" +
    "\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd" +
    "\014\uffdd\015\uffdd\021\uffdd\022\uffdd\024\uffdd\026\uffdd\027" +
    "\uffdd\030\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd" +
    "\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\046\uffdd\047" +
    "\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\055\uffdd\057\uffdd" +
    "\061\106\062\104\063\120\064\114\065\103\066\115\067" +
    "\122\070\112\071\121\072\117\073\111\074\113\075\116" +
    "\076\110\077\107\101\uffdd\102\uffdd\103\105\104\uffdd\111" +
    "\uffdd\001\002\000\044\061\106\062\104\063\120\064\114" +
    "\065\103\066\115\067\122\070\112\071\121\072\117\073" +
    "\111\074\113\075\116\076\110\077\107\102\uffc3\103\105" +
    "\001\002\000\006\004\250\052\213\001\002\000\004\056" +
    "\252\001\002\000\102\002\uffbe\004\uffbe\006\uffbe\007\uffbe" +
    "\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\021" +
    "\uffbe\022\uffbe\024\uffbe\026\uffbe\027\uffbe\030\uffbe\032\uffbe" +
    "\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041" +
    "\uffbe\042\uffbe\043\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe" +
    "\053\uffbe\111\uffbe\001\002\000\074\016\072\017\066\024" +
    "\057\025\101\026\026\027\012\030\006\031\067\032\035" +
    "\033\024\034\034\035\033\036\025\037\055\040\007\041" +
    "\027\042\052\043\017\044\071\045\076\054\063\056\061" +
    "\061\100\062\070\100\062\103\064\107\077\110\065\111" +
    "\075\001\002\000\044\057\254\061\106\062\104\063\120" +
    "\064\114\065\103\066\115\067\122\070\112\071\121\072" +
    "\117\073\111\074\113\075\116\076\110\077\107\103\105" +
    "\001\002\000\004\052\213\001\002\000\104\002\uffbb\004" +
    "\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb" +
    "\013\uffbb\014\uffbb\015\uffbb\021\uffbb\022\uffbb\024\uffbb\026" +
    "\uffbb\027\uffbb\030\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb" +
    "\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\046" +
    "\uffbb\047\uffbb\050\uffbb\051\uffbb\053\uffbb\111\uffbb\001\002" +
    "\000\156\002\uffd9\004\uffd9\006\uffd9\007\uffd9\010\uffd9\011" +
    "\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\021\uffd9\022\uffd9" +
    "\024\uffd9\026\uffd9\027\uffd9\030\uffd9\032\uffd9\033\uffd9\034" +
    "\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9" +
    "\043\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053" +
    "\uffd9\055\uffd9\057\uffd9\061\106\062\104\063\120\064\114" +
    "\065\103\066\115\067\122\070\112\071\121\072\117\073" +
    "\111\074\113\075\116\076\110\077\107\101\uffd9\102\uffd9" +
    "\103\105\104\uffd9\111\uffd9\001\002\000\156\002\uffe3\004" +
    "\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3" +
    "\014\uffe3\015\uffe3\021\uffe3\022\uffe3\024\uffe3\026\uffe3\027" +
    "\uffe3\030\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3" +
    "\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\046\uffe3\047" +
    "\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\055\uffe3\057\uffe3" +
    "\061\106\062\104\063\120\064\114\065\103\066\115\067" +
    "\122\070\112\071\121\072\117\073\111\074\113\075\116" +
    "\076\110\077\107\101\uffe3\102\uffe3\103\105\104\uffe3\111" +
    "\uffe3\001\002\000\156\002\uffdc\004\uffdc\006\uffdc\007\uffdc" +
    "\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\021" +
    "\uffdc\022\uffdc\024\uffdc\026\uffdc\027\uffdc\030\uffdc\032\uffdc" +
    "\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041" +
    "\uffdc\042\uffdc\043\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc" +
    "\052\uffdc\053\uffdc\055\uffdc\057\uffdc\061\106\062\104\063" +
    "\120\064\114\065\103\066\115\067\122\070\112\071\121" +
    "\072\117\073\111\074\113\075\116\076\110\077\107\101" +
    "\uffdc\102\uffdc\103\105\104\uffdc\111\uffdc\001\002\000\156" +
    "\002\uffdf\004\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\021\uffdf\022\uffdf\024\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\032\uffdf\033\uffdf\034\uffdf\035" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf" +
    "\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\055" +
    "\uffdf\057\uffdf\061\106\062\104\063\120\064\114\065\103" +
    "\066\115\067\122\070\112\071\121\072\117\073\111\074" +
    "\113\075\116\076\110\077\107\101\uffdf\102\uffdf\103\105" +
    "\104\uffdf\111\uffdf\001\002\000\156\002\uffd7\004\uffd7\006" +
    "\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7" +
    "\015\uffd7\021\uffd7\022\uffd7\024\uffd7\026\uffd7\027\uffd7\030" +
    "\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7" +
    "\040\uffd7\041\uffd7\042\uffd7\043\uffd7\046\uffd7\047\uffd7\050" +
    "\uffd7\051\uffd7\052\uffd7\053\uffd7\055\uffd7\057\uffd7\061\106" +
    "\062\104\063\120\064\114\065\103\066\115\067\122\070" +
    "\112\071\121\072\117\073\111\074\113\075\116\076\110" +
    "\077\107\101\uffd7\102\uffd7\103\105\104\uffd7\111\uffd7\001" +
    "\002\000\102\002\ufff3\004\ufff3\006\ufff3\007\ufff3\010\ufff3" +
    "\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\021\ufff3\022" +
    "\ufff3\024\ufff3\026\ufff3\027\ufff3\030\ufff3\032\ufff3\033\ufff3" +
    "\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042" +
    "\ufff3\043\ufff3\046\ufff3\047\ufff3\050\ufff3\051\ufff3\053\ufff3" +
    "\111\ufff3\001\002\000\102\002\uffee\004\uffee\006\uffee\007" +
    "\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee" +
    "\021\uffee\022\uffee\024\uffee\026\uffee\027\uffee\030\uffee\032" +
    "\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee" +
    "\041\uffee\042\uffee\043\uffee\046\uffee\047\uffee\050\uffee\051" +
    "\uffee\053\uffee\111\uffee\001\002\000\142\002\uffea\004\uffea" +
    "\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014" +
    "\uffea\015\uffea\021\uffea\022\uffea\024\uffea\026\uffea\027\uffea" +
    "\030\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037" +
    "\uffea\040\uffea\041\uffea\042\uffea\043\uffea\046\uffea\047\uffea" +
    "\050\uffea\051\uffea\053\uffea\061\106\062\104\063\120\064" +
    "\114\065\103\066\115\067\122\070\112\071\121\072\117" +
    "\073\111\074\113\075\116\076\110\077\107\103\105\111" +
    "\uffea\001\002\000\156\002\uffe2\004\uffe2\006\uffe2\007\uffe2" +
    "\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\021" +
    "\uffe2\022\uffe2\024\uffe2\026\uffe2\027\uffe2\030\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041" +
    "\uffe2\042\uffe2\043\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2" +
    "\052\uffe2\053\uffe2\055\uffe2\057\uffe2\061\106\062\104\063" +
    "\120\064\114\065\103\066\115\067\122\070\112\071\121" +
    "\072\117\073\111\074\113\075\116\076\110\077\107\101" +
    "\uffe2\102\uffe2\103\105\104\uffe2\111\uffe2\001\002\000\004" +
    "\002\001\001\002\000\074\016\072\017\066\024\057\025" +
    "\101\026\026\027\012\030\006\031\067\032\035\033\024" +
    "\034\034\035\033\036\025\037\055\040\007\041\027\042" +
    "\052\043\017\044\071\045\076\054\063\056\061\061\100" +
    "\062\070\100\062\103\064\107\077\110\065\111\075\001" +
    "\002\000\044\057\272\061\106\062\104\063\120\064\114" +
    "\065\103\066\115\067\122\070\112\071\121\072\117\073" +
    "\111\074\113\075\116\076\110\077\107\103\105\001\002" +
    "\000\004\052\273\001\002\000\010\007\301\011\300\053" +
    "\277\001\002\000\010\007\uffc9\011\uffc9\053\uffc9\001\002" +
    "\000\100\004\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012" +
    "\uffc1\013\uffc1\014\uffc1\015\uffc1\021\uffc1\022\uffc1\024\uffc1" +
    "\026\uffc1\027\uffc1\030\uffc1\032\uffc1\033\uffc1\034\uffc1\035" +
    "\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1" +
    "\046\uffc1\047\uffc1\050\uffc1\051\uffc1\053\uffc1\111\uffc1\001" +
    "\002\000\100\004\036\006\010\007\301\010\040\011\300" +
    "\012\037\013\054\014\041\015\004\021\053\022\032\024" +
    "\057\026\026\027\012\030\006\032\035\033\024\034\034" +
    "\035\033\036\025\037\055\040\007\041\027\042\052\043" +
    "\017\046\044\047\014\050\005\051\050\053\314\111\042" +
    "\001\002\000\102\002\uffca\004\uffca\006\uffca\007\uffca\010" +
    "\uffca\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca\021\uffca" +
    "\022\uffca\024\uffca\026\uffca\027\uffca\030\uffca\032\uffca\033" +
    "\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca" +
    "\042\uffca\043\uffca\046\uffca\047\uffca\050\uffca\051\uffca\053" +
    "\uffca\111\uffca\001\002\000\004\101\313\001\002\000\074" +
    "\016\072\017\066\024\057\025\101\026\026\027\012\030" +
    "\006\031\067\032\035\033\024\034\034\035\033\036\025" +
    "\037\055\040\007\041\027\042\052\043\017\044\071\045" +
    "\076\054\063\056\061\061\100\062\070\100\062\103\064" +
    "\107\077\110\065\111\075\001\002\000\010\007\301\011" +
    "\300\053\305\001\002\000\010\007\uffc8\011\uffc8\053\uffc8" +
    "\001\002\000\100\004\036\006\010\007\301\010\040\011" +
    "\300\012\037\013\054\014\041\015\004\021\053\022\032" +
    "\024\057\026\026\027\012\030\006\032\035\033\024\034" +
    "\034\035\033\036\025\037\055\040\007\041\027\042\052" +
    "\043\017\046\044\047\014\050\005\051\050\053\306\111" +
    "\042\001\002\000\102\002\uffcc\004\uffcc\006\uffcc\007\uffcc" +
    "\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\021" +
    "\uffcc\022\uffcc\024\uffcc\026\uffcc\027\uffcc\030\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041" +
    "\uffcc\042\uffcc\043\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc" +
    "\053\uffcc\111\uffcc\001\002\000\102\002\uffcd\004\uffcd\006" +
    "\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd" +
    "\015\uffcd\021\uffcd\022\uffcd\024\uffcd\026\uffcd\027\uffcd\030" +
    "\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd" +
    "\040\uffcd\041\uffcd\042\uffcd\043\uffcd\046\uffcd\047\uffcd\050" +
    "\uffcd\051\uffcd\053\uffcd\111\uffcd\001\002\000\100\004\036" +
    "\006\010\007\uffc7\010\040\011\uffc7\012\037\013\054\014" +
    "\041\015\004\021\053\022\032\024\057\026\026\027\012" +
    "\030\006\032\035\033\024\034\034\035\033\036\025\037" +
    "\055\040\007\041\027\042\052\043\017\046\044\047\014" +
    "\050\005\051\050\053\uffc7\111\042\001\002\000\100\004" +
    "\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2" +
    "\014\uffc2\015\uffc2\021\uffc2\022\uffc2\024\uffc2\026\uffc2\027" +
    "\uffc2\030\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2" +
    "\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\046\uffc2\047" +
    "\uffc2\050\uffc2\051\uffc2\053\uffc2\111\uffc2\001\002\000\044" +
    "\061\106\062\104\063\120\064\114\065\103\066\115\067" +
    "\122\070\112\071\121\072\117\073\111\074\113\075\116" +
    "\076\110\077\107\101\312\103\105\001\002\000\100\004" +
    "\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0" +
    "\014\uffc0\015\uffc0\021\uffc0\022\uffc0\024\uffc0\026\uffc0\027" +
    "\uffc0\030\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0" +
    "\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\046\uffc0\047" +
    "\uffc0\050\uffc0\051\uffc0\053\uffc0\111\uffc0\001\002\000\100" +
    "\004\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013" +
    "\uffbf\014\uffbf\015\uffbf\021\uffbf\022\uffbf\024\uffbf\026\uffbf" +
    "\027\uffbf\030\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036" +
    "\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\046\uffbf" +
    "\047\uffbf\050\uffbf\051\uffbf\053\uffbf\111\uffbf\001\002\000" +
    "\102\002\uffcb\004\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb" +
    "\012\uffcb\013\uffcb\014\uffcb\015\uffcb\021\uffcb\022\uffcb\024" +
    "\uffcb\026\uffcb\027\uffcb\030\uffcb\032\uffcb\033\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043" +
    "\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\053\uffcb\111\uffcb" +
    "\001\002\000\156\002\uffda\004\uffda\006\uffda\007\uffda\010" +
    "\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\021\uffda" +
    "\022\uffda\024\uffda\026\uffda\027\uffda\030\uffda\032\uffda\033" +
    "\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda" +
    "\042\uffda\043\uffda\046\uffda\047\uffda\050\uffda\051\uffda\052" +
    "\uffda\053\uffda\055\uffda\057\uffda\061\106\062\104\063\120" +
    "\064\114\065\103\066\115\067\122\070\112\071\121\072" +
    "\117\073\111\074\113\075\116\076\110\077\107\101\uffda" +
    "\102\uffda\103\105\104\uffda\111\uffda\001\002\000\156\002" +
    "\uffe1\004\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\015\uffe1\021\uffe1\022\uffe1\024\uffe1\026" +
    "\uffe1\027\uffe1\030\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1" +
    "\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\046" +
    "\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\055\uffe1" +
    "\057\uffe1\061\106\062\104\063\120\064\114\065\103\066" +
    "\115\067\122\070\112\071\121\072\117\073\111\074\113" +
    "\075\116\076\110\077\107\101\uffe1\102\uffe1\103\105\104" +
    "\uffe1\111\uffe1\001\002\000\142\002\uffe9\004\uffe9\006\uffe9" +
    "\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015" +
    "\uffe9\021\uffe9\022\uffe9\024\uffe9\026\uffe9\027\uffe9\030\uffe9" +
    "\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040" +
    "\uffe9\041\uffe9\042\uffe9\043\uffe9\046\uffe9\047\uffe9\050\uffe9" +
    "\051\uffe9\053\uffe9\061\106\062\104\063\120\064\114\065" +
    "\103\066\115\067\122\070\112\071\121\072\117\073\111" +
    "\074\113\075\116\076\110\077\107\103\105\111\uffe9\001" +
    "\002\000\004\012\321\001\002\000\004\056\322\001\002" +
    "\000\074\016\072\017\066\024\057\025\101\026\026\027" +
    "\012\030\006\031\067\032\035\033\024\034\034\035\033" +
    "\036\025\037\055\040\007\041\027\042\052\043\017\044" +
    "\071\045\076\054\063\056\061\061\100\062\070\100\062" +
    "\103\064\107\077\110\065\111\075\001\002\000\044\057" +
    "\324\061\106\062\104\063\120\064\114\065\103\066\115" +
    "\067\122\070\112\071\121\072\117\073\111\074\113\075" +
    "\116\076\110\077\107\103\105\001\002\000\104\002\uffce" +
    "\004\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013" +
    "\uffce\014\uffce\015\uffce\021\uffce\022\uffce\024\uffce\026\uffce" +
    "\027\uffce\030\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036" +
    "\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\046\uffce" +
    "\047\uffce\050\uffce\051\uffce\053\uffce\102\uffce\111\uffce\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\322\000\044\002\010\003\020\004\017\006\046\007" +
    "\021\010\030\011\042\016\012\017\044\020\015\021\045" +
    "\022\057\024\055\025\014\026\027\031\050\032\022\001" +
    "\001\000\004\005\317\001\001\000\006\026\072\030\316" +
    "\001\001\000\006\026\072\030\315\001\001\000\006\026" +
    "\072\030\314\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\072\030\265\001\001\000\002\001\001\000" +
    "\006\026\072\030\264\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\026\072\030\261\001\001\000\002\001" +
    "\001\000\040\004\215\006\046\007\021\010\030\011\042" +
    "\016\012\017\044\020\015\021\045\022\057\024\055\025" +
    "\014\026\027\031\050\032\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\026\072\030\260\001\001\000" +
    "\006\026\072\030\257\001\001\000\006\026\072\030\256" +
    "\001\001\000\006\026\072\030\255\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\072\030\245\001\001" +
    "\000\006\026\072\030\244\001\001\000\006\026\072\030" +
    "\243\001\001\000\006\026\072\030\242\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\176\001\001\000\002\001\001\000\006" +
    "\026\072\030\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\072\030\167\001\001" +
    "\000\002\001\001\000\006\026\072\030\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\072\030\161" +
    "\001\001\000\002\001\001\000\006\026\072\030\073\001" +
    "\001\000\002\001\001\000\006\026\072\030\155\001\001" +
    "\000\006\026\072\030\154\001\001\000\006\026\072\030" +
    "\151\001\001\000\006\026\072\030\150\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\026\072\030\147\001" +
    "\001\000\006\026\072\030\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\026\072\030\145\001\001\000\002" +
    "\001\001\000\006\026\072\030\144\001\001\000\006\026" +
    "\072\030\101\001\001\000\002\001\001\000\006\026\072" +
    "\030\143\001\001\000\006\026\072\030\142\001\001\000" +
    "\006\026\072\030\141\001\001\000\006\026\072\030\140" +
    "\001\001\000\006\026\072\030\137\001\001\000\006\026" +
    "\072\030\136\001\001\000\006\026\072\030\135\001\001" +
    "\000\006\026\072\030\134\001\001\000\006\026\072\030" +
    "\133\001\001\000\006\026\072\030\132\001\001\000\006" +
    "\026\072\030\131\001\001\000\006\026\072\030\126\001" +
    "\001\000\006\026\072\030\125\001\001\000\006\026\072" +
    "\030\124\001\001\000\006\026\072\030\123\001\001\000" +
    "\006\026\072\030\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\072\030\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\026\072\030\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\072\030\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\026\072\030\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\072\030\220\001\001" +
    "\000\006\026\072\030\206\001\001\000\006\026\072\030" +
    "\204\001\001\000\002\001\001\000\006\026\072\030\203" +
    "\001\001\000\006\026\072\030\201\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\026\072\030" +
    "\210\001\001\000\004\005\211\001\001\000\002\001\001" +
    "\000\042\003\213\004\017\006\046\007\021\010\030\011" +
    "\042\016\012\017\044\020\015\021\045\022\057\024\055" +
    "\025\014\026\027\031\050\032\022\001\001\000\040\004" +
    "\215\006\046\007\021\010\030\011\042\016\012\017\044" +
    "\020\015\021\045\022\057\024\055\025\014\026\027\031" +
    "\050\032\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\224" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\072\030\227\001\001\000\002\001\001\000\004\005\231" +
    "\001\001\000\002\001\001\000\006\026\072\030\233\001" +
    "\001\000\002\001\001\000\004\005\235\001\001\000\002" +
    "\001\001\000\006\026\072\030\237\001\001\000\002\001" +
    "\001\000\004\005\241\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\250\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\026\072\030\252\001\001\000\002\001" +
    "\001\000\004\005\254\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\072\030\270\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\301\013\273\014\275\015\274\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\003\306" +
    "\004\017\006\046\007\021\010\030\011\042\015\307\016" +
    "\012\017\044\020\015\021\045\022\057\024\055\025\014" +
    "\026\027\031\050\032\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\026\072\030\310\001\001\000\010" +
    "\013\302\014\303\015\274\001\001\000\002\001\001\000" +
    "\044\003\306\004\017\006\046\007\021\010\030\011\042" +
    "\015\307\016\012\017\044\020\015\021\045\022\057\024" +
    "\055\025\014\026\027\031\050\032\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\004\215\006\046\007" +
    "\021\010\030\011\042\016\012\017\044\020\015\021\045" +
    "\022\057\024\055\025\014\026\027\031\050\032\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\026\072\030\322\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo de acciones
  //Codigo visible
    
    //public ASTfs arbol;
    //public ArrayList<ErrorE> errorSintactico = new ArrayList<>();
    
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int columna = s.right;
        int fila = s.left;
        
        System.out.println("!!!!!!!---- Error Sintactico Recuperado ----!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        String aux = "Error Sintactico Recuperado: " + "\t\tLexema: "+lexema + " \t\tFila: "+fila +" \t\tColumna: "+columna;
        /*errorSintactico.add(new ErrorE(aux));*/
    }

   
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int columna = s.right;
        int fila = s.left;
        
        System.err.println("Error caracter no esperado");
        System.err.println(s);
        System.out.println("!!!!!!! Error Sintactico, Panic Mode!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);  
        
        String aux1 = "Error Sintactico, Modo Panico: " + "\t\tLexema: "+lexema + " \t\tFila: "+fila +" \t\tColumna: "+columna;
        //errorSintactico.add(new ErrorE(aux1));
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {

//Codigo de acciones
      

  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // E ::= nulo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // E ::= falsee 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E ::= truee 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E ::= id 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E ::= ERdecimal 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E ::= ERnumero 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // E ::= arrayy E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // E ::= matrix E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // E ::= listt E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // E ::= FUNCIONESLENGUAJE 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E ::= aparentesis E cparentesis E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E ::= aparentesis E cparentesis 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E ::= acorchete E ccorchete E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E ::= acorchete E ccorchete 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E ::= coma E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E ::= E coma 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E ::= E coma E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E ::= E interrogacion E dospuntos E 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int vddleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int vddright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object vdd = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fakeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fakeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object fake = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E ::= E diferente E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E ::= E igualigual E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E ::= E menorigualq E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E ::= E mayorigualq E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E ::= E menorq E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E ::= E mayorq E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E ::= E modulo E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E ::= E potencia E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E ::= E division E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E ::= E por E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E ::= E resta E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E ::= E suma E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E ::= E and E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E ::= E or E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E ::= not E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= suma E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E ::= resta E 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // BLOQUESENTENCIAS ::= allave CUERPO cllave 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUESENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACIONES ::= id igual E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IF_LISTA ::= IF_LISTA elsee iff aparentesis E cparentesis BLOQUESENTENCIAS 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF_LISTA",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IF_LISTA ::= iff aparentesis E cparentesis BLOQUESENTENCIAS 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF_LISTA",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // IFSTATEMENT ::= IF_LISTA 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IFSTATEMENT",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IFSTATEMENT ::= IF_LISTA elsee BLOQUESENTENCIAS 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IFSTATEMENT",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SWITCHLABEL ::= defaultt dospuntos 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHLABEL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SWITCHLABEL ::= casee E dospuntos 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHLABEL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SWITCHLABELS ::= SWITCHLABEL 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHLABELS",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SWITCHLABELS ::= SWITCHLABELS SWITCHLABEL 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHLABELS",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIATRANSFERENCIA ::= returnn E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIATRANSFERENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIATRANSFERENCIA ::= returnn 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIATRANSFERENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIATRANSFERENCIA ::= breakk 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIATRANSFERENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIATRANSFERENCIA ::= continuee 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIATRANSFERENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SWITCHBLOCKSTATEMENTGRO ::= SWITCHLABELS CUERPO 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHBLOCKSTATEMENTGRO",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SWITCHBLOCKSTATEMENTGROUPS ::= SWITCHBLOCKSTATEMENTGROUPS SWITCHBLOCKSTATEMENTGRO 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHBLOCKSTATEMENTGROUPS",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SWITCHBLOCKSTATEMENTGROUPS ::= SWITCHBLOCKSTATEMENTGRO 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHBLOCKSTATEMENTGROUPS",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SWITCHSTATEMENT ::= switchh aparentesis E cparentesis allave cllave 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHSTATEMENT",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SWITCHSTATEMENT ::= switchh aparentesis E cparentesis allave SWITCHLABELS cllave 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHSTATEMENT",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SWITCHSTATEMENT ::= switchh aparentesis E cparentesis allave SWITCHBLOCKSTATEMENTGROUPS cllave 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHSTATEMENT",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SWITCHSTATEMENT ::= switchh aparentesis E cparentesis allave SWITCHBLOCKSTATEMENTGROUPS SWITCHLABELS cllave 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHSTATEMENT",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DOWHILE ::= doo BLOQUESENTENCIAS whilee aparentesis E cparentesis 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DOWHILE",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // WHILEE ::= whilee aparentesis E cparentesis BLOQUESENTENCIAS 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILEE",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INICIALIZACION ::= id inn E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALIZACION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FORR ::= forr aparentesis INICIALIZACION cparentesis BLOQUESENTENCIAS 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FORR",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FUNCIONESMETODOS ::= id igual E flecha BLOQUESENTENCIAS 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESMETODOS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FUNCIONESMETODOS ::= id igual functionn E BLOQUESENTENCIAS 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESMETODOS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LLAMADASFUNCIONES ::= id aparentesis cparentesis 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADASFUNCIONES",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LLAMADASFUNCIONES ::= id aparentesis E cparentesis 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADASFUNCIONES",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IMPRIMIR ::= print aparentesis E cparentesis 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FUNCIONESLENGUAJE ::= modee E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESLENGUAJE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FUNCIONESLENGUAJE ::= mediann E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESLENGUAJE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FUNCIONESLENGUAJE ::= meann E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESLENGUAJE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FUNCIONESLENGUAJE ::= roundd E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESLENGUAJE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FUNCIONESLENGUAJE ::= trunkk E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESLENGUAJE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FUNCIONESLENGUAJE ::= touppercase E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESLENGUAJE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FUNCIONESLENGUAJE ::= tolowercase E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESLENGUAJE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FUNCIONESLENGUAJE ::= removee E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESLENGUAJE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FUNCIONESLENGUAJE ::= stringlength E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESLENGUAJE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUNCIONESLENGUAJE ::= nrow E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESLENGUAJE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUNCIONESLENGUAJE ::= nCol E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESLENGUAJE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FUNCIONESLENGUAJE ::= lengthh E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESLENGUAJE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCIONESLENGUAJE ::= typeoff E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESLENGUAJE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNCIONESLENGUAJE ::= c E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESLENGUAJE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTACORCHETES ::= acorchete E ccorchete 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTACORCHETES",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTACORCHETES ::= LISTACORCHETES acorchete E ccorchete 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTACORCHETES",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MODIFICADORVALOR ::= id LISTACORCHETES igual E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADORVALOR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // GRAFICAS ::= hist E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GRAFICAS",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // GRAFICAS ::= plot E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GRAFICAS",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // GRAFICAS ::= barplot E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GRAFICAS",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // GRAFICAS ::= pie E 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GRAFICAS",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= GRAFICAS 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= FUNCIONESLENGUAJE 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= IMPRIMIR puntoycoma 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= IMPRIMIR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= LLAMADASFUNCIONES puntoycoma 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= LLAMADASFUNCIONES 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= FUNCIONESMETODOS 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIATRANSFERENCIA puntoycoma 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= FORR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= DOWHILE 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= DOWHILE puntoycoma 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= WHILEE 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SWITCHSTATEMENT 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= IFSTATEMENT 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= MODIFICADORVALOR puntoycoma 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= MODIFICADORVALOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= DECLARACIONES puntoycoma 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DECLARACIONES 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO ::= SENTENCIA 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CUERPO ::= CUERPO SENTENCIA 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= CUERPO 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

