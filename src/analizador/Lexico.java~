/* The following code was generated by JFlex 1.6.1 */

package analizador;

import java_cup.runtime.*;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/analizador/lexico.jflex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int comentariosimple = 2;
  public static final int comentariomultiple = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 53, 54, 57, 56, 56,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    53, 39,  0, 55,  0, 36, 41,  0, 28, 29, 33, 31, 45, 32, 47, 34, 
    46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 43, 44, 38, 30, 37, 40, 
     0, 10, 11,  8, 14,  3,  2, 20,  9, 49, 48, 51,  4, 21, 17, 18, 
    16, 48, 12, 50,  7, 15, 22,  6, 23, 19, 48, 26,  0, 27, 35, 52, 
     0, 10, 11,  8, 14,  3,  2, 20,  9, 49, 48, 51,  4, 21, 17, 18, 
    16, 48, 12, 50,  7, 15, 22,  6, 23, 19, 48, 24, 42, 25,  0,  0, 
     0,  0,  0,  0,  0, 57,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 48,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 48,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\3\2\1\1\2\2\1\3\11\2\1\4"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\1\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\1\2\2"+
    "\1\32\1\33\1\34\1\35\1\36\1\34\1\37\1\40"+
    "\4\2\1\0\2\2\2\0\6\2\1\0\7\2\1\41"+
    "\1\0\11\2\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\0\1\37\1\40\2\2\1\50\1\51\2\2\1\52"+
    "\1\0\1\2\1\0\2\2\3\0\5\2\1\0\2\2"+
    "\1\0\10\2\1\53\1\2\1\0\1\2\1\53\7\2"+
    "\1\54\2\2\1\0\2\2\2\55\1\56\1\2\1\56"+
    "\3\0\1\2\1\57\4\2\2\60\1\2\2\61\7\2"+
    "\1\62\1\0\1\2\1\63\1\64\1\65\1\66\1\0"+
    "\2\2\1\67\2\2\2\70\2\2\2\0\2\71\2\72"+
    "\3\2\1\0\1\2\1\73\1\2\2\74\2\2\1\75"+
    "\1\2\2\76\1\0\1\2\1\0\3\2\1\0\1\2"+
    "\1\77\1\100\1\0\2\2\1\101\1\0\2\2\1\102"+
    "\1\103\1\2\2\104\2\105\1\100\1\2\1\0\1\2"+
    "\1\0\2\2\1\0\1\2\1\106\1\107\1\2\2\110"+
    "\1\0\2\2\2\111\1\2\1\0\3\2\2\0\1\2"+
    "\1\0\2\2\1\0\2\112\2\113\1\2\2\114";

  private static int [] zzUnpackAction() {
    int [] result = new int[274];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366"+
    "\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\256\0\256\0\256"+
    "\0\256\0\256\0\256\0\u04c2\0\256\0\256\0\256\0\256"+
    "\0\256\0\u04fc\0\u0536\0\u0570\0\u05aa\0\256\0\256\0\256"+
    "\0\256\0\256\0\256\0\u05e4\0\u061e\0\u0658\0\u0692\0\256"+
    "\0\u06cc\0\256\0\256\0\256\0\u0706\0\256\0\256\0\u0740"+
    "\0\u077a\0\u07b4\0\u07ee\0\u0828\0\u0862\0\u089c\0\u08d6\0\u0910"+
    "\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0"+
    "\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u03da\0\u0c76"+
    "\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46"+
    "\0\u0e80\0\256\0\256\0\256\0\256\0\256\0\256\0\u0eba"+
    "\0\u03da\0\u03da\0\u0ef4\0\u0f2e\0\256\0\256\0\u0f68\0\u0fa2"+
    "\0\u03da\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138"+
    "\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308"+
    "\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u1464\0\u149e\0\u14d8"+
    "\0\u1512\0\u154c\0\256\0\u1586\0\u15c0\0\u15fa\0\u03da\0\u1634"+
    "\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790\0\u0eba\0\u17ca"+
    "\0\u1804\0\u183e\0\u1878\0\u18b2\0\256\0\u03da\0\256\0\u18ec"+
    "\0\u03da\0\u1926\0\u1960\0\u199a\0\u19d4\0\u03da\0\u1a0e\0\u1a48"+
    "\0\u1a82\0\u1abc\0\256\0\u03da\0\u1af6\0\256\0\u03da\0\u1b30"+
    "\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u03da\0\u1cc6"+
    "\0\u1d00\0\u03da\0\u03da\0\u03da\0\u03da\0\u1d3a\0\u1d74\0\u1dae"+
    "\0\u03da\0\u1de8\0\u1e22\0\256\0\u03da\0\u1e5c\0\u1e96\0\u1ed0"+
    "\0\u1f0a\0\256\0\u03da\0\256\0\u03da\0\u1f44\0\u1f7e\0\u1fb8"+
    "\0\u1ff2\0\u202c\0\u03da\0\u2066\0\256\0\u03da\0\u20a0\0\u20da"+
    "\0\u03da\0\u2114\0\256\0\u03da\0\u214e\0\u2188\0\u21c2\0\u21fc"+
    "\0\u2236\0\u2270\0\u22aa\0\u22e4\0\u03da\0\256\0\u231e\0\u2358"+
    "\0\u2392\0\u03da\0\u23cc\0\u2406\0\u2440\0\u03da\0\u03da\0\u247a"+
    "\0\256\0\u03da\0\256\0\u03da\0\u03da\0\u24b4\0\u24ee\0\u2528"+
    "\0\u2562\0\u259c\0\u25d6\0\u2610\0\u264a\0\u03da\0\u03da\0\u2684"+
    "\0\256\0\u03da\0\u26be\0\u26f8\0\u2732\0\256\0\u03da\0\u276c"+
    "\0\u27a6\0\u27e0\0\u281a\0\u2854\0\u288e\0\u28c8\0\u2902\0\u293c"+
    "\0\u2976\0\u29b0\0\u29ea\0\256\0\u03da\0\256\0\u03da\0\u2a24"+
    "\0\256\0\u03da";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[274];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\4\1\21\1\22"+
    "\1\23\1\24\3\22\1\25\2\22\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\22\1\56\1\57"+
    "\1\22\1\4\2\60\1\61\1\60\1\0\66\62\1\63"+
    "\1\62\2\64\41\62\1\65\24\62\1\64\1\62\1\64"+
    "\75\0\1\66\16\0\1\67\52\0\3\22\1\0\4\22"+
    "\1\70\2\22\1\0\1\22\1\71\2\22\1\72\5\22"+
    "\26\0\7\22\7\0\2\22\1\73\1\0\7\22\1\0"+
    "\12\22\26\0\7\22\6\0\1\74\1\22\1\75\1\22"+
    "\1\0\7\22\1\0\12\22\26\0\3\22\1\76\3\22"+
    "\13\0\1\77\1\100\64\0\3\22\1\0\3\22\1\101"+
    "\3\22\1\0\12\22\26\0\7\22\7\0\3\22\1\0"+
    "\6\22\1\102\1\0\4\22\1\103\1\104\4\22\26\0"+
    "\7\22\7\0\3\22\1\0\4\22\1\105\2\22\1\0"+
    "\4\22\1\106\5\22\26\0\7\22\6\0\1\107\3\22"+
    "\1\0\7\22\1\0\12\22\26\0\3\22\1\110\3\22"+
    "\7\0\3\22\1\0\6\22\1\111\1\0\12\22\26\0"+
    "\7\22\7\0\3\22\1\0\4\22\1\112\1\22\1\113"+
    "\1\0\12\22\26\0\7\22\7\0\1\22\1\114\1\22"+
    "\1\0\7\22\1\0\4\22\1\115\5\22\26\0\7\22"+
    "\7\0\1\22\1\116\1\22\1\0\7\22\1\0\4\22"+
    "\1\117\5\22\26\0\7\22\7\0\3\22\1\0\7\22"+
    "\1\0\12\22\26\0\7\22\6\0\1\120\2\22\1\121"+
    "\1\0\6\22\1\122\1\0\12\22\26\0\3\22\1\123"+
    "\3\22\7\0\3\22\1\0\2\22\1\124\3\22\1\125"+
    "\1\0\1\22\1\126\10\22\26\0\7\22\7\0\1\22"+
    "\1\127\1\22\1\0\4\22\1\130\2\22\1\0\4\22"+
    "\1\131\5\22\26\0\7\22\43\0\1\132\6\0\1\133"+
    "\70\0\1\134\63\0\1\135\71\0\1\136\71\0\1\137"+
    "\111\0\1\54\1\140\14\0\3\22\1\0\7\22\1\0"+
    "\12\22\30\0\4\22\10\0\1\141\2\22\1\0\7\22"+
    "\1\0\3\22\1\142\6\22\26\0\7\22\7\0\3\22"+
    "\1\0\1\143\1\144\5\22\1\0\12\22\26\0\7\22"+
    "\46\0\1\145\117\0\1\146\4\0\2\22\1\147\1\0"+
    "\7\22\1\0\12\22\26\0\7\22\7\0\3\22\1\0"+
    "\7\22\1\0\3\22\1\150\6\22\26\0\7\22\7\0"+
    "\3\22\1\0\6\22\1\151\1\0\12\22\26\0\7\22"+
    "\7\0\3\22\1\152\7\22\1\0\12\22\26\0\4\22"+
    "\1\153\2\22\12\0\1\154\54\0\1\154\11\0\3\22"+
    "\1\0\7\22\1\0\3\22\1\155\6\22\26\0\7\22"+
    "\7\0\3\22\1\154\7\22\1\0\12\22\26\0\4\22"+
    "\1\156\2\22\6\0\1\157\57\0\1\157\24\0\1\160"+
    "\56\0\1\161\3\22\1\0\7\22\1\0\12\22\26\0"+
    "\3\22\1\162\3\22\7\0\3\22\1\0\7\22\1\0"+
    "\1\22\1\163\10\22\26\0\7\22\7\0\2\22\1\164"+
    "\1\0\7\22\1\0\1\22\1\165\10\22\26\0\7\22"+
    "\7\0\3\22\1\0\7\22\1\0\2\22\1\166\7\22"+
    "\26\0\7\22\7\0\3\22\1\167\7\22\1\0\12\22"+
    "\26\0\4\22\1\170\2\22\7\0\3\22\1\0\7\22"+
    "\1\0\3\22\1\171\6\22\26\0\7\22\12\0\1\172"+
    "\54\0\1\172\11\0\3\22\1\172\7\22\1\0\12\22"+
    "\26\0\4\22\1\173\2\22\7\0\3\22\1\0\6\22"+
    "\1\174\1\0\12\22\26\0\7\22\7\0\3\22\1\0"+
    "\6\22\1\175\1\0\12\22\26\0\7\22\7\0\1\22"+
    "\1\176\1\22\1\0\7\22\1\0\12\22\26\0\7\22"+
    "\7\0\3\22\1\0\1\22\1\177\5\22\1\0\7\22"+
    "\1\200\2\22\26\0\7\22\7\0\3\22\1\0\7\22"+
    "\1\0\1\22\1\201\10\22\26\0\7\22\7\0\1\202"+
    "\2\22\1\0\7\22\1\0\12\22\26\0\7\22\10\0"+
    "\1\203\70\0\3\22\1\0\7\22\1\0\4\22\1\204"+
    "\5\22\26\0\7\22\6\0\1\205\3\22\1\0\7\22"+
    "\1\0\12\22\26\0\3\22\1\206\3\22\7\0\1\22"+
    "\1\207\1\22\1\0\7\22\1\0\12\22\26\0\7\22"+
    "\7\0\3\22\1\0\7\22\1\0\4\22\1\210\5\22"+
    "\26\0\7\22\7\0\3\22\1\0\7\22\1\0\4\22"+
    "\1\211\5\22\26\0\7\22\7\0\2\22\1\212\1\0"+
    "\7\22\1\0\12\22\26\0\7\22\7\0\3\22\1\0"+
    "\4\22\1\213\2\22\1\0\1\214\11\22\26\0\7\22"+
    "\7\0\3\22\1\0\1\22\1\215\5\22\1\0\12\22"+
    "\26\0\7\22\7\0\3\22\1\0\7\22\1\0\1\216"+
    "\11\22\26\0\7\22\63\0\1\217\14\0\1\157\3\22"+
    "\1\0\7\22\1\0\12\22\26\0\3\22\1\220\3\22"+
    "\7\0\3\22\1\0\6\22\1\221\1\0\12\22\26\0"+
    "\7\22\7\0\3\22\1\222\7\22\1\0\12\22\26\0"+
    "\4\22\1\223\2\22\7\0\3\22\1\0\2\22\1\224"+
    "\4\22\1\0\12\22\26\0\7\22\10\0\1\225\70\0"+
    "\1\22\1\226\1\22\1\0\7\22\1\0\12\22\26\0"+
    "\7\22\14\0\1\227\64\0\3\22\1\0\7\22\1\0"+
    "\6\22\1\230\3\22\26\0\7\22\7\0\3\22\1\0"+
    "\1\22\1\231\5\22\1\0\12\22\26\0\7\22\14\0"+
    "\1\232\63\0\1\233\57\0\1\233\14\0\1\234\67\0"+
    "\2\22\1\235\1\0\7\22\1\0\12\22\26\0\7\22"+
    "\7\0\1\22\1\236\1\22\1\0\7\22\1\0\3\22"+
    "\1\237\6\22\26\0\7\22\7\0\3\22\1\0\7\22"+
    "\1\0\4\22\1\240\5\22\26\0\7\22\7\0\3\22"+
    "\1\0\7\22\1\0\2\22\1\241\7\22\26\0\7\22"+
    "\7\0\1\22\1\242\1\22\1\0\7\22\1\0\12\22"+
    "\26\0\7\22\10\0\1\243\70\0\1\22\1\244\1\22"+
    "\1\0\7\22\1\0\12\22\26\0\7\22\7\0\3\22"+
    "\1\0\1\22\1\245\5\22\1\0\12\22\26\0\7\22"+
    "\14\0\1\246\64\0\3\22\1\0\1\22\1\247\5\22"+
    "\1\0\12\22\26\0\7\22\7\0\3\22\1\0\4\22"+
    "\1\250\2\22\1\0\12\22\26\0\7\22\7\0\3\22"+
    "\1\0\7\22\1\0\2\22\1\251\7\22\26\0\7\22"+
    "\7\0\3\22\1\0\4\22\1\252\2\22\1\0\12\22"+
    "\26\0\7\22\7\0\3\22\1\0\7\22\1\0\1\22"+
    "\1\253\10\22\26\0\7\22\7\0\3\22\1\0\7\22"+
    "\1\0\4\22\1\254\5\22\26\0\7\22\7\0\3\22"+
    "\1\0\7\22\1\0\3\22\1\255\6\22\26\0\7\22"+
    "\7\0\3\22\1\0\4\22\1\256\2\22\1\0\12\22"+
    "\26\0\7\22\7\0\3\22\1\0\1\22\1\257\5\22"+
    "\1\0\12\22\26\0\7\22\26\0\1\260\52\0\3\22"+
    "\1\0\7\22\1\0\3\22\1\261\6\22\26\0\7\22"+
    "\7\0\2\22\1\262\1\0\7\22\1\0\12\22\26\0"+
    "\7\22\7\0\3\22\1\0\1\263\6\22\1\0\12\22"+
    "\26\0\7\22\7\0\2\22\1\264\1\0\7\22\1\0"+
    "\12\22\26\0\7\22\7\0\3\22\1\0\7\22\1\0"+
    "\3\22\1\265\6\22\26\0\7\22\6\0\1\266\3\22"+
    "\1\0\7\22\1\0\12\22\26\0\3\22\1\267\3\22"+
    "\7\0\3\22\1\0\6\22\1\270\1\0\12\22\26\0"+
    "\7\22\7\0\1\22\1\271\1\22\1\0\7\22\1\0"+
    "\12\22\26\0\7\22\7\0\3\22\1\0\1\22\1\272"+
    "\5\22\1\0\12\22\26\0\7\22\6\0\1\233\3\22"+
    "\1\0\7\22\1\0\12\22\26\0\3\22\1\273\3\22"+
    "\10\0\1\274\70\0\1\22\1\275\1\22\1\0\7\22"+
    "\1\0\12\22\26\0\7\22\7\0\3\22\1\0\1\22"+
    "\1\276\5\22\1\0\12\22\26\0\7\22\7\0\3\22"+
    "\1\0\1\22\1\277\5\22\1\0\12\22\26\0\7\22"+
    "\15\0\1\300\102\0\1\301\53\0\1\302\70\0\1\22"+
    "\1\303\1\22\1\0\7\22\1\0\12\22\26\0\7\22"+
    "\7\0\3\22\1\0\7\22\1\304\12\22\26\0\5\22"+
    "\1\305\1\22\7\0\3\22\1\0\1\306\6\22\1\0"+
    "\12\22\26\0\7\22\7\0\3\22\1\0\7\22\1\0"+
    "\2\22\1\307\7\22\26\0\7\22\7\0\3\22\1\0"+
    "\7\22\1\0\4\22\1\310\5\22\26\0\7\22\6\0"+
    "\1\311\3\22\1\0\7\22\1\0\12\22\26\0\3\22"+
    "\1\312\3\22\7\0\3\22\1\0\7\22\1\0\5\22"+
    "\1\313\4\22\26\0\7\22\7\0\2\22\1\314\1\0"+
    "\7\22\1\0\12\22\26\0\7\22\7\0\3\22\1\0"+
    "\7\22\1\315\12\22\26\0\5\22\1\316\1\22\7\0"+
    "\3\22\1\0\6\22\1\317\1\0\12\22\26\0\7\22"+
    "\7\0\3\22\1\0\7\22\1\0\10\22\1\320\1\22"+
    "\26\0\7\22\7\0\3\22\1\0\7\22\1\0\1\321"+
    "\11\22\26\0\7\22\7\0\3\22\1\0\7\22\1\0"+
    "\1\22\1\322\10\22\26\0\7\22\14\0\1\323\64\0"+
    "\3\22\1\0\1\22\1\324\5\22\1\0\12\22\26\0"+
    "\7\22\17\0\1\325\61\0\3\22\1\0\4\22\1\326"+
    "\2\22\1\0\12\22\26\0\7\22\6\0\1\327\3\22"+
    "\1\0\7\22\1\0\12\22\26\0\3\22\1\330\3\22"+
    "\7\0\3\22\1\0\2\22\1\331\4\22\1\0\12\22"+
    "\26\0\7\22\7\0\3\22\1\0\7\22\1\0\3\22"+
    "\1\332\6\22\26\0\7\22\6\0\1\333\3\22\1\0"+
    "\7\22\1\0\12\22\26\0\3\22\1\334\3\22\7\0"+
    "\3\22\1\0\3\22\1\335\3\22\1\0\12\22\26\0"+
    "\7\22\16\0\1\336\104\0\1\337\47\0\1\22\1\340"+
    "\1\22\1\0\7\22\1\0\12\22\26\0\7\22\7\0"+
    "\1\22\1\341\1\22\1\0\7\22\1\0\12\22\26\0"+
    "\7\22\7\0\1\342\2\22\1\0\7\22\1\0\12\22"+
    "\26\0\7\22\26\0\1\343\52\0\3\22\1\0\7\22"+
    "\1\0\3\22\1\344\6\22\26\0\7\22\7\0\3\22"+
    "\1\0\7\22\1\0\4\22\1\345\5\22\26\0\7\22"+
    "\7\0\3\22\1\0\7\22\1\0\3\22\1\346\6\22"+
    "\26\0\7\22\7\0\1\22\1\347\1\22\1\0\7\22"+
    "\1\0\12\22\26\0\7\22\7\0\2\22\1\350\1\0"+
    "\7\22\1\0\12\22\26\0\7\22\26\0\1\351\52\0"+
    "\3\22\1\0\7\22\1\0\3\22\1\352\6\22\26\0"+
    "\7\22\34\0\1\353\44\0\3\22\1\0\7\22\1\0"+
    "\11\22\1\354\26\0\7\22\7\0\3\22\1\0\3\22"+
    "\1\355\3\22\1\0\12\22\26\0\7\22\7\0\3\22"+
    "\1\0\7\22\1\0\6\22\1\356\3\22\26\0\7\22"+
    "\27\0\1\357\51\0\3\22\1\0\7\22\1\0\4\22"+
    "\1\360\5\22\26\0\7\22\11\0\1\361\67\0\3\22"+
    "\1\0\6\22\1\362\1\0\12\22\26\0\7\22\7\0"+
    "\3\22\1\0\6\22\1\363\1\0\12\22\26\0\7\22"+
    "\24\0\1\364\54\0\3\22\1\0\7\22\1\0\1\22"+
    "\1\365\10\22\26\0\7\22\7\0\3\22\1\0\1\22"+
    "\1\366\5\22\1\0\12\22\26\0\7\22\7\0\3\22"+
    "\1\0\1\22\1\367\5\22\1\0\12\22\26\0\7\22"+
    "\7\0\2\22\1\370\1\0\7\22\1\0\12\22\26\0"+
    "\7\22\26\0\1\371\52\0\3\22\1\0\7\22\1\0"+
    "\3\22\1\372\6\22\26\0\7\22\10\0\1\373\70\0"+
    "\3\22\1\0\2\22\1\374\4\22\1\0\12\22\26\0"+
    "\7\22\7\0\3\22\1\0\2\22\1\375\4\22\1\0"+
    "\12\22\26\0\7\22\10\0\1\376\70\0\1\22\1\377"+
    "\1\22\1\0\7\22\1\0\12\22\26\0\7\22\7\0"+
    "\1\22\1\u0100\1\22\1\0\7\22\1\0\12\22\26\0"+
    "\7\22\26\0\1\u0101\52\0\3\22\1\0\4\22\1\u0102"+
    "\2\22\1\0\12\22\26\0\7\22\7\0\3\22\1\0"+
    "\4\22\1\u0103\2\22\1\0\12\22\26\0\7\22\7\0"+
    "\3\22\1\0\7\22\1\0\3\22\1\u0104\6\22\26\0"+
    "\7\22\31\0\1\u0105\47\0\3\22\1\u0106\7\22\1\0"+
    "\12\22\26\0\4\22\1\u0107\2\22\7\0\3\22\1\u0108"+
    "\7\22\1\0\12\22\26\0\4\22\1\u0109\2\22\7\0"+
    "\3\22\1\0\7\22\1\0\6\22\1\u010a\3\22\26\0"+
    "\7\22\14\0\1\u010b\65\0\1\u010c\70\0\1\22\1\u010d"+
    "\1\22\1\0\7\22\1\0\12\22\26\0\7\22\10\0"+
    "\1\u010e\70\0\1\22\1\u010f\1\22\1\0\7\22\1\0"+
    "\12\22\26\0\7\22\7\0\3\22\1\0\1\22\1\u0110"+
    "\5\22\1\0\12\22\26\0\7\22\16\0\1\u0111\62\0"+
    "\3\22\1\0\3\22\1\u0112\3\22\1\0\12\22\26\0"+
    "\7\22\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10846];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\21\1\6\11\1\1\5\11\4\1\6\11"+
    "\4\1\1\11\1\1\3\11\1\1\2\11\4\1\1\0"+
    "\2\1\2\0\6\1\1\0\10\1\1\0\11\1\6\11"+
    "\1\0\4\1\2\11\3\1\1\0\1\1\1\0\2\1"+
    "\3\0\5\1\1\0\2\1\1\0\10\1\1\11\1\1"+
    "\1\0\14\1\1\0\2\1\1\11\1\1\1\11\2\1"+
    "\3\0\6\1\1\11\2\1\1\11\11\1\1\0\5\1"+
    "\1\0\5\1\1\11\3\1\2\0\1\11\1\1\1\11"+
    "\4\1\1\0\3\1\1\11\5\1\1\11\1\1\1\0"+
    "\1\1\1\0\3\1\1\0\2\1\1\11\1\0\3\1"+
    "\1\0\5\1\1\11\1\1\1\11\3\1\1\0\1\1"+
    "\1\0\2\1\1\0\4\1\1\11\1\1\1\0\2\1"+
    "\1\11\2\1\1\0\3\1\2\0\1\1\1\0\2\1"+
    "\1\0\1\11\1\1\1\11\2\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[274];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //cod
    //metodo para error
    //public static ArrayList<ErrorE> errorLexico = new ArrayList<ErrorE>();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("ERROR LEXICO: <<"+yytext()+">> Linea: "+yyline+" ,Columna: "+yycolumn);
                            /*errorLexico.add(new ErrorE("ERROR LEXICO: <<"+yytext()+">> Linea: "+yyline+" ,Columna: "+yycolumn));*/
                            ;
            }
          case 77: break;
          case 2: 
            { System.out.println("Reconocido: <<"+yytext()+">>, id");
                                return new Symbol(sym.id, yyline, yycolumn, yytext());
            }
          case 78: break;
          case 3: 
            { System.out.println("Reconocido: <<"+yytext()+">>, c");
                                return new Symbol(sym.c, yyline, yycolumn, yytext());
            }
          case 79: break;
          case 4: 
            { System.out.println("Reconocido: <<"+yytext()+">>, allave");
                                return new Symbol(sym.allave, yyline, yycolumn, yytext());
            }
          case 80: break;
          case 5: 
            { System.out.println("Reconocido: <<"+yytext()+">>, cllave");
                                return new Symbol(sym.cllave, yyline, yycolumn, yytext());
            }
          case 81: break;
          case 6: 
            { System.out.println("Reconocido: <<"+yytext()+">>, acorchete");
                                return new Symbol(sym.acorchete, yyline, yycolumn, yytext());
            }
          case 82: break;
          case 7: 
            { System.out.println("Reconocido: <<"+yytext()+">>, ccorchete");
                                return new Symbol(sym.ccorchete, yyline, yycolumn, yytext());
            }
          case 83: break;
          case 8: 
            { System.out.println("Reconocido: <<"+yytext()+">>, aparentesis");
                                return new Symbol(sym.aparentesis, yyline, yycolumn, yytext());
            }
          case 84: break;
          case 9: 
            { System.out.println("Reconocido: <<"+yytext()+">>, cparentesis");
                                return new Symbol(sym.cparentesis, yyline, yycolumn, yytext());
            }
          case 85: break;
          case 10: 
            { System.out.println("Reconocido: <<"+yytext()+">>, igual");
                                return new Symbol(sym.igual, yyline, yycolumn, yytext());
            }
          case 86: break;
          case 11: 
            { System.out.println("Reconocido: <<"+yytext()+">>, suma");
                                return new Symbol(sym.suma, yyline, yycolumn, yytext());
            }
          case 87: break;
          case 12: 
            { System.out.println("Reconocido: <<"+yytext()+">>, resta");
                                return new Symbol(sym.resta, yyline, yycolumn, yytext());
            }
          case 88: break;
          case 13: 
            { System.out.println("Reconocido: <<"+yytext()+">>, por");
                                return new Symbol(sym.por, yyline, yycolumn, yytext());
            }
          case 89: break;
          case 14: 
            { System.out.println("Reconocido: <<"+yytext()+">>, division");
                                return new Symbol(sym.division, yyline, yycolumn, yytext());
            }
          case 90: break;
          case 15: 
            { System.out.println("Reconocido: <<"+yytext()+">>, potencia");
                                return new Symbol(sym.potencia, yyline, yycolumn, yytext());
            }
          case 91: break;
          case 16: 
            { System.out.println("Reconocido: <<"+yytext()+">>, mayorq");
                                return new Symbol(sym.mayorq, yyline, yycolumn, yytext());
            }
          case 92: break;
          case 17: 
            { System.out.println("Reconocido: <<"+yytext()+">>, menorq");
                                return new Symbol(sym.menorq, yyline, yycolumn, yytext());
            }
          case 93: break;
          case 18: 
            { System.out.println("Reconocido: <<"+yytext()+">>, not");
                                return new Symbol(sym.not, yyline, yycolumn, yytext());
            }
          case 94: break;
          case 19: 
            { System.out.println("Reconocido: <<"+yytext()+">>, interrogacion");
                                return new Symbol(sym.interrogacion, yyline, yycolumn, yytext());
            }
          case 95: break;
          case 20: 
            { System.out.println("Reconocido: <<"+yytext()+">>, and");
                                return new Symbol(sym.and, yyline, yycolumn, yytext());
            }
          case 96: break;
          case 21: 
            { System.out.println("Reconocido: <<"+yytext()+">>, or");
                                return new Symbol(sym.or, yyline, yycolumn, yytext());
            }
          case 97: break;
          case 22: 
            { System.out.println("Reconocido: <<"+yytext()+">>, dospuntos");
                                return new Symbol(sym.dospuntos, yyline, yycolumn, yytext());
            }
          case 98: break;
          case 23: 
            { System.out.println("Reconocido: <<"+yytext()+">>, puntoycoma");
                                return new Symbol(sym.puntoycoma, yyline, yycolumn, yytext());
            }
          case 99: break;
          case 24: 
            { System.out.println("Reconocido: <<"+yytext()+">>, coma");
                                return new Symbol(sym.coma, yyline, yycolumn, yytext());
            }
          case 100: break;
          case 25: 
            { System.out.println("Reconocido: <<"+yytext()+">>, ERnumero");
                                return new Symbol(sym.ERnumero, yyline, yycolumn, yytext());
            }
          case 101: break;
          case 26: 
            { /* ignore white space. */
            }
          case 102: break;
          case 27: 
            { yybegin(comentariosimple);
            }
          case 103: break;
          case 28: 
            { /* omitilo weeeeeee */
            }
          case 104: break;
          case 29: 
            { yybegin(YYINITIAL);
                                        System.out.println("Comentario simple: <<"+yytext()+">> Linea: "+yyline+" ,Columna: "+yycolumn);
            }
          case 105: break;
          case 30: 
            { 
            }
          case 106: break;
          case 31: 
            { System.out.println("Reconocido: <<"+yytext()+">>, iff");
                                return new Symbol(sym.iff, yyline, yycolumn, yytext());
            }
          case 107: break;
          case 32: 
            { System.out.println("Reconocido: <<"+yytext()+">>, inn");
                                return new Symbol(sym.inn, yyline, yycolumn, yytext());
            }
          case 108: break;
          case 33: 
            { System.out.println("Reconocido: <<"+yytext()+">>, doo");
                                return new Symbol(sym.doo, yyline, yycolumn, yytext());
            }
          case 109: break;
          case 34: 
            { System.out.println("Reconocido: <<"+yytext()+">>, igualigual");
                                return new Symbol(sym.igualigual, yyline, yycolumn, yytext());
            }
          case 110: break;
          case 35: 
            { System.out.println("Reconocido: <<"+yytext()+">>, flecha");
                                return new Symbol(sym.flecha, yyline, yycolumn, yytext());
            }
          case 111: break;
          case 36: 
            { System.out.println("Reconocido: <<"+yytext()+">>, modulo");
                                return new Symbol(sym.modulo, yyline, yycolumn, yytext());
            }
          case 112: break;
          case 37: 
            { System.out.println("Reconocido: <<"+yytext()+">>, mayorigualq");
                                return new Symbol(sym.mayorigualq, yyline, yycolumn, yytext());
            }
          case 113: break;
          case 38: 
            { System.out.println("Reconocido: <<"+yytext()+">>, menorigualq");
                                return new Symbol(sym.menorigualq, yyline, yycolumn, yytext());
            }
          case 114: break;
          case 39: 
            { System.out.println("Reconocido: <<"+yytext()+">>, diferente");
                                return new Symbol(sym.diferente, yyline, yycolumn, yytext());
            }
          case 115: break;
          case 40: 
            { yybegin(comentariomultiple);
            }
          case 116: break;
          case 41: 
            { yybegin(YYINITIAL);
                                        System.out.println("Comentario multiple: <<"+yytext()+">> Linea: "+yyline+" ,Columna: "+yycolumn);
            }
          case 117: break;
          case 42: 
            { System.out.println("Reconocido: <<"+yytext()+">>, forr");
                                return new Symbol(sym.forr, yyline, yycolumn, yytext());
            }
          case 118: break;
          case 43: 
            { System.out.println("Reconocido: <<"+yytext()+">>, pie");
                                return new Symbol(sym.pie, yyline, yycolumn, yytext());
            }
          case 119: break;
          case 44: 
            { System.out.println("Reconocido: <<"+yytext()+">>, ERdecimal");
                                return new Symbol(sym.ERdecimal, yyline, yycolumn, yytext());
            }
          case 120: break;
          case 45: 
            { System.out.println("Reconocido: <<"+yytext()+">>, elsee");
                                return new Symbol(sym.elsee, yyline, yycolumn, yytext());
            }
          case 121: break;
          case 46: 
            { System.out.println("Reconocido: <<"+yytext()+">>, listt");
                                return new Symbol(sym.listt, yyline, yycolumn, yytext());
            }
          case 122: break;
          case 47: 
            { System.out.println("Reconocido: <<"+yytext()+">>, truee");
                                return new Symbol(sym.truee, yyline, yycolumn, yytext());
            }
          case 123: break;
          case 48: 
            { System.out.println("Reconocido: <<"+yytext()+">>, casee");
                                return new Symbol(sym.casee, yyline, yycolumn, yytext());
            }
          case 124: break;
          case 49: 
            { System.out.println("Reconocido: <<"+yytext()+">>, hist");
                                return new Symbol(sym.hist, yyline, yycolumn, yytext());
            }
          case 125: break;
          case 50: 
            { System.out.println("Reconocido: <<"+yytext()+">>, plot");
                                return new Symbol(sym.plot, yyline, yycolumn, yytext());
            }
          case 126: break;
          case 51: 
            { System.out.println("Reconocido: <<"+yytext()+">>, nCol");
                                return new Symbol(sym.nCol, yyline, yycolumn, yytext());
            }
          case 127: break;
          case 52: 
            { System.out.println("Reconocido: <<"+yytext()+">>, nrow");
                                return new Symbol(sym.nrow, yyline, yycolumn, yytext());
            }
          case 128: break;
          case 53: 
            { System.out.println("Reconocido: <<"+yytext()+">>, nulo");
                                return new Symbol(sym.nulo, yyline, yycolumn, yytext());
            }
          case 129: break;
          case 54: 
            { System.out.println("Reconocido: <<"+yytext()+">>, meann");
                                return new Symbol(sym.meann, yyline, yycolumn, yytext());
            }
          case 130: break;
          case 55: 
            { System.out.println("Reconocido: <<"+yytext()+">>, modee");
                                return new Symbol(sym.modee, yyline, yycolumn, yytext());
            }
          case 131: break;
          case 56: 
            { System.out.println("Reconocido: <<"+yytext()+">>, falsee");
                                return new Symbol(sym.falsee, yyline, yycolumn, yytext());
            }
          case 132: break;
          case 57: 
            { System.out.println("Reconocido: <<"+yytext()+">>, whilee");
                                return new Symbol(sym.whilee, yyline, yycolumn, yytext());
            }
          case 133: break;
          case 58: 
            { System.out.println("Reconocido: <<"+yytext()+">>, trunkk");
                                return new Symbol(sym.trunkk, yyline, yycolumn, yytext());
            }
          case 134: break;
          case 59: 
            { System.out.println("Reconocido: <<"+yytext()+">>, arrayy");
                                return new Symbol(sym.arrayy, yyline, yycolumn, yytext());
            }
          case 135: break;
          case 60: 
            { System.out.println("Reconocido: <<"+yytext()+">>, breakk");
                                return new Symbol(sym.breakk, yyline, yycolumn, yytext());
            }
          case 136: break;
          case 61: 
            { System.out.println("Reconocido: <<"+yytext()+">>, roundd");
                                return new Symbol(sym.roundd, yyline, yycolumn, yytext());
            }
          case 137: break;
          case 62: 
            { System.out.println("Reconocido: <<"+yytext()+">>, print");
                                return new Symbol(sym.print, yyline, yycolumn, yytext());
            }
          case 138: break;
          case 63: 
            { System.out.println("Reconocido: <<"+yytext()+">>, lengthh");
                                return new Symbol(sym.lengthh, yyline, yycolumn, yytext());
            }
          case 139: break;
          case 64: 
            { System.out.println("Reconocido: <<"+yytext()+">>, switchh");
                                return new Symbol(sym.switchh, yyline, yycolumn, yytext());
            }
          case 140: break;
          case 65: 
            { System.out.println("Reconocido: <<"+yytext()+">>, typeoff");
                                return new Symbol(sym.typeoff, yyline, yycolumn, yytext());
            }
          case 141: break;
          case 66: 
            { System.out.println("Reconocido: <<"+yytext()+">>, returnn");
                                return new Symbol(sym.returnn, yyline, yycolumn, yytext());
            }
          case 142: break;
          case 67: 
            { System.out.println("Reconocido: <<"+yytext()+">>, removee");
                                return new Symbol(sym.removee, yyline, yycolumn, yytext());
            }
          case 143: break;
          case 68: 
            { System.out.println("Reconocido: <<"+yytext()+">>, mediann");
                                return new Symbol(sym.mediann, yyline, yycolumn, yytext());
            }
          case 144: break;
          case 69: 
            { System.out.println("Reconocido: <<"+yytext()+">>, matrix");
                                return new Symbol(sym.matrix, yyline, yycolumn, yytext());
            }
          case 145: break;
          case 70: 
            { System.out.println("Reconocido: <<"+yytext()+">>, barplot");
                                return new Symbol(sym.barplot, yyline, yycolumn, yytext());
            }
          case 146: break;
          case 71: 
            { System.out.println("Reconocido: <<"+yytext()+">>, defaultt");
                                return new Symbol(sym.defaultt, yyline, yycolumn, yytext());
            }
          case 147: break;
          case 72: 
            { System.out.println("Reconocido: <<"+yytext()+">>, functionn");
                                return new Symbol(sym.functionn, yyline, yycolumn, yytext());
            }
          case 148: break;
          case 73: 
            { System.out.println("Reconocido: <<"+yytext()+">>, continuee");
                                return new Symbol(sym.continuee, yyline, yycolumn, yytext());
            }
          case 149: break;
          case 74: 
            { System.out.println("Reconocido: <<"+yytext()+">>, tolowercase");
                                return new Symbol(sym.tolowercase, yyline, yycolumn, yytext());
            }
          case 150: break;
          case 75: 
            { System.out.println("Reconocido: <<"+yytext()+">>, touppercase");
                                return new Symbol(sym.touppercase, yyline, yycolumn, yytext());
            }
          case 151: break;
          case 76: 
            { System.out.println("Reconocido: <<"+yytext()+">>, stringlength");
                                return new Symbol(sym.stringlength, yyline, yycolumn, yytext());
            }
          case 152: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
