package analizador;

import java.util.LinkedList;
import java.util.ArrayList;
import java_cup.runtime.*;
import Errores.*;
import Interprete.*;
import Interprete.Entorno.*;
import Interprete.Expresiones.*;
import Interprete.Expresiones.TipoDato.*;
import Interprete.Expresiones.Relacionales.*;
import Interprete.Expresiones.Logicas.*;
import Interprete.Expresiones.Aritmeticas.*;
import Interprete.Instrucciones.*;

parser code
{://Codigo de acciones
  //Codigo visible
    
    public LinkedList<AST> arbol = new LinkedList<>();
    public ArrayList<ErrorE> errorSintactico = new ArrayList<>();
    
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int columna = s.right;
        int fila = s.left;
        
        System.out.println("!!!!!!!---- Error Sintactico Recuperado ----!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        String aux = "Error Sintactico Recuperado: " + "\t\tLexema: "+lexema + " \t\tFila: "+fila +" \t\tColumna: "+columna;
        //errorSintactico.add(new ErrorE(aux));
        errorSintactico.add(new ErrorE(lexema, fila, columna));
    }

   
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int columna = s.right;
        int fila = s.left;
        
        System.err.println("Error caracter no esperado");
        System.err.println(s);
        System.out.println("!!!!!!! Error Sintactico, Panic Mode!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);  
        
        String aux1 = "Error Sintactico, Modo Panico: " + "\t\tLexema: "+lexema + " \t\tFila: "+fila +" \t\tColumna: "+columna;
        //errorSintactico.add(new ErrorE(aux1));
        errorSintactico.add(new ErrorE(lexema, fila, columna));
    }
:}

action code
{://Codigo de acciones
      
:}


terminal String iff, elsee, switchh, casee, breakk, whilee,forr, doo, truee, falsee, inn, continuee, returnn, functionn, nulo, defaultt;
//terminal String c, listt, typeoff, lengthh, nCol, arrayy, nrow, stringlength, removee, tolowercase, touppercase, trunkk, roundd;
//terminal String meann, mediann, modee, matrix, pie, barplot, plot, hist, print;

terminal String allave, cllave, acorchete, ccorchete, aparentesis, cparentesis, igual, suma, resta, por, division;
terminal String potencia, modulo, mayorq, menorq, mayorigualq, menorigualq, igualigual, diferente, interrogacion;
terminal String and, or, not, dospuntos, puntoycoma, coma, flecha, unegativo, upositivo;
terminal String cadena, ERnumero, ERdecimal, id;


nonterminal S;
nonterminal LinkedList<AST> CUERPO;
nonterminal AST SENTENCIA;
nonterminal BloqueSentencias BLOQUESENTENCIAS;
nonterminal Expresion DECLARACIONES;
nonterminal AST IFSSS;
nonterminal LinkedList<IffLista> IF_LISTA;
nonterminal SWITCHH, SWITCHBLOQUESUPS, SWITCHBLOQUES, SWITCHCASEDEFAULTS, SWITCHCASEDEFAULT;
nonterminal WhileCiclo WHILEE;
nonterminal DOWHILE;
nonterminal AST SENTENCIATRANSFERENCIA;
nonterminal FORR, INICIALIZACION;
nonterminal Expresion E;
nonterminal ArrayList<Expresion> EIZQUIERDA;
nonterminal ArrayList<Expresion> EDERECHA;
nonterminal AST FACTORIZANDO;
nonterminal Expresion FUNCIONESMETODOSDECLARACIONES;


//PRECEDENCIA------------------------------------------------------------------------------------------------------------------
precedence left defaultt;
precedence left coma;
//precedence left igual;
precedence right interrogacion, dospuntos;
precedence left or;
precedence left and;
precedence left igualigual, diferente;
precedence left mayorq, menorq, menorigualq, mayorigualq;
precedence left suma, resta;
precedence left por,division, modulo;
precedence left potencia;
precedence right unegativo, upositivo;
precedence right not;
precedence right acorchete, aparentesis;
precedence left id;
//------------------------------------------------------------------------------------------------------------------------------



start with S;
 
S::= CUERPO:x{:
        this.parser.arbol = x;
    :};

CUERPO::= CUERPO:im SENTENCIA:i {:
            RESULT = im;
            RESULT.add(i);
         :}
         |SENTENCIA:i {:
            RESULT = new LinkedList<AST>();
            RESULT.add(i);
         :};
 
SENTENCIA::= FACTORIZANDO:v{:
            RESULT = v;
        :}            
       | IFSSS:v{:
            RESULT = v;
        :}
       | SWITCHH{::}
       | WHILEE:v{:
            RESULT = v;
        :}
       | DOWHILE puntoycoma{::}
       | DOWHILE{::}
       | FORR{::}
       | SENTENCIATRANSFERENCIA:v puntoycoma{:
            RESULT = v;
        :}
       | SENTENCIATRANSFERENCIA:v{:
            RESULT = v;
        :};     
       
         




FORR::= forr aparentesis INICIALIZACION cparentesis BLOQUESENTENCIAS{::};

INICIALIZACION::= id inn E {::};
                 


WHILEE::= whilee:e aparentesis E:condicion cparentesis BLOQUESENTENCIAS:bloque{:
            RESULT = new WhileCiclo(condicion, bloque, eleft +1, eright +1);
         :};

DOWHILE::= doo BLOQUESENTENCIAS whilee aparentesis E cparentesis{::};





SWITCHH::= switchh aparentesis E cparentesis allave SWITCHBLOQUESUPS SWITCHCASEDEFAULTS cllave{::}
          | switchh aparentesis E cparentesis allave SWITCHBLOQUESUPS cllave{::}
          | switchh aparentesis E cparentesis allave SWITCHCASEDEFAULTS cllave{::}
          | switchh aparentesis E cparentesis allave cllave{::};



SWITCHBLOQUESUPS::= SWITCHBLOQUES{::}
                  | SWITCHBLOQUESUPS SWITCHBLOQUES{::};

SWITCHBLOQUES::= SWITCHCASEDEFAULTS CUERPO{::};

SENTENCIATRANSFERENCIA::= continuee:e{:
                            RESULT = new Continuee(eleft +1, eright +1);
                        :}
                        | breakk:e{:
                            RESULT = new Breakk(eleft +1, eright +1);
                        :}
                        | returnn:e{:
                            RESULT = new Retorno(eleft +1, eright +1);
                        :}
                        | returnn:ee aparentesis E:e cparentesis{:
                            RESULT = new Retorno(e, eeleft +1, eeright +1);
                        :};

SWITCHCASEDEFAULTS::= SWITCHCASEDEFAULTS SWITCHCASEDEFAULT{::}
              | SWITCHCASEDEFAULT{::};

SWITCHCASEDEFAULT::= casee E dospuntos{::}
             | defaultt dospuntos {::}; 




IFSSS::= IF_LISTA:ifs  elsee:e  BLOQUESENTENCIAS:bloque{:
            RESULT = new Iff(bloque, ifs,eleft +1, eright +1);
        :}
       | IF_LISTA:lista{:
           RESULT = new  Iff(null, lista, listaleft +1, listaright +1);
        :};

IF_LISTA::= iff:id aparentesis E:e cparentesis BLOQUESENTENCIAS:bloque{:
                LinkedList<IffLista> nodoAST = new LinkedList<IffLista>();

                nodoAST.addLast(new IffLista(e, bloque, idleft +1, idright +1));
                RESULT = nodoAST;
          :}
          | IF_LISTA:listaifs elsee iff:id aparentesis E:e cparentesis BLOQUESENTENCIAS:bloque{:
                LinkedList<IffLista> nodoAST = listaifs;

                nodoAST.addLast(new IffLista(e, bloque, idleft +1, idright +1));
                RESULT = nodoAST; 
          :};



FACTORIZANDO::= id:id igual FUNCIONESMETODOSDECLARACIONES:v {:
                    RESULT = new Factorizando_id_igual(id.toLowerCase(), v, idleft +1, idright +1);
                :}

               |id acorchete E coma ccorchete igual E{::}
               |id acorchete coma E ccorchete igual E{::} 
               |id acorchete E coma ccorchete igual E puntoycoma{::}
               |id acorchete coma E ccorchete igual E puntoycoma{::} 

               |id:id aparentesis E:e cparentesis{:
                    RESULT = new LlamadaFunciones(id.toLowerCase(), e, idleft +1, idright +1);
                :}  
               |id:id aparentesis cparentesis{:
                    RESULT = new LlamadaFunciones(id.toLowerCase(), null, idleft +1, idright +1);
                :} 
               |id:id aparentesis E:e cparentesis puntoycoma{:
                    RESULT = new LlamadaFunciones(id.toLowerCase(), e, idleft +1, idright +1);
                :}
               |id:id aparentesis cparentesis puntoycoma{:
                    RESULT = new LlamadaFunciones(id.toLowerCase(), null, idleft +1, idright +1);
                :} 

               |id:id acorchete E:e1 ccorchete EIZQUIERDA:lista igual E:e2 {:
                    RESULT = new AsignacionCorcheteSimple(id,e1,lista,e2,idleft +1, idright +1);
               :}
               |id:id acorchete acorchete E:e1 ccorchete ccorchete EIZQUIERDA:lista igual E:e2 {:
                    RESULT = new AsignacionCorcheteDoble(id,e1,lista,e2,idleft +1, idright +1);
               :}
               |id:id acorchete E:e1 ccorchete EIZQUIERDA:lista igual E:e2 puntoycoma{:
                    RESULT = new AsignacionCorcheteSimple(id,e1,lista,e2,idleft +1, idright +1);
                    
               :}
               |id acorchete acorchete E ccorchete ccorchete EIZQUIERDA igual E puntoycoma{::};



FUNCIONESMETODOSDECLARACIONES::= functionn aparentesis cparentesis BLOQUESENTENCIAS{::}
                   |functionn aparentesis E cparentesis BLOQUESENTENCIAS{::}
                   |aparentesis cparentesis flecha BLOQUESENTENCIAS{::}
                   |aparentesis E cparentesis flecha BLOQUESENTENCIAS{::}
                   |E:e {:
                        RESULT = new ExpresionValor(e, eleft +1, eright +1);
                    :}
                   |E:e puntoycoma{:
                        RESULT = new ExpresionValor(e, eleft +1, eright +1);
                    :};


                        

BLOQUESENTENCIAS::= allave CUERPO:cuerpo cllave{:
                        RESULT = new BloqueSentencias(cuerpoleft +1, cuerporight +1, cuerpo);
                    :}
                   |allave:cuerpo cllave{:
                        RESULT = new BloqueSentencias(cuerpoleft +1, cuerporight +1);
                    :};


EIZQUIERDA::= EIZQUIERDA:lista acorchete E:e ccorchete {:
                EIzquierdaCorcheteSimple cor = new EIzquierdaCorcheteSimple(e, eleft +1, eright +1);
                RESULT = lista;
                RESULT.add(cor);
            :}   
            | EIZQUIERDA:lista acorchete acorchete E:e ccorchete ccorchete {:
                EIzquierdaCorcheteDoble cor = new EIzquierdaCorcheteDoble(e, eleft +1, eright +1);
                RESULT = lista;
                RESULT.add(cor);
            :}
            | {:
                RESULT = new ArrayList<Expresion>();
              :};

EDERECHA::= EDERECHA:lista acorchete E:e ccorchete {:
                EDerechaCorcheteSimple cor = new EDerechaCorcheteSimple(e, eleft +1, eright +1); 
                RESULT = lista;
                RESULT.add(cor);
          :}            
          | EDERECHA:lista acorchete acorchete E:e ccorchete ccorchete {:
                EDerechaCorcheteDoble cor = new EDerechaCorcheteDoble(e, eleft +1, eright +1); 
                RESULT = lista;
                RESULT.add(cor);
          :}

          | EDERECHA:lista aparentesis E:e cparentesis {: 
                EDerechaParentesis cor = new EDerechaParentesis(e, eleft +1, eright +1); 
                RESULT = lista;
                RESULT.add(cor);
          :}



          | EDERECHA:lista acorchete E:e coma ccorchete {: //[e,] MATRICES
                EDerechaCorcheteEcoma cor = new EDerechaCorcheteEcoma(e, eleft +1, eright +1); 
                RESULT = lista;
                RESULT.add(cor);
          :}
          | EDERECHA:lista acorchete coma E:e ccorchete {: //[,e] MATRICES
                EDerechaComaE cor = new EDerechaComaE(e, eleft +1, eright +1); 
                RESULT = lista;
                RESULT.add(cor);
          :}
          | {:
                RESULT = new ArrayList<Expresion>();
            :};


E::= resta:s E:e1 {:
        RESULT = new Negativo(sleft +1, sright +1, e1);
    :} %prec unegativo 
    |suma:s E:e1 {:
        RESULT = new Positivo(sleft +1, sright +1, e1);
    :} %prec upositivo  
    |not:s E:e1{:
         RESULT = new Nott(sleft +1, sright +1, e1);
    :}                    
    |E:e1 coma:s E:e2 {:
        RESULT = new Comas(sleft +1, sright +1, e1, e2);
    :}                  
    |E:e1 or:s E:e2{:
        RESULT = new Or(sleft +1, sright +1, e1, e2);
    :}            
    |E:e1 and:s E:e2{:
        RESULT = new And(sleft +1, sright +1, e1, e2);
    :}           
    |E:e1 suma:s E:e2 {:
        RESULT = new Suma(sleft +1, sright +1, e1, e2);
    :}          
    |E:e1 resta:s E:e2 {:
        RESULT = new Resta(sleft +1, sright +1, e1, e2);
    :}         
    |E:e1 por:s E:e2 {:
        RESULT = new Multiplicacion(sleft +1, sright +1, e1, e2);
    :}           
    |E:e1 division:s E:e2 {:
        RESULT = new Division(sleft +1, sright +1, e1, e2);
    :}      
    |E:e1 potencia:s E:e2 {:
        RESULT = new Potencia(sleft +1, sright +1, e1, e2);
    :}     
    |E:e1 modulo:s E:e2 {:
        RESULT = new Modulo(sleft +1, sright +1, e1, e2);
    :}                
    |E:e1 mayorq:s E:e2{:
        RESULT = new MayorQ(sleft +1, sright +1, e1, e2);
    :}         
    |E:e1 menorq:s E:e2{:
        RESULT = new MenorQ(sleft +1, sright +1, e1, e2);
    :}         
    |E:e1 mayorigualq:s E:e2{:
        RESULT = new MayorIgualQ(sleft +1, sright +1, e1, e2);
    :}    
    |E:e1 menorigualq:s E:e2{:
        RESULT = new MenorIgualQ(sleft +1, sright +1, e1, e2);
    :}    
    |E:e1 igualigual:s E:e2{:
        RESULT = new IgualIgual(sleft +1, sright +1, e1, e2);
    :}     
    |E:e1 diferente:n E:e2{:
        RESULT = new Diferente(nleft +1, nright +1, e1, e2);
    :}      
    |E:cond interrogacion:n E:vdd dospuntos E:fake {:
        RESULT = new Ternario(cond, vdd, fake,  nleft +1, nright +1);
    :}    
    |aparentesis E:el cparentesis{:
        RESULT = el;
    :}      
    |ERnumero:n{:
        RESULT = new Numero(Integer.parseInt(n), Operacion.tipoDato.ENTERO , nleft +1, nright +1);
    :}       
    |ERdecimal:n{:
        RESULT = new Decimal( Double.parseDouble(n), Operacion.tipoDato.DECIMAL , nleft +1, nright +1);
    :}      
    |cadena:n{:
        RESULT = new Cadena(n.toLowerCase(), Operacion.tipoDato.STRING , nleft +1, nright +1);
    :}         
    |truee:n{:
        RESULT = new Booleano(true, Operacion.tipoDato.BOOLEAN , nleft +1, nright +1);
    :}          
    |falsee:n{:
        RESULT = new Booleano(false, Operacion.tipoDato.BOOLEAN , nleft +1, nright +1);
    :}         
    |nulo:n{:
        RESULT = new Cadena("NULL", Operacion.tipoDato.STRING , nleft +1, nright +1); 
                     //Nulo("null", Operacion.tipoDato.NULO , nleft +1, nright +1);
    :}         
    |defaultt:n {:
        RESULT = new Defaultt("default", Operacion.tipoDato.DEFAULT , nleft +1, nright +1);
    :}    

    |id:id EDERECHA:derecha {:
        RESULT = new Identificador(id.toLowerCase(), Operacion.tipoDato.ID, idleft +1, idright +1, derecha);
    :}
    |DECLARACIONES:decla{:
        RESULT = decla;
    :}; 


DECLARACIONES::= id:id igual E:v{:
        RESULT = new DeclaracionE(id.toLowerCase(), v, idleft +1, idright +1);
    :};